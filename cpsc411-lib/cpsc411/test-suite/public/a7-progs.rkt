#lang racket/base

(provide (all-defined-out))

#;
(for/list ([pass (drop (drop-right (current-pass-list) 2) 2)])
  (for/list ([i exprs-lang-v7-programs])
    ((apply compose (reverse (takef
                              (current-pass-list)
                              (lambda (x) (not (eq?
                                                x
                                                pass))))))
     i)))

(define-values
  (implement-safe-primops-source-progs
   specify-representation-source-progs
   remove-complex-opera*-source-progs
   sequentialize-let-source-progs
   impose-calling-conventions-source-progs
   normalize-bind-source-progs
   select-instructions-source-progs
   uncover-locals-source-progs
   undead-analysis-source-progs
   conflict-analysis-source-progs
   assign-call-undead-variables-source-progs
   allocate-frames-source-progs
   assign-registers-source-progs
   assign-frame-variables-source-progs
   replace-locations-source-progs
   optimize-predicates-source-progs
   implement-fvars-source-progs
   expose-basic-blocks-source-progs
   resolve-predicates-source-progs
   flatten-program-source-progs
   patch-instructions-source-progs
   generate-x64-source-progs)
  (apply
   values
   '(((module (define L.id.1817 (lambda (x.11932) x.11932)) (call L.id.1817 5)) (module (define L.id.1818 (lambda (x.11933) x.11933)) (let ((y.11934 (call L.id.1818 5))) (call + 5 y.11934))) (module (define L.odd?.1819 (lambda (x.11935) (if (call eq? x.11935 0) 0 (let ((y.11936 (call + x.11935 -1))) (call L.even?.1820 y.11936))))) (define L.even?.1820 (lambda (x.11937) (if (call eq? x.11937 0) 1 (let ((y.11938 (call + x.11937 -1))) (call L.odd?.1819 y.11938))))) (call L.even?.1820 5)) (module (define L.zero.1821 (lambda (v0.11942 v1.11941 v2.11940 v3.11939) 0)) 0) (module (define L.id.1822 (lambda (x.11943) x.11943)) (let ((y.11944 L.id.1822)) (call y.11944 5))) (module (define L.id1.1823 (lambda (x.11945) x.11945)) (define L.id2.1824 (lambda (x.11946) x.11946)) (let ((y.11947 (if #t L.id1.1823 L.id2.1824))) (call y.11947 5))) (module (call + (call + 5 6) (call * 4 5))) (module (if (call eq? (call + 5 6) 11) 4 6)) (module #t) (module #f) (module empty) (module (define L.F.1825 (lambda (a.11954 b.11953 c.11952 d.11951 e.11950 f.11949 g.11948) (call + 10 (call L.G.1826 a.11954 b.11953 c.11952 d.11951 e.11950 f.11949 g.11948 8)))) (define L.G.1826 (lambda (a.11962 b.11961 c.11960 d.11959 e.11958 f.11957 g.11956 h.11955) (call L.H.1827 a.11962 b.11961 c.11960 d.11959 e.11958 f.11957 g.11956 h.11955 9))) (define L.H.1827 (lambda (a.11971 b.11970 c.11969 d.11968 e.11967 f.11966 g.11965 h.11964 j.11963) (let ((r1.11972 (call + a.11971 b.11970))) (let ((r2.11973 (call + r1.11972 c.11969))) (let ((r3.11974 (call + r2.11973 d.11968))) (let ((r4.11975 (call + r3.11974 e.11967))) (let ((r5.11976 (call + r4.11975 f.11966))) (let ((r6.11977 (call + r5.11976 g.11965))) (let ((r7.11978 (call + r6.11977 h.11964))) (call + r7.11978 j.11963)))))))))) (call L.F.1825 1 2 3 4 5 6 7)) (module (define L.swap.1828 (lambda (x.11980 y.11979) (if (call < y.11979 x.11980) x.11980 (call L.swap.1828 y.11979 x.11980)))) (call L.swap.1828 1 2)) (module (define L.fact_loop.1829 (lambda (n.11982 acc.11981) (if (call eq? n.11982 0) acc.11981 (call L.fact_loop.1829 (call - n.11982 1) (call * acc.11981 n.11982))))) (call L.fact_loop.1829 5 1)) (module (define L.fact.1830 (lambda (x.11983) (if (call eq? x.11983 0) 1 (call * x.11983 (call L.fact.1830 (call - x.11983 1)))))) (call L.fact.1830 5)) (module (define L.fib_loop.1831 (lambda (n.11986 acc1.11985 acc2.11984) (if (call eq? n.11986 0) acc1.11985 (if (call eq? n.11986 1) acc2.11984 (let ((new-n.11987 (call + n.11986 -1))) (let ((new-acc2.11988 (call + acc1.11985 acc2.11984))) (call L.fib_loop.1831 new-n.11987 acc2.11984 new-acc2.11988))))))) (call L.fib_loop.1831 5 0 1)) (module (define L.fib_loop.1832 (lambda (n.11991 acc1.11990 acc2.11989) (if (call eq? n.11991 0) acc1.11990 (if (call eq? n.11991 1) acc2.11989 (let ((new-n.11992 (call + n.11991 -1))) (let ((new-acc2.11993 (call + acc1.11990 acc2.11989))) (call L.fib_loop.1832 new-n.11992 acc2.11989 new-acc2.11993))))))) (call L.fib_loop.1832 5 0 1))) ((module (define L.id.1833 (lambda (x.11994) x.11994)) (call L.id.1833 5)) (module (define L.+.1835 (lambda (tmp.12022 tmp.12023) (if (fixnum? tmp.12023) (if (fixnum? tmp.12022) (unsafe-fx+ tmp.12022 tmp.12023) (error 1)) (error 1)))) (define L.id.1834 (lambda (x.12018) x.12018)) (let ((y.12019 (call L.id.1834 5))) (call L.+.1835 5 y.12019))) (module (define L.+.1838 (lambda (tmp.12049 tmp.12050) (if (fixnum? tmp.12050) (if (fixnum? tmp.12049) (unsafe-fx+ tmp.12049 tmp.12050) (error 1)) (error 1)))) (define L.odd?.1836 (lambda (x.12043) (if (eq? x.12043 0) 0 (let ((y.12044 (call L.+.1838 x.12043 -1))) (call L.even?.1837 y.12044))))) (define L.even?.1837 (lambda (x.12045) (if (eq? x.12045 0) 1 (let ((y.12046 (call L.+.1838 x.12045 -1))) (call L.odd?.1836 y.12046))))) (call L.even?.1837 5)) (module (define L.zero.1839 (lambda (v0.12073 v1.12072 v2.12071 v3.12070) 0)) 0) (module (define L.id.1840 (lambda (x.12097) x.12097)) (let ((y.12098 L.id.1840)) (call y.12098 5))) (module (define L.id1.1841 (lambda (x.12122) x.12122)) (define L.id2.1842 (lambda (x.12123) x.12123)) (let ((y.12124 (if #t L.id1.1841 L.id2.1842))) (call y.12124 5))) (module (define L.*.1844 (lambda (tmp.12148 tmp.12149) (if (fixnum? tmp.12149) (if (fixnum? tmp.12148) (unsafe-fx* tmp.12148 tmp.12149) (error 0)) (error 0)))) (define L.+.1843 (lambda (tmp.12150 tmp.12151) (if (fixnum? tmp.12151) (if (fixnum? tmp.12150) (unsafe-fx+ tmp.12150 tmp.12151) (error 1)) (error 1)))) (call L.+.1843 (call L.+.1843 5 6) (call L.*.1844 4 5))) (module (define L.+.1845 (lambda (tmp.12173 tmp.12174) (if (fixnum? tmp.12174) (if (fixnum? tmp.12173) (unsafe-fx+ tmp.12173 tmp.12174) (error 1)) (error 1)))) (if (eq? (call L.+.1845 5 6) 11) 4 6)) (module #t) (module #f) (module empty) (module (define L.+.1849 (lambda (tmp.12296 tmp.12297) (if (fixnum? tmp.12297) (if (fixnum? tmp.12296) (unsafe-fx+ tmp.12296 tmp.12297) (error 1)) (error 1)))) (define L.F.1846 (lambda (a.12269 b.12268 c.12267 d.12266 e.12265 f.12264 g.12263) (call L.+.1849 10 (call L.G.1847 a.12269 b.12268 c.12267 d.12266 e.12265 f.12264 g.12263 8)))) (define L.G.1847 (lambda (a.12277 b.12276 c.12275 d.12274 e.12273 f.12272 g.12271 h.12270) (call L.H.1848 a.12277 b.12276 c.12275 d.12274 e.12273 f.12272 g.12271 h.12270 9))) (define L.H.1848 (lambda (a.12286 b.12285 c.12284 d.12283 e.12282 f.12281 g.12280 h.12279 j.12278) (let ((r1.12287 (call L.+.1849 a.12286 b.12285))) (let ((r2.12288 (call L.+.1849 r1.12287 c.12284))) (let ((r3.12289 (call L.+.1849 r2.12288 d.12283))) (let ((r4.12290 (call L.+.1849 r3.12289 e.12282))) (let ((r5.12291 (call L.+.1849 r4.12290 f.12281))) (let ((r6.12292 (call L.+.1849 r5.12291 g.12280))) (let ((r7.12293 (call L.+.1849 r6.12292 h.12279))) (call L.+.1849 r7.12293 j.12278)))))))))) (call L.F.1846 1 2 3 4 5 6 7)) (module (define L.<.1851 (lambda (tmp.12325 tmp.12326) (if (fixnum? tmp.12326) (if (fixnum? tmp.12325) (unsafe-fx< tmp.12325 tmp.12326) (error 3)) (error 3)))) (define L.swap.1850 (lambda (x.12318 y.12317) (if (call L.<.1851 y.12317 x.12318) x.12318 (call L.swap.1850 y.12317 x.12318)))) (call L.swap.1850 1 2)) (module (define L.*.1854 (lambda (tmp.12344 tmp.12345) (if (fixnum? tmp.12345) (if (fixnum? tmp.12344) (unsafe-fx* tmp.12344 tmp.12345) (error 0)) (error 0)))) (define L.-.1853 (lambda (tmp.12348 tmp.12349) (if (fixnum? tmp.12349) (if (fixnum? tmp.12348) (unsafe-fx- tmp.12348 tmp.12349) (error 2)) (error 2)))) (define L.fact_loop.1852 (lambda (n.12343 acc.12342) (if (eq? n.12343 0) acc.12342 (call L.fact_loop.1852 (call L.-.1853 n.12343 1) (call L.*.1854 acc.12342 n.12343))))) (call L.fact_loop.1852 5 1)) (module (define L.*.1857 (lambda (tmp.12368 tmp.12369) (if (fixnum? tmp.12369) (if (fixnum? tmp.12368) (unsafe-fx* tmp.12368 tmp.12369) (error 0)) (error 0)))) (define L.-.1856 (lambda (tmp.12372 tmp.12373) (if (fixnum? tmp.12373) (if (fixnum? tmp.12372) (unsafe-fx- tmp.12372 tmp.12373) (error 2)) (error 2)))) (define L.fact.1855 (lambda (x.12367) (if (eq? x.12367 0) 1 (call L.*.1857 x.12367 (call L.fact.1855 (call L.-.1856 x.12367 1)))))) (call L.fact.1855 5)) (module (define L.+.1859 (lambda (tmp.12398 tmp.12399) (if (fixnum? tmp.12399) (if (fixnum? tmp.12398) (unsafe-fx+ tmp.12398 tmp.12399) (error 1)) (error 1)))) (define L.fib_loop.1858 (lambda (n.12393 acc1.12392 acc2.12391) (if (eq? n.12393 0) acc1.12392 (if (eq? n.12393 1) acc2.12391 (let ((new-n.12394 (call L.+.1859 n.12393 -1))) (let ((new-acc2.12395 (call L.+.1859 acc1.12392 acc2.12391))) (call L.fib_loop.1858 new-n.12394 acc2.12391 new-acc2.12395))))))) (call L.fib_loop.1858 5 0 1)) (module (define L.+.1861 (lambda (tmp.12426 tmp.12427) (if (fixnum? tmp.12427) (if (fixnum? tmp.12426) (unsafe-fx+ tmp.12426 tmp.12427) (error 1)) (error 1)))) (define L.fib_loop.1860 (lambda (n.12421 acc1.12420 acc2.12419) (if (eq? n.12421 0) acc1.12420 (if (eq? n.12421 1) acc2.12419 (let ((new-n.12422 (call L.+.1861 n.12421 -1))) (let ((new-acc2.12423 (call L.+.1861 acc1.12420 acc2.12419))) (call L.fib_loop.1860 new-n.12422 acc2.12419 new-acc2.12423))))))) (call L.fib_loop.1860 5 0 1))) ((module (define L.id.1862 (lambda (x.12447) x.12447)) (call L.id.1862 40)) (module (define L.+.1864 (lambda (tmp.12475 tmp.12476) (if (!= (if (= (bitwise-and tmp.12476 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12475 7) 0) 14 6) 6) (+ tmp.12475 tmp.12476) 318) 318))) (define L.id.1863 (lambda (x.12471) x.12471)) (let ((y.12472 (call L.id.1863 40))) (call L.+.1864 40 y.12472))) (module (define L.+.1867 (lambda (tmp.12502 tmp.12503) (if (!= (if (= (bitwise-and tmp.12503 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12502 7) 0) 14 6) 6) (+ tmp.12502 tmp.12503) 318) 318))) (define L.odd?.1865 (lambda (x.12496) (if (!= (if (= x.12496 0) 14 6) 6) 0 (let ((y.12497 (call L.+.1867 x.12496 -8))) (call L.even?.1866 y.12497))))) (define L.even?.1866 (lambda (x.12498) (if (!= (if (= x.12498 0) 14 6) 6) 8 (let ((y.12499 (call L.+.1867 x.12498 -8))) (call L.odd?.1865 y.12499))))) (call L.even?.1866 40)) (module (define L.zero.1868 (lambda (v0.12526 v1.12525 v2.12524 v3.12523) 0)) 0) (module (define L.id.1869 (lambda (x.12550) x.12550)) (let ((y.12551 L.id.1869)) (call y.12551 40))) (module (define L.id1.1870 (lambda (x.12575) x.12575)) (define L.id2.1871 (lambda (x.12576) x.12576)) (let ((y.12577 (if (!= 14 6) L.id1.1870 L.id2.1871))) (call y.12577 40))) (module (define L.*.1873 (lambda (tmp.12601 tmp.12602) (if (!= (if (= (bitwise-and tmp.12602 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12601 7) 0) 14 6) 6) (* tmp.12601 (arithmetic-shift-right tmp.12602 3)) 62) 62))) (define L.+.1872 (lambda (tmp.12603 tmp.12604) (if (!= (if (= (bitwise-and tmp.12604 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12603 7) 0) 14 6) 6) (+ tmp.12603 tmp.12604) 318) 318))) (call L.+.1872 (call L.+.1872 40 48) (call L.*.1873 32 40))) (module (define L.+.1874 (lambda (tmp.12626 tmp.12627) (if (!= (if (= (bitwise-and tmp.12627 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12626 7) 0) 14 6) 6) (+ tmp.12626 tmp.12627) 318) 318))) (if (!= (if (= (call L.+.1874 40 48) 88) 14 6) 6) 32 48)) (module 14) (module 6) (module 22) (module (define L.+.1878 (lambda (tmp.12749 tmp.12750) (if (!= (if (= (bitwise-and tmp.12750 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12749 7) 0) 14 6) 6) (+ tmp.12749 tmp.12750) 318) 318))) (define L.F.1875 (lambda (a.12722 b.12721 c.12720 d.12719 e.12718 f.12717 g.12716) (call L.+.1878 80 (call L.G.1876 a.12722 b.12721 c.12720 d.12719 e.12718 f.12717 g.12716 64)))) (define L.G.1876 (lambda (a.12730 b.12729 c.12728 d.12727 e.12726 f.12725 g.12724 h.12723) (call L.H.1877 a.12730 b.12729 c.12728 d.12727 e.12726 f.12725 g.12724 h.12723 72))) (define L.H.1877 (lambda (a.12739 b.12738 c.12737 d.12736 e.12735 f.12734 g.12733 h.12732 j.12731) (let ((r1.12740 (call L.+.1878 a.12739 b.12738))) (let ((r2.12741 (call L.+.1878 r1.12740 c.12737))) (let ((r3.12742 (call L.+.1878 r2.12741 d.12736))) (let ((r4.12743 (call L.+.1878 r3.12742 e.12735))) (let ((r5.12744 (call L.+.1878 r4.12743 f.12734))) (let ((r6.12745 (call L.+.1878 r5.12744 g.12733))) (let ((r7.12746 (call L.+.1878 r6.12745 h.12732))) (call L.+.1878 r7.12746 j.12731)))))))))) (call L.F.1875 8 16 24 32 40 48 56)) (module (define L.<.1880 (lambda (tmp.12778 tmp.12779) (if (!= (if (= (bitwise-and tmp.12779 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12778 7) 0) 14 6) 6) (if (< tmp.12778 tmp.12779) 14 6) 830) 830))) (define L.swap.1879 (lambda (x.12771 y.12770) (if (!= (call L.<.1880 y.12770 x.12771) 6) x.12771 (call L.swap.1879 y.12770 x.12771)))) (call L.swap.1879 8 16)) (module (define L.*.1883 (lambda (tmp.12797 tmp.12798) (if (!= (if (= (bitwise-and tmp.12798 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12797 7) 0) 14 6) 6) (* tmp.12797 (arithmetic-shift-right tmp.12798 3)) 62) 62))) (define L.-.1882 (lambda (tmp.12801 tmp.12802) (if (!= (if (= (bitwise-and tmp.12802 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12801 7) 0) 14 6) 6) (- tmp.12801 tmp.12802) 574) 574))) (define L.fact_loop.1881 (lambda (n.12796 acc.12795) (if (!= (if (= n.12796 0) 14 6) 6) acc.12795 (call L.fact_loop.1881 (call L.-.1882 n.12796 8) (call L.*.1883 acc.12795 n.12796))))) (call L.fact_loop.1881 40 8)) (module (define L.*.1886 (lambda (tmp.12821 tmp.12822) (if (!= (if (= (bitwise-and tmp.12822 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12821 7) 0) 14 6) 6) (* tmp.12821 (arithmetic-shift-right tmp.12822 3)) 62) 62))) (define L.-.1885 (lambda (tmp.12825 tmp.12826) (if (!= (if (= (bitwise-and tmp.12826 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12825 7) 0) 14 6) 6) (- tmp.12825 tmp.12826) 574) 574))) (define L.fact.1884 (lambda (x.12820) (if (!= (if (= x.12820 0) 14 6) 6) 8 (call L.*.1886 x.12820 (call L.fact.1884 (call L.-.1885 x.12820 8)))))) (call L.fact.1884 40)) (module (define L.+.1888 (lambda (tmp.12851 tmp.12852) (if (!= (if (= (bitwise-and tmp.12852 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12851 7) 0) 14 6) 6) (+ tmp.12851 tmp.12852) 318) 318))) (define L.fib_loop.1887 (lambda (n.12846 acc1.12845 acc2.12844) (if (!= (if (= n.12846 0) 14 6) 6) acc1.12845 (if (!= (if (= n.12846 8) 14 6) 6) acc2.12844 (let ((new-n.12847 (call L.+.1888 n.12846 -8))) (let ((new-acc2.12848 (call L.+.1888 acc1.12845 acc2.12844))) (call L.fib_loop.1887 new-n.12847 acc2.12844 new-acc2.12848))))))) (call L.fib_loop.1887 40 0 8)) (module (define L.+.1890 (lambda (tmp.12879 tmp.12880) (if (!= (if (= (bitwise-and tmp.12880 7) 0) 14 6) 6) (if (!= (if (= (bitwise-and tmp.12879 7) 0) 14 6) 6) (+ tmp.12879 tmp.12880) 318) 318))) (define L.fib_loop.1889 (lambda (n.12874 acc1.12873 acc2.12872) (if (!= (if (= n.12874 0) 14 6) 6) acc1.12873 (if (!= (if (= n.12874 8) 14 6) 6) acc2.12872 (let ((new-n.12875 (call L.+.1890 n.12874 -8))) (let ((new-acc2.12876 (call L.+.1890 acc1.12873 acc2.12872))) (call L.fib_loop.1889 new-n.12875 acc2.12872 new-acc2.12876))))))) (call L.fib_loop.1889 40 0 8))) ((module (define L.id.1891 (lambda (x.12900) x.12900)) (call L.id.1891 40)) (module (define L.+.1893 (lambda (tmp.12928 tmp.12929) (if (let ((tmp.12949 (if (let ((tmp.12950 (bitwise-and tmp.12929 7))) (= tmp.12950 0)) 14 6))) (!= tmp.12949 6)) (if (let ((tmp.12951 (if (let ((tmp.12952 (bitwise-and tmp.12928 7))) (= tmp.12952 0)) 14 6))) (!= tmp.12951 6)) (+ tmp.12928 tmp.12929) 318) 318))) (define L.id.1892 (lambda (x.12924) x.12924)) (let ((y.12925 (call L.id.1892 40))) (call L.+.1893 40 y.12925))) (module (define L.+.1896 (lambda (tmp.12959 tmp.12960) (if (let ((tmp.12980 (if (let ((tmp.12981 (bitwise-and tmp.12960 7))) (= tmp.12981 0)) 14 6))) (!= tmp.12980 6)) (if (let ((tmp.12982 (if (let ((tmp.12983 (bitwise-and tmp.12959 7))) (= tmp.12983 0)) 14 6))) (!= tmp.12982 6)) (+ tmp.12959 tmp.12960) 318) 318))) (define L.odd?.1894 (lambda (x.12953) (if (let ((tmp.12984 (if (= x.12953 0) 14 6))) (!= tmp.12984 6)) 0 (let ((y.12954 (call L.+.1896 x.12953 -8))) (call L.even?.1895 y.12954))))) (define L.even?.1895 (lambda (x.12955) (if (let ((tmp.12985 (if (= x.12955 0) 14 6))) (!= tmp.12985 6)) 8 (let ((y.12956 (call L.+.1896 x.12955 -8))) (call L.odd?.1894 y.12956))))) (call L.even?.1895 40)) (module (define L.zero.1897 (lambda (v0.12989 v1.12988 v2.12987 v3.12986) 0)) 0) (module (define L.id.1898 (lambda (x.13013) x.13013)) (let ((y.13014 L.id.1898)) (call y.13014 40))) (module (define L.id1.1899 (lambda (x.13038) x.13038)) (define L.id2.1900 (lambda (x.13039) x.13039)) (let ((y.13040 (if (!= 14 6) L.id1.1899 L.id2.1900))) (call y.13040 40))) (module (define L.*.1902 (lambda (tmp.13064 tmp.13065) (if (let ((tmp.13087 (if (let ((tmp.13088 (bitwise-and tmp.13065 7))) (= tmp.13088 0)) 14 6))) (!= tmp.13087 6)) (if (let ((tmp.13089 (if (let ((tmp.13090 (bitwise-and tmp.13064 7))) (= tmp.13090 0)) 14 6))) (!= tmp.13089 6)) (let ((tmp.13091 (arithmetic-shift-right tmp.13065 3))) (* tmp.13064 tmp.13091)) 62) 62))) (define L.+.1901 (lambda (tmp.13066 tmp.13067) (if (let ((tmp.13092 (if (let ((tmp.13093 (bitwise-and tmp.13067 7))) (= tmp.13093 0)) 14 6))) (!= tmp.13092 6)) (if (let ((tmp.13094 (if (let ((tmp.13095 (bitwise-and tmp.13066 7))) (= tmp.13095 0)) 14 6))) (!= tmp.13094 6)) (+ tmp.13066 tmp.13067) 318) 318))) (let ((tmp.13096 (call L.+.1901 40 48))) (let ((tmp.13097 (call L.*.1902 32 40))) (call L.+.1901 tmp.13096 tmp.13097)))) (module (define L.+.1903 (lambda (tmp.13100 tmp.13101) (if (let ((tmp.13121 (if (let ((tmp.13122 (bitwise-and tmp.13101 7))) (= tmp.13122 0)) 14 6))) (!= tmp.13121 6)) (if (let ((tmp.13123 (if (let ((tmp.13124 (bitwise-and tmp.13100 7))) (= tmp.13124 0)) 14 6))) (!= tmp.13123 6)) (+ tmp.13100 tmp.13101) 318) 318))) (if (let ((tmp.13125 (if (let ((tmp.13126 (call L.+.1903 40 48))) (= tmp.13126 88)) 14 6))) (!= tmp.13125 6)) 32 48)) (module 14) (module 6) (module 22) (module (define L.+.1907 (lambda (tmp.13229 tmp.13230) (if (let ((tmp.13250 (if (let ((tmp.13251 (bitwise-and tmp.13230 7))) (= tmp.13251 0)) 14 6))) (!= tmp.13250 6)) (if (let ((tmp.13252 (if (let ((tmp.13253 (bitwise-and tmp.13229 7))) (= tmp.13253 0)) 14 6))) (!= tmp.13252 6)) (+ tmp.13229 tmp.13230) 318) 318))) (define L.F.1904 (lambda (a.13202 b.13201 c.13200 d.13199 e.13198 f.13197 g.13196) (let ((tmp.13254 (call L.G.1905 a.13202 b.13201 c.13200 d.13199 e.13198 f.13197 g.13196 64))) (call L.+.1907 80 tmp.13254)))) (define L.G.1905 (lambda (a.13210 b.13209 c.13208 d.13207 e.13206 f.13205 g.13204 h.13203) (call L.H.1906 a.13210 b.13209 c.13208 d.13207 e.13206 f.13205 g.13204 h.13203 72))) (define L.H.1906 (lambda (a.13219 b.13218 c.13217 d.13216 e.13215 f.13214 g.13213 h.13212 j.13211) (let ((r1.13220 (call L.+.1907 a.13219 b.13218))) (let ((r2.13221 (call L.+.1907 r1.13220 c.13217))) (let ((r3.13222 (call L.+.1907 r2.13221 d.13216))) (let ((r4.13223 (call L.+.1907 r3.13222 e.13215))) (let ((r5.13224 (call L.+.1907 r4.13223 f.13214))) (let ((r6.13225 (call L.+.1907 r5.13224 g.13213))) (let ((r7.13226 (call L.+.1907 r6.13225 h.13212))) (call L.+.1907 r7.13226 j.13211)))))))))) (call L.F.1904 8 16 24 32 40 48 56)) (module (define L.<.1909 (lambda (tmp.13263 tmp.13264) (if (let ((tmp.13280 (if (let ((tmp.13281 (bitwise-and tmp.13264 7))) (= tmp.13281 0)) 14 6))) (!= tmp.13280 6)) (if (let ((tmp.13282 (if (let ((tmp.13283 (bitwise-and tmp.13263 7))) (= tmp.13283 0)) 14 6))) (!= tmp.13282 6)) (if (< tmp.13263 tmp.13264) 14 6) 830) 830))) (define L.swap.1908 (lambda (x.13256 y.13255) (if (let ((tmp.13284 (call L.<.1909 y.13255 x.13256))) (!= tmp.13284 6)) x.13256 (call L.swap.1908 y.13255 x.13256)))) (call L.swap.1908 8 16)) (module (define L.*.1912 (lambda (tmp.13287 tmp.13288) (if (let ((tmp.13310 (if (let ((tmp.13311 (bitwise-and tmp.13288 7))) (= tmp.13311 0)) 14 6))) (!= tmp.13310 6)) (if (let ((tmp.13312 (if (let ((tmp.13313 (bitwise-and tmp.13287 7))) (= tmp.13313 0)) 14 6))) (!= tmp.13312 6)) (let ((tmp.13314 (arithmetic-shift-right tmp.13288 3))) (* tmp.13287 tmp.13314)) 62) 62))) (define L.-.1911 (lambda (tmp.13291 tmp.13292) (if (let ((tmp.13315 (if (let ((tmp.13316 (bitwise-and tmp.13292 7))) (= tmp.13316 0)) 14 6))) (!= tmp.13315 6)) (if (let ((tmp.13317 (if (let ((tmp.13318 (bitwise-and tmp.13291 7))) (= tmp.13318 0)) 14 6))) (!= tmp.13317 6)) (- tmp.13291 tmp.13292) 574) 574))) (define L.fact_loop.1910 (lambda (n.13286 acc.13285) (if (let ((tmp.13319 (if (= n.13286 0) 14 6))) (!= tmp.13319 6)) acc.13285 (let ((tmp.13320 (call L.-.1911 n.13286 8))) (let ((tmp.13321 (call L.*.1912 acc.13285 n.13286))) (call L.fact_loop.1910 tmp.13320 tmp.13321)))))) (call L.fact_loop.1910 40 8)) (module (define L.*.1915 (lambda (tmp.13323 tmp.13324) (if (let ((tmp.13346 (if (let ((tmp.13347 (bitwise-and tmp.13324 7))) (= tmp.13347 0)) 14 6))) (!= tmp.13346 6)) (if (let ((tmp.13348 (if (let ((tmp.13349 (bitwise-and tmp.13323 7))) (= tmp.13349 0)) 14 6))) (!= tmp.13348 6)) (let ((tmp.13350 (arithmetic-shift-right tmp.13324 3))) (* tmp.13323 tmp.13350)) 62) 62))) (define L.-.1914 (lambda (tmp.13327 tmp.13328) (if (let ((tmp.13351 (if (let ((tmp.13352 (bitwise-and tmp.13328 7))) (= tmp.13352 0)) 14 6))) (!= tmp.13351 6)) (if (let ((tmp.13353 (if (let ((tmp.13354 (bitwise-and tmp.13327 7))) (= tmp.13354 0)) 14 6))) (!= tmp.13353 6)) (- tmp.13327 tmp.13328) 574) 574))) (define L.fact.1913 (lambda (x.13322) (if (let ((tmp.13355 (if (= x.13322 0) 14 6))) (!= tmp.13355 6)) 8 (let ((tmp.13356 (let ((tmp.13357 (call L.-.1914 x.13322 8))) (call L.fact.1913 tmp.13357)))) (call L.*.1915 x.13322 tmp.13356))))) (call L.fact.1913 40)) (module (define L.+.1917 (lambda (tmp.13365 tmp.13366) (if (let ((tmp.13386 (if (let ((tmp.13387 (bitwise-and tmp.13366 7))) (= tmp.13387 0)) 14 6))) (!= tmp.13386 6)) (if (let ((tmp.13388 (if (let ((tmp.13389 (bitwise-and tmp.13365 7))) (= tmp.13389 0)) 14 6))) (!= tmp.13388 6)) (+ tmp.13365 tmp.13366) 318) 318))) (define L.fib_loop.1916 (lambda (n.13360 acc1.13359 acc2.13358) (if (let ((tmp.13390 (if (= n.13360 0) 14 6))) (!= tmp.13390 6)) acc1.13359 (if (let ((tmp.13391 (if (= n.13360 8) 14 6))) (!= tmp.13391 6)) acc2.13358 (let ((new-n.13361 (call L.+.1917 n.13360 -8))) (let ((new-acc2.13362 (call L.+.1917 acc1.13359 acc2.13358))) (call L.fib_loop.1916 new-n.13361 acc2.13358 new-acc2.13362))))))) (call L.fib_loop.1916 40 0 8)) (module (define L.+.1919 (lambda (tmp.13399 tmp.13400) (if (let ((tmp.13420 (if (let ((tmp.13421 (bitwise-and tmp.13400 7))) (= tmp.13421 0)) 14 6))) (!= tmp.13420 6)) (if (let ((tmp.13422 (if (let ((tmp.13423 (bitwise-and tmp.13399 7))) (= tmp.13423 0)) 14 6))) (!= tmp.13422 6)) (+ tmp.13399 tmp.13400) 318) 318))) (define L.fib_loop.1918 (lambda (n.13394 acc1.13393 acc2.13392) (if (let ((tmp.13424 (if (= n.13394 0) 14 6))) (!= tmp.13424 6)) acc1.13393 (if (let ((tmp.13425 (if (= n.13394 8) 14 6))) (!= tmp.13425 6)) acc2.13392 (let ((new-n.13395 (call L.+.1919 n.13394 -8))) (let ((new-acc2.13396 (call L.+.1919 acc1.13393 acc2.13392))) (call L.fib_loop.1918 new-n.13395 acc2.13392 new-acc2.13396))))))) (call L.fib_loop.1918 40 0 8))) ((module (define L.id.1920 (lambda (x.13426) x.13426)) (call L.id.1920 40)) (module (define L.+.1922 (lambda (tmp.13454 tmp.13455) (if (begin (set! tmp.13475 (if (begin (set! tmp.13476 (bitwise-and tmp.13455 7)) (= tmp.13476 0)) 14 6)) (!= tmp.13475 6)) (if (begin (set! tmp.13477 (if (begin (set! tmp.13478 (bitwise-and tmp.13454 7)) (= tmp.13478 0)) 14 6)) (!= tmp.13477 6)) (+ tmp.13454 tmp.13455) 318) 318))) (define L.id.1921 (lambda (x.13450) x.13450)) (begin (set! y.13451 (call L.id.1921 40)) (call L.+.1922 40 y.13451))) (module (define L.+.1925 (lambda (tmp.13485 tmp.13486) (if (begin (set! tmp.13506 (if (begin (set! tmp.13507 (bitwise-and tmp.13486 7)) (= tmp.13507 0)) 14 6)) (!= tmp.13506 6)) (if (begin (set! tmp.13508 (if (begin (set! tmp.13509 (bitwise-and tmp.13485 7)) (= tmp.13509 0)) 14 6)) (!= tmp.13508 6)) (+ tmp.13485 tmp.13486) 318) 318))) (define L.odd?.1923 (lambda (x.13479) (if (begin (set! tmp.13510 (if (= x.13479 0) 14 6)) (!= tmp.13510 6)) 0 (begin (set! y.13480 (call L.+.1925 x.13479 -8)) (call L.even?.1924 y.13480))))) (define L.even?.1924 (lambda (x.13481) (if (begin (set! tmp.13511 (if (= x.13481 0) 14 6)) (!= tmp.13511 6)) 8 (begin (set! y.13482 (call L.+.1925 x.13481 -8)) (call L.odd?.1923 y.13482))))) (call L.even?.1924 40)) (module (define L.zero.1926 (lambda (v0.13515 v1.13514 v2.13513 v3.13512) 0)) 0) (module (define L.id.1927 (lambda (x.13539) x.13539)) (begin (set! y.13540 L.id.1927) (call y.13540 40))) (module (define L.id1.1928 (lambda (x.13564) x.13564)) (define L.id2.1929 (lambda (x.13565) x.13565)) (begin (set! y.13566 (if (!= 14 6) L.id1.1928 L.id2.1929)) (call y.13566 40))) (module (define L.*.1931 (lambda (tmp.13590 tmp.13591) (if (begin (set! tmp.13613 (if (begin (set! tmp.13614 (bitwise-and tmp.13591 7)) (= tmp.13614 0)) 14 6)) (!= tmp.13613 6)) (if (begin (set! tmp.13615 (if (begin (set! tmp.13616 (bitwise-and tmp.13590 7)) (= tmp.13616 0)) 14 6)) (!= tmp.13615 6)) (begin (set! tmp.13617 (arithmetic-shift-right tmp.13591 3)) (* tmp.13590 tmp.13617)) 62) 62))) (define L.+.1930 (lambda (tmp.13592 tmp.13593) (if (begin (set! tmp.13618 (if (begin (set! tmp.13619 (bitwise-and tmp.13593 7)) (= tmp.13619 0)) 14 6)) (!= tmp.13618 6)) (if (begin (set! tmp.13620 (if (begin (set! tmp.13621 (bitwise-and tmp.13592 7)) (= tmp.13621 0)) 14 6)) (!= tmp.13620 6)) (+ tmp.13592 tmp.13593) 318) 318))) (begin (set! tmp.13622 (call L.+.1930 40 48)) (begin (set! tmp.13623 (call L.*.1931 32 40)) (call L.+.1930 tmp.13622 tmp.13623)))) (module (define L.+.1932 (lambda (tmp.13626 tmp.13627) (if (begin (set! tmp.13647 (if (begin (set! tmp.13648 (bitwise-and tmp.13627 7)) (= tmp.13648 0)) 14 6)) (!= tmp.13647 6)) (if (begin (set! tmp.13649 (if (begin (set! tmp.13650 (bitwise-and tmp.13626 7)) (= tmp.13650 0)) 14 6)) (!= tmp.13649 6)) (+ tmp.13626 tmp.13627) 318) 318))) (if (begin (set! tmp.13651 (if (begin (set! tmp.13652 (call L.+.1932 40 48)) (= tmp.13652 88)) 14 6)) (!= tmp.13651 6)) 32 48)) (module 14) (module 6) (module 22) (module (define L.+.1936 (lambda (tmp.13755 tmp.13756) (if (begin (set! tmp.13776 (if (begin (set! tmp.13777 (bitwise-and tmp.13756 7)) (= tmp.13777 0)) 14 6)) (!= tmp.13776 6)) (if (begin (set! tmp.13778 (if (begin (set! tmp.13779 (bitwise-and tmp.13755 7)) (= tmp.13779 0)) 14 6)) (!= tmp.13778 6)) (+ tmp.13755 tmp.13756) 318) 318))) (define L.F.1933 (lambda (a.13728 b.13727 c.13726 d.13725 e.13724 f.13723 g.13722) (begin (set! tmp.13780 (call L.G.1934 a.13728 b.13727 c.13726 d.13725 e.13724 f.13723 g.13722 64)) (call L.+.1936 80 tmp.13780)))) (define L.G.1934 (lambda (a.13736 b.13735 c.13734 d.13733 e.13732 f.13731 g.13730 h.13729) (call L.H.1935 a.13736 b.13735 c.13734 d.13733 e.13732 f.13731 g.13730 h.13729 72))) (define L.H.1935 (lambda (a.13745 b.13744 c.13743 d.13742 e.13741 f.13740 g.13739 h.13738 j.13737) (begin (set! r1.13746 (call L.+.1936 a.13745 b.13744)) (begin (set! r2.13747 (call L.+.1936 r1.13746 c.13743)) (begin (set! r3.13748 (call L.+.1936 r2.13747 d.13742)) (begin (set! r4.13749 (call L.+.1936 r3.13748 e.13741)) (begin (set! r5.13750 (call L.+.1936 r4.13749 f.13740)) (begin (set! r6.13751 (call L.+.1936 r5.13750 g.13739)) (begin (set! r7.13752 (call L.+.1936 r6.13751 h.13738)) (call L.+.1936 r7.13752 j.13737)))))))))) (call L.F.1933 8 16 24 32 40 48 56)) (module (define L.<.1938 (lambda (tmp.13789 tmp.13790) (if (begin (set! tmp.13806 (if (begin (set! tmp.13807 (bitwise-and tmp.13790 7)) (= tmp.13807 0)) 14 6)) (!= tmp.13806 6)) (if (begin (set! tmp.13808 (if (begin (set! tmp.13809 (bitwise-and tmp.13789 7)) (= tmp.13809 0)) 14 6)) (!= tmp.13808 6)) (if (< tmp.13789 tmp.13790) 14 6) 830) 830))) (define L.swap.1937 (lambda (x.13782 y.13781) (if (begin (set! tmp.13810 (call L.<.1938 y.13781 x.13782)) (!= tmp.13810 6)) x.13782 (call L.swap.1937 y.13781 x.13782)))) (call L.swap.1937 8 16)) (module (define L.*.1941 (lambda (tmp.13813 tmp.13814) (if (begin (set! tmp.13836 (if (begin (set! tmp.13837 (bitwise-and tmp.13814 7)) (= tmp.13837 0)) 14 6)) (!= tmp.13836 6)) (if (begin (set! tmp.13838 (if (begin (set! tmp.13839 (bitwise-and tmp.13813 7)) (= tmp.13839 0)) 14 6)) (!= tmp.13838 6)) (begin (set! tmp.13840 (arithmetic-shift-right tmp.13814 3)) (* tmp.13813 tmp.13840)) 62) 62))) (define L.-.1940 (lambda (tmp.13817 tmp.13818) (if (begin (set! tmp.13841 (if (begin (set! tmp.13842 (bitwise-and tmp.13818 7)) (= tmp.13842 0)) 14 6)) (!= tmp.13841 6)) (if (begin (set! tmp.13843 (if (begin (set! tmp.13844 (bitwise-and tmp.13817 7)) (= tmp.13844 0)) 14 6)) (!= tmp.13843 6)) (- tmp.13817 tmp.13818) 574) 574))) (define L.fact_loop.1939 (lambda (n.13812 acc.13811) (if (begin (set! tmp.13845 (if (= n.13812 0) 14 6)) (!= tmp.13845 6)) acc.13811 (begin (set! tmp.13846 (call L.-.1940 n.13812 8)) (begin (set! tmp.13847 (call L.*.1941 acc.13811 n.13812)) (call L.fact_loop.1939 tmp.13846 tmp.13847)))))) (call L.fact_loop.1939 40 8)) (module (define L.*.1944 (lambda (tmp.13849 tmp.13850) (if (begin (set! tmp.13872 (if (begin (set! tmp.13873 (bitwise-and tmp.13850 7)) (= tmp.13873 0)) 14 6)) (!= tmp.13872 6)) (if (begin (set! tmp.13874 (if (begin (set! tmp.13875 (bitwise-and tmp.13849 7)) (= tmp.13875 0)) 14 6)) (!= tmp.13874 6)) (begin (set! tmp.13876 (arithmetic-shift-right tmp.13850 3)) (* tmp.13849 tmp.13876)) 62) 62))) (define L.-.1943 (lambda (tmp.13853 tmp.13854) (if (begin (set! tmp.13877 (if (begin (set! tmp.13878 (bitwise-and tmp.13854 7)) (= tmp.13878 0)) 14 6)) (!= tmp.13877 6)) (if (begin (set! tmp.13879 (if (begin (set! tmp.13880 (bitwise-and tmp.13853 7)) (= tmp.13880 0)) 14 6)) (!= tmp.13879 6)) (- tmp.13853 tmp.13854) 574) 574))) (define L.fact.1942 (lambda (x.13848) (if (begin (set! tmp.13881 (if (= x.13848 0) 14 6)) (!= tmp.13881 6)) 8 (begin (set! tmp.13882 (begin (set! tmp.13883 (call L.-.1943 x.13848 8)) (call L.fact.1942 tmp.13883))) (call L.*.1944 x.13848 tmp.13882))))) (call L.fact.1942 40)) (module (define L.+.1946 (lambda (tmp.13891 tmp.13892) (if (begin (set! tmp.13912 (if (begin (set! tmp.13913 (bitwise-and tmp.13892 7)) (= tmp.13913 0)) 14 6)) (!= tmp.13912 6)) (if (begin (set! tmp.13914 (if (begin (set! tmp.13915 (bitwise-and tmp.13891 7)) (= tmp.13915 0)) 14 6)) (!= tmp.13914 6)) (+ tmp.13891 tmp.13892) 318) 318))) (define L.fib_loop.1945 (lambda (n.13886 acc1.13885 acc2.13884) (if (begin (set! tmp.13916 (if (= n.13886 0) 14 6)) (!= tmp.13916 6)) acc1.13885 (if (begin (set! tmp.13917 (if (= n.13886 8) 14 6)) (!= tmp.13917 6)) acc2.13884 (begin (set! new-n.13887 (call L.+.1946 n.13886 -8)) (begin (set! new-acc2.13888 (call L.+.1946 acc1.13885 acc2.13884)) (call L.fib_loop.1945 new-n.13887 acc2.13884 new-acc2.13888))))))) (call L.fib_loop.1945 40 0 8)) (module (define L.+.1948 (lambda (tmp.13925 tmp.13926) (if (begin (set! tmp.13946 (if (begin (set! tmp.13947 (bitwise-and tmp.13926 7)) (= tmp.13947 0)) 14 6)) (!= tmp.13946 6)) (if (begin (set! tmp.13948 (if (begin (set! tmp.13949 (bitwise-and tmp.13925 7)) (= tmp.13949 0)) 14 6)) (!= tmp.13948 6)) (+ tmp.13925 tmp.13926) 318) 318))) (define L.fib_loop.1947 (lambda (n.13920 acc1.13919 acc2.13918) (if (begin (set! tmp.13950 (if (= n.13920 0) 14 6)) (!= tmp.13950 6)) acc1.13919 (if (begin (set! tmp.13951 (if (= n.13920 8) 14 6)) (!= tmp.13951 6)) acc2.13918 (begin (set! new-n.13921 (call L.+.1948 n.13920 -8)) (begin (set! new-acc2.13922 (call L.+.1948 acc1.13919 acc2.13918)) (call L.fib_loop.1947 new-n.13921 acc2.13918 new-acc2.13922))))))) (call L.fib_loop.1947 40 0 8))) ((module ((new-frames ())) (define L.id.1949 ((new-frames ())) (begin (set! tmp-ra.13976 r15) (begin (set! x.13952 rdi) (begin (set! rax x.13952) (jump tmp-ra.13976 rbp rax))))) (begin (set! tmp-ra.13977 r15) (begin (set! rdi 40) (set! r15 tmp-ra.13977) (jump L.id.1949 rbp r15 rdi)))) (module ((new-frames (()))) (define L.+.1951 ((new-frames ())) (begin (set! tmp-ra.14007 r15) (begin (set! tmp.13982 rdi) (set! tmp.13983 rsi) (if (begin (set! tmp.14003 (if (begin (set! tmp.14004 (bitwise-and tmp.13983 7)) (= tmp.14004 0)) 14 6)) (!= tmp.14003 6)) (if (begin (set! tmp.14005 (if (begin (set! tmp.14006 (bitwise-and tmp.13982 7)) (= tmp.14006 0)) 14 6)) (!= tmp.14005 6)) (begin (set! rax (+ tmp.13982 tmp.13983)) (jump tmp-ra.14007 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14007 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14007 rbp rax)))))) (define L.id.1950 ((new-frames ())) (begin (set! tmp-ra.14008 r15) (begin (set! x.13978 rdi) (begin (set! rax x.13978) (jump tmp-ra.14008 rbp rax))))) (begin (set! tmp-ra.14009 r15) (begin (set! y.13979 (return-point L.rp.1952 (begin (set! rdi 40) (set! r15 L.rp.1952) (jump L.id.1950 rbp r15 rdi)))) (begin (set! rsi y.13979) (set! rdi 40) (set! r15 tmp-ra.14009) (jump L.+.1951 rbp r15 rdi rsi))))) (module ((new-frames ())) (define L.+.1955 ((new-frames ())) (begin (set! tmp-ra.14043 r15) (begin (set! tmp.14016 rdi) (set! tmp.14017 rsi) (if (begin (set! tmp.14037 (if (begin (set! tmp.14038 (bitwise-and tmp.14017 7)) (= tmp.14038 0)) 14 6)) (!= tmp.14037 6)) (if (begin (set! tmp.14039 (if (begin (set! tmp.14040 (bitwise-and tmp.14016 7)) (= tmp.14040 0)) 14 6)) (!= tmp.14039 6)) (begin (set! rax (+ tmp.14016 tmp.14017)) (jump tmp-ra.14043 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14043 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14043 rbp rax)))))) (define L.odd?.1953 ((new-frames (()))) (begin (set! tmp-ra.14044 r15) (begin (set! x.14010 rdi) (if (begin (set! tmp.14041 (if (= x.14010 0) 14 6)) (!= tmp.14041 6)) (begin (set! rax 0) (jump tmp-ra.14044 rbp rax)) (begin (set! y.14011 (return-point L.rp.1956 (begin (set! rsi -8) (set! rdi x.14010) (set! r15 L.rp.1956) (jump L.+.1955 rbp r15 rdi rsi)))) (begin (set! rdi y.14011) (set! r15 tmp-ra.14044) (jump L.even?.1954 rbp r15 rdi))))))) (define L.even?.1954 ((new-frames (()))) (begin (set! tmp-ra.14045 r15) (begin (set! x.14012 rdi) (if (begin (set! tmp.14042 (if (= x.14012 0) 14 6)) (!= tmp.14042 6)) (begin (set! rax 8) (jump tmp-ra.14045 rbp rax)) (begin (set! y.14013 (return-point L.rp.1957 (begin (set! rsi -8) (set! rdi x.14012) (set! r15 L.rp.1957) (jump L.+.1955 rbp r15 rdi rsi)))) (begin (set! rdi y.14013) (set! r15 tmp-ra.14045) (jump L.odd?.1953 rbp r15 rdi))))))) (begin (set! tmp-ra.14046 r15) (begin (set! rdi 40) (set! r15 tmp-ra.14046) (jump L.even?.1954 rbp r15 rdi)))) (module ((new-frames ())) (define L.zero.1958 ((new-frames ())) (begin (set! tmp-ra.14074 r15) (begin (set! v0.14050 rdi) (set! v1.14049 rsi) (set! v2.14048 rdx) (set! v3.14047 rcx) (begin (set! rax 0) (jump tmp-ra.14074 rbp rax))))) (begin (set! tmp-ra.14075 r15) (begin (set! rax 0) (jump tmp-ra.14075 rbp rax)))) (module ((new-frames ())) (define L.id.1959 ((new-frames ())) (begin (set! tmp-ra.14101 r15) (begin (set! x.14076 rdi) (begin (set! rax x.14076) (jump tmp-ra.14101 rbp rax))))) (begin (set! tmp-ra.14102 r15) (begin (set! y.14077 L.id.1959) (begin (set! rdi 40) (set! r15 tmp-ra.14102) (jump y.14077 rbp r15 rdi))))) (module ((new-frames ())) (define L.id1.1960 ((new-frames ())) (begin (set! tmp-ra.14129 r15) (begin (set! x.14103 rdi) (begin (set! rax x.14103) (jump tmp-ra.14129 rbp rax))))) (define L.id2.1961 ((new-frames ())) (begin (set! tmp-ra.14130 r15) (begin (set! x.14104 rdi) (begin (set! rax x.14104) (jump tmp-ra.14130 rbp rax))))) (begin (set! tmp-ra.14131 r15) (begin (set! y.14105 (if (!= 14 6) L.id1.1960 L.id2.1961)) (begin (set! rdi 40) (set! r15 tmp-ra.14131) (jump y.14105 rbp r15 rdi))))) (module ((new-frames (() ()))) (define L.*.1963 ((new-frames ())) (begin (set! tmp-ra.14166 r15) (begin (set! tmp.14132 rdi) (set! tmp.14133 rsi) (if (begin (set! tmp.14155 (if (begin (set! tmp.14156 (bitwise-and tmp.14133 7)) (= tmp.14156 0)) 14 6)) (!= tmp.14155 6)) (if (begin (set! tmp.14157 (if (begin (set! tmp.14158 (bitwise-and tmp.14132 7)) (= tmp.14158 0)) 14 6)) (!= tmp.14157 6)) (begin (set! tmp.14159 (arithmetic-shift-right tmp.14133 3)) (begin (set! rax (* tmp.14132 tmp.14159)) (jump tmp-ra.14166 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14166 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14166 rbp rax)))))) (define L.+.1962 ((new-frames ())) (begin (set! tmp-ra.14167 r15) (begin (set! tmp.14134 rdi) (set! tmp.14135 rsi) (if (begin (set! tmp.14160 (if (begin (set! tmp.14161 (bitwise-and tmp.14135 7)) (= tmp.14161 0)) 14 6)) (!= tmp.14160 6)) (if (begin (set! tmp.14162 (if (begin (set! tmp.14163 (bitwise-and tmp.14134 7)) (= tmp.14163 0)) 14 6)) (!= tmp.14162 6)) (begin (set! rax (+ tmp.14134 tmp.14135)) (jump tmp-ra.14167 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14167 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14167 rbp rax)))))) (begin (set! tmp-ra.14168 r15) (begin (set! tmp.14164 (return-point L.rp.1964 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.1964) (jump L.+.1962 rbp r15 rdi rsi)))) (begin (set! tmp.14165 (return-point L.rp.1965 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.1965) (jump L.*.1963 rbp r15 rdi rsi)))) (begin (set! rsi tmp.14165) (set! rdi tmp.14164) (set! r15 tmp-ra.14168) (jump L.+.1962 rbp r15 rdi rsi)))))) (module ((new-frames (()))) (define L.+.1966 ((new-frames ())) (begin (set! tmp-ra.14198 r15) (begin (set! tmp.14171 rdi) (set! tmp.14172 rsi) (if (begin (set! tmp.14192 (if (begin (set! tmp.14193 (bitwise-and tmp.14172 7)) (= tmp.14193 0)) 14 6)) (!= tmp.14192 6)) (if (begin (set! tmp.14194 (if (begin (set! tmp.14195 (bitwise-and tmp.14171 7)) (= tmp.14195 0)) 14 6)) (!= tmp.14194 6)) (begin (set! rax (+ tmp.14171 tmp.14172)) (jump tmp-ra.14198 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14198 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14198 rbp rax)))))) (begin (set! tmp-ra.14199 r15) (if (begin (set! tmp.14196 (if (begin (set! tmp.14197 (return-point L.rp.1967 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.1967) (jump L.+.1966 rbp r15 rdi rsi)))) (= tmp.14197 88)) 14 6)) (!= tmp.14196 6)) (begin (set! rax 32) (jump tmp-ra.14199 rbp rax)) (begin (set! rax 48) (jump tmp-ra.14199 rbp rax))))) (module ((new-frames ())) (begin (set! tmp-ra.14223 r15) (begin (set! rax 14) (jump tmp-ra.14223 rbp rax)))) (module ((new-frames ())) (begin (set! tmp-ra.14247 r15) (begin (set! rax 6) (jump tmp-ra.14247 rbp rax)))) (module ((new-frames ())) (begin (set! tmp-ra.14271 r15) (begin (set! rax 22) (jump tmp-ra.14271 rbp rax)))) (module ((new-frames ())) (define L.+.1971 ((new-frames ())) (begin (set! tmp-ra.14331 r15) (begin (set! tmp.14305 rdi) (set! tmp.14306 rsi) (if (begin (set! tmp.14326 (if (begin (set! tmp.14327 (bitwise-and tmp.14306 7)) (= tmp.14327 0)) 14 6)) (!= tmp.14326 6)) (if (begin (set! tmp.14328 (if (begin (set! tmp.14329 (bitwise-and tmp.14305 7)) (= tmp.14329 0)) 14 6)) (!= tmp.14328 6)) (begin (set! rax (+ tmp.14305 tmp.14306)) (jump tmp-ra.14331 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14331 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14331 rbp rax)))))) (define L.F.1968 ((new-frames ((nfv.14333 nfv.14334)))) (begin (set! tmp-ra.14332 r15) (begin (set! a.14278 rdi) (set! b.14277 rsi) (set! c.14276 rdx) (set! d.14275 rcx) (set! e.14274 r8) (set! f.14273 r9) (set! g.14272 fv0) (begin (set! tmp.14330 (return-point L.rp.1972 (begin (set! nfv.14334 64) (set! nfv.14333 g.14272) (set! r9 f.14273) (set! r8 e.14274) (set! rcx d.14275) (set! rdx c.14276) (set! rsi b.14277) (set! rdi a.14278) (set! r15 L.rp.1972) (jump L.G.1969 rbp r15 rdi rsi rdx rcx r8 r9 nfv.14333 nfv.14334)))) (begin (set! rsi tmp.14330) (set! rdi 80) (set! r15 tmp-ra.14332) (jump L.+.1971 rbp r15 rdi rsi)))))) (define L.G.1969 ((new-frames ())) (begin (set! tmp-ra.14335 r15) (begin (set! a.14286 rdi) (set! b.14285 rsi) (set! c.14284 rdx) (set! d.14283 rcx) (set! e.14282 r8) (set! f.14281 r9) (set! g.14280 fv0) (set! h.14279 fv1) (begin (set! fv2 72) (set! fv1 h.14279) (set! fv0 g.14280) (set! r9 f.14281) (set! r8 e.14282) (set! rcx d.14283) (set! rdx c.14284) (set! rsi b.14285) (set! rdi a.14286) (set! r15 tmp-ra.14335) (jump L.H.1970 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))))) (define L.H.1970 ((new-frames (() () () () () () ()))) (begin (set! tmp-ra.14336 r15) (begin (set! a.14295 rdi) (set! b.14294 rsi) (set! c.14293 rdx) (set! d.14292 rcx) (set! e.14291 r8) (set! f.14290 r9) (set! g.14289 fv0) (set! h.14288 fv1) (set! j.14287 fv2) (begin (set! r1.14296 (return-point L.rp.1973 (begin (set! rsi b.14294) (set! rdi a.14295) (set! r15 L.rp.1973) (jump L.+.1971 rbp r15 rdi rsi)))) (begin (set! r2.14297 (return-point L.rp.1974 (begin (set! rsi c.14293) (set! rdi r1.14296) (set! r15 L.rp.1974) (jump L.+.1971 rbp r15 rdi rsi)))) (begin (set! r3.14298 (return-point L.rp.1975 (begin (set! rsi d.14292) (set! rdi r2.14297) (set! r15 L.rp.1975) (jump L.+.1971 rbp r15 rdi rsi)))) (begin (set! r4.14299 (return-point L.rp.1976 (begin (set! rsi e.14291) (set! rdi r3.14298) (set! r15 L.rp.1976) (jump L.+.1971 rbp r15 rdi rsi)))) (begin (set! r5.14300 (return-point L.rp.1977 (begin (set! rsi f.14290) (set! rdi r4.14299) (set! r15 L.rp.1977) (jump L.+.1971 rbp r15 rdi rsi)))) (begin (set! r6.14301 (return-point L.rp.1978 (begin (set! rsi g.14289) (set! rdi r5.14300) (set! r15 L.rp.1978) (jump L.+.1971 rbp r15 rdi rsi)))) (begin (set! r7.14302 (return-point L.rp.1979 (begin (set! rsi h.14288) (set! rdi r6.14301) (set! r15 L.rp.1979) (jump L.+.1971 rbp r15 rdi rsi)))) (begin (set! rsi j.14287) (set! rdi r7.14302) (set! r15 tmp-ra.14336) (jump L.+.1971 rbp r15 rdi rsi)))))))))))) (begin (set! tmp-ra.14337 r15) (begin (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.14337) (jump L.F.1968 rbp r15 rdi rsi rdx rcx r8 r9 fv0)))) (module ((new-frames ())) (define L.<.1981 ((new-frames ())) (begin (set! tmp-ra.14368 r15) (begin (set! tmp.14346 rdi) (set! tmp.14347 rsi) (if (begin (set! tmp.14363 (if (begin (set! tmp.14364 (bitwise-and tmp.14347 7)) (= tmp.14364 0)) 14 6)) (!= tmp.14363 6)) (if (begin (set! tmp.14365 (if (begin (set! tmp.14366 (bitwise-and tmp.14346 7)) (= tmp.14366 0)) 14 6)) (!= tmp.14365 6)) (if (< tmp.14346 tmp.14347) (begin (set! rax 14) (jump tmp-ra.14368 rbp rax)) (begin (set! rax 6) (jump tmp-ra.14368 rbp rax))) (begin (set! rax 830) (jump tmp-ra.14368 rbp rax))) (begin (set! rax 830) (jump tmp-ra.14368 rbp rax)))))) (define L.swap.1980 ((new-frames (()))) (begin (set! tmp-ra.14369 r15) (begin (set! x.14339 rdi) (set! y.14338 rsi) (if (begin (set! tmp.14367 (return-point L.rp.1982 (begin (set! rsi x.14339) (set! rdi y.14338) (set! r15 L.rp.1982) (jump L.<.1981 rbp r15 rdi rsi)))) (!= tmp.14367 6)) (begin (set! rax x.14339) (jump tmp-ra.14369 rbp rax)) (begin (set! rsi x.14339) (set! rdi y.14338) (set! r15 tmp-ra.14369) (jump L.swap.1980 rbp r15 rdi rsi)))))) (begin (set! tmp-ra.14370 r15) (begin (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.14370) (jump L.swap.1980 rbp r15 rdi rsi)))) (module ((new-frames ())) (define L.*.1985 ((new-frames ())) (begin (set! tmp-ra.14408 r15) (begin (set! tmp.14373 rdi) (set! tmp.14374 rsi) (if (begin (set! tmp.14396 (if (begin (set! tmp.14397 (bitwise-and tmp.14374 7)) (= tmp.14397 0)) 14 6)) (!= tmp.14396 6)) (if (begin (set! tmp.14398 (if (begin (set! tmp.14399 (bitwise-and tmp.14373 7)) (= tmp.14399 0)) 14 6)) (!= tmp.14398 6)) (begin (set! tmp.14400 (arithmetic-shift-right tmp.14374 3)) (begin (set! rax (* tmp.14373 tmp.14400)) (jump tmp-ra.14408 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14408 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14408 rbp rax)))))) (define L.-.1984 ((new-frames ())) (begin (set! tmp-ra.14409 r15) (begin (set! tmp.14377 rdi) (set! tmp.14378 rsi) (if (begin (set! tmp.14401 (if (begin (set! tmp.14402 (bitwise-and tmp.14378 7)) (= tmp.14402 0)) 14 6)) (!= tmp.14401 6)) (if (begin (set! tmp.14403 (if (begin (set! tmp.14404 (bitwise-and tmp.14377 7)) (= tmp.14404 0)) 14 6)) (!= tmp.14403 6)) (begin (set! rax (- tmp.14377 tmp.14378)) (jump tmp-ra.14409 rbp rax)) (begin (set! rax 574) (jump tmp-ra.14409 rbp rax))) (begin (set! rax 574) (jump tmp-ra.14409 rbp rax)))))) (define L.fact_loop.1983 ((new-frames (() ()))) (begin (set! tmp-ra.14410 r15) (begin (set! n.14372 rdi) (set! acc.14371 rsi) (if (begin (set! tmp.14405 (if (= n.14372 0) 14 6)) (!= tmp.14405 6)) (begin (set! rax acc.14371) (jump tmp-ra.14410 rbp rax)) (begin (set! tmp.14406 (return-point L.rp.1986 (begin (set! rsi 8) (set! rdi n.14372) (set! r15 L.rp.1986) (jump L.-.1984 rbp r15 rdi rsi)))) (begin (set! tmp.14407 (return-point L.rp.1987 (begin (set! rsi n.14372) (set! rdi acc.14371) (set! r15 L.rp.1987) (jump L.*.1985 rbp r15 rdi rsi)))) (begin (set! rsi tmp.14407) (set! rdi tmp.14406) (set! r15 tmp-ra.14410) (jump L.fact_loop.1983 rbp r15 rdi rsi)))))))) (begin (set! tmp-ra.14411 r15) (begin (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.14411) (jump L.fact_loop.1983 rbp r15 rdi rsi)))) (module ((new-frames ())) (define L.*.1990 ((new-frames ())) (begin (set! tmp-ra.14448 r15) (begin (set! tmp.14413 rdi) (set! tmp.14414 rsi) (if (begin (set! tmp.14436 (if (begin (set! tmp.14437 (bitwise-and tmp.14414 7)) (= tmp.14437 0)) 14 6)) (!= tmp.14436 6)) (if (begin (set! tmp.14438 (if (begin (set! tmp.14439 (bitwise-and tmp.14413 7)) (= tmp.14439 0)) 14 6)) (!= tmp.14438 6)) (begin (set! tmp.14440 (arithmetic-shift-right tmp.14414 3)) (begin (set! rax (* tmp.14413 tmp.14440)) (jump tmp-ra.14448 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14448 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14448 rbp rax)))))) (define L.-.1989 ((new-frames ())) (begin (set! tmp-ra.14449 r15) (begin (set! tmp.14417 rdi) (set! tmp.14418 rsi) (if (begin (set! tmp.14441 (if (begin (set! tmp.14442 (bitwise-and tmp.14418 7)) (= tmp.14442 0)) 14 6)) (!= tmp.14441 6)) (if (begin (set! tmp.14443 (if (begin (set! tmp.14444 (bitwise-and tmp.14417 7)) (= tmp.14444 0)) 14 6)) (!= tmp.14443 6)) (begin (set! rax (- tmp.14417 tmp.14418)) (jump tmp-ra.14449 rbp rax)) (begin (set! rax 574) (jump tmp-ra.14449 rbp rax))) (begin (set! rax 574) (jump tmp-ra.14449 rbp rax)))))) (define L.fact.1988 ((new-frames (() ()))) (begin (set! tmp-ra.14450 r15) (begin (set! x.14412 rdi) (if (begin (set! tmp.14445 (if (= x.14412 0) 14 6)) (!= tmp.14445 6)) (begin (set! rax 8) (jump tmp-ra.14450 rbp rax)) (begin (set! tmp.14446 (begin (set! tmp.14447 (return-point L.rp.1991 (begin (set! rsi 8) (set! rdi x.14412) (set! r15 L.rp.1991) (jump L.-.1989 rbp r15 rdi rsi)))) (return-point L.rp.1992 (begin (set! rdi tmp.14447) (set! r15 L.rp.1992) (jump L.fact.1988 rbp r15 rdi))))) (begin (set! rsi tmp.14446) (set! rdi x.14412) (set! r15 tmp-ra.14450) (jump L.*.1990 rbp r15 rdi rsi))))))) (begin (set! tmp-ra.14451 r15) (begin (set! rdi 40) (set! r15 tmp-ra.14451) (jump L.fact.1988 rbp r15 rdi)))) (module ((new-frames ())) (define L.+.1994 ((new-frames ())) (begin (set! tmp-ra.14486 r15) (begin (set! tmp.14459 rdi) (set! tmp.14460 rsi) (if (begin (set! tmp.14480 (if (begin (set! tmp.14481 (bitwise-and tmp.14460 7)) (= tmp.14481 0)) 14 6)) (!= tmp.14480 6)) (if (begin (set! tmp.14482 (if (begin (set! tmp.14483 (bitwise-and tmp.14459 7)) (= tmp.14483 0)) 14 6)) (!= tmp.14482 6)) (begin (set! rax (+ tmp.14459 tmp.14460)) (jump tmp-ra.14486 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14486 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14486 rbp rax)))))) (define L.fib_loop.1993 ((new-frames (() ()))) (begin (set! tmp-ra.14487 r15) (begin (set! n.14454 rdi) (set! acc1.14453 rsi) (set! acc2.14452 rdx) (if (begin (set! tmp.14484 (if (= n.14454 0) 14 6)) (!= tmp.14484 6)) (begin (set! rax acc1.14453) (jump tmp-ra.14487 rbp rax)) (if (begin (set! tmp.14485 (if (= n.14454 8) 14 6)) (!= tmp.14485 6)) (begin (set! rax acc2.14452) (jump tmp-ra.14487 rbp rax)) (begin (set! new-n.14455 (return-point L.rp.1995 (begin (set! rsi -8) (set! rdi n.14454) (set! r15 L.rp.1995) (jump L.+.1994 rbp r15 rdi rsi)))) (begin (set! new-acc2.14456 (return-point L.rp.1996 (begin (set! rsi acc2.14452) (set! rdi acc1.14453) (set! r15 L.rp.1996) (jump L.+.1994 rbp r15 rdi rsi)))) (begin (set! rdx new-acc2.14456) (set! rsi acc2.14452) (set! rdi new-n.14455) (set! r15 tmp-ra.14487) (jump L.fib_loop.1993 rbp r15 rdi rsi rdx))))))))) (begin (set! tmp-ra.14488 r15) (begin (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.14488) (jump L.fib_loop.1993 rbp r15 rdi rsi rdx)))) (module ((new-frames ())) (define L.+.1998 ((new-frames ())) (begin (set! tmp-ra.14523 r15) (begin (set! tmp.14496 rdi) (set! tmp.14497 rsi) (if (begin (set! tmp.14517 (if (begin (set! tmp.14518 (bitwise-and tmp.14497 7)) (= tmp.14518 0)) 14 6)) (!= tmp.14517 6)) (if (begin (set! tmp.14519 (if (begin (set! tmp.14520 (bitwise-and tmp.14496 7)) (= tmp.14520 0)) 14 6)) (!= tmp.14519 6)) (begin (set! rax (+ tmp.14496 tmp.14497)) (jump tmp-ra.14523 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14523 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14523 rbp rax)))))) (define L.fib_loop.1997 ((new-frames (() ()))) (begin (set! tmp-ra.14524 r15) (begin (set! n.14491 rdi) (set! acc1.14490 rsi) (set! acc2.14489 rdx) (if (begin (set! tmp.14521 (if (= n.14491 0) 14 6)) (!= tmp.14521 6)) (begin (set! rax acc1.14490) (jump tmp-ra.14524 rbp rax)) (if (begin (set! tmp.14522 (if (= n.14491 8) 14 6)) (!= tmp.14522 6)) (begin (set! rax acc2.14489) (jump tmp-ra.14524 rbp rax)) (begin (set! new-n.14492 (return-point L.rp.1999 (begin (set! rsi -8) (set! rdi n.14491) (set! r15 L.rp.1999) (jump L.+.1998 rbp r15 rdi rsi)))) (begin (set! new-acc2.14493 (return-point L.rp.2000 (begin (set! rsi acc2.14489) (set! rdi acc1.14490) (set! r15 L.rp.2000) (jump L.+.1998 rbp r15 rdi rsi)))) (begin (set! rdx new-acc2.14493) (set! rsi acc2.14489) (set! rdi new-n.14492) (set! r15 tmp-ra.14524) (jump L.fib_loop.1997 rbp r15 rdi rsi rdx))))))))) (begin (set! tmp-ra.14525 r15) (begin (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.14525) (jump L.fib_loop.1997 rbp r15 rdi rsi rdx))))) ((module ((new-frames ())) (define L.id.2001 ((new-frames ())) (begin (set! tmp-ra.14550 r15) (begin (set! x.14526 rdi) (begin (set! rax x.14526) (jump tmp-ra.14550 rbp rax))))) (begin (set! tmp-ra.14551 r15) (begin (set! rdi 40) (set! r15 tmp-ra.14551) (jump L.id.2001 rbp r15 rdi)))) (module ((new-frames (()))) (define L.+.2003 ((new-frames ())) (begin (set! tmp-ra.14581 r15) (begin (set! tmp.14556 rdi) (set! tmp.14557 rsi) (if (begin (if (begin (set! tmp.14578 (bitwise-and tmp.14557 7)) (= tmp.14578 0)) (set! tmp.14577 14) (set! tmp.14577 6)) (!= tmp.14577 6)) (if (begin (if (begin (set! tmp.14580 (bitwise-and tmp.14556 7)) (= tmp.14580 0)) (set! tmp.14579 14) (set! tmp.14579 6)) (!= tmp.14579 6)) (begin (set! rax (+ tmp.14556 tmp.14557)) (jump tmp-ra.14581 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14581 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14581 rbp rax)))))) (define L.id.2002 ((new-frames ())) (begin (set! tmp-ra.14582 r15) (begin (set! x.14552 rdi) (begin (set! rax x.14552) (jump tmp-ra.14582 rbp rax))))) (begin (set! tmp-ra.14583 r15) (begin (begin (return-point L.rp.2004 (begin (set! rdi 40) (set! r15 L.rp.2004) (jump L.id.2002 rbp r15 rdi))) (set! y.14553 rax)) (begin (set! rsi y.14553) (set! rdi 40) (set! r15 tmp-ra.14583) (jump L.+.2003 rbp r15 rdi rsi))))) (module ((new-frames ())) (define L.+.2007 ((new-frames ())) (begin (set! tmp-ra.14617 r15) (begin (set! tmp.14590 rdi) (set! tmp.14591 rsi) (if (begin (if (begin (set! tmp.14612 (bitwise-and tmp.14591 7)) (= tmp.14612 0)) (set! tmp.14611 14) (set! tmp.14611 6)) (!= tmp.14611 6)) (if (begin (if (begin (set! tmp.14614 (bitwise-and tmp.14590 7)) (= tmp.14614 0)) (set! tmp.14613 14) (set! tmp.14613 6)) (!= tmp.14613 6)) (begin (set! rax (+ tmp.14590 tmp.14591)) (jump tmp-ra.14617 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14617 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14617 rbp rax)))))) (define L.odd?.2005 ((new-frames (()))) (begin (set! tmp-ra.14618 r15) (begin (set! x.14584 rdi) (if (begin (if (= x.14584 0) (set! tmp.14615 14) (set! tmp.14615 6)) (!= tmp.14615 6)) (begin (set! rax 0) (jump tmp-ra.14618 rbp rax)) (begin (begin (return-point L.rp.2008 (begin (set! rsi -8) (set! rdi x.14584) (set! r15 L.rp.2008) (jump L.+.2007 rbp r15 rdi rsi))) (set! y.14585 rax)) (begin (set! rdi y.14585) (set! r15 tmp-ra.14618) (jump L.even?.2006 rbp r15 rdi))))))) (define L.even?.2006 ((new-frames (()))) (begin (set! tmp-ra.14619 r15) (begin (set! x.14586 rdi) (if (begin (if (= x.14586 0) (set! tmp.14616 14) (set! tmp.14616 6)) (!= tmp.14616 6)) (begin (set! rax 8) (jump tmp-ra.14619 rbp rax)) (begin (begin (return-point L.rp.2009 (begin (set! rsi -8) (set! rdi x.14586) (set! r15 L.rp.2009) (jump L.+.2007 rbp r15 rdi rsi))) (set! y.14587 rax)) (begin (set! rdi y.14587) (set! r15 tmp-ra.14619) (jump L.odd?.2005 rbp r15 rdi))))))) (begin (set! tmp-ra.14620 r15) (begin (set! rdi 40) (set! r15 tmp-ra.14620) (jump L.even?.2006 rbp r15 rdi)))) (module ((new-frames ())) (define L.zero.2010 ((new-frames ())) (begin (set! tmp-ra.14648 r15) (begin (set! v0.14624 rdi) (set! v1.14623 rsi) (set! v2.14622 rdx) (set! v3.14621 rcx) (begin (set! rax 0) (jump tmp-ra.14648 rbp rax))))) (begin (set! tmp-ra.14649 r15) (begin (set! rax 0) (jump tmp-ra.14649 rbp rax)))) (module ((new-frames ())) (define L.id.2011 ((new-frames ())) (begin (set! tmp-ra.14675 r15) (begin (set! x.14650 rdi) (begin (set! rax x.14650) (jump tmp-ra.14675 rbp rax))))) (begin (set! tmp-ra.14676 r15) (begin (set! y.14651 L.id.2011) (begin (set! rdi 40) (set! r15 tmp-ra.14676) (jump y.14651 rbp r15 rdi))))) (module ((new-frames ())) (define L.id1.2012 ((new-frames ())) (begin (set! tmp-ra.14703 r15) (begin (set! x.14677 rdi) (begin (set! rax x.14677) (jump tmp-ra.14703 rbp rax))))) (define L.id2.2013 ((new-frames ())) (begin (set! tmp-ra.14704 r15) (begin (set! x.14678 rdi) (begin (set! rax x.14678) (jump tmp-ra.14704 rbp rax))))) (begin (set! tmp-ra.14705 r15) (begin (if (!= 14 6) (set! y.14679 L.id1.2012) (set! y.14679 L.id2.2013)) (begin (set! rdi 40) (set! r15 tmp-ra.14705) (jump y.14679 rbp r15 rdi))))) (module ((new-frames (() ()))) (define L.*.2015 ((new-frames ())) (begin (set! tmp-ra.14740 r15) (begin (set! tmp.14706 rdi) (set! tmp.14707 rsi) (if (begin (if (begin (set! tmp.14730 (bitwise-and tmp.14707 7)) (= tmp.14730 0)) (set! tmp.14729 14) (set! tmp.14729 6)) (!= tmp.14729 6)) (if (begin (if (begin (set! tmp.14732 (bitwise-and tmp.14706 7)) (= tmp.14732 0)) (set! tmp.14731 14) (set! tmp.14731 6)) (!= tmp.14731 6)) (begin (set! tmp.14733 (arithmetic-shift-right tmp.14707 3)) (begin (set! rax (* tmp.14706 tmp.14733)) (jump tmp-ra.14740 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14740 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14740 rbp rax)))))) (define L.+.2014 ((new-frames ())) (begin (set! tmp-ra.14741 r15) (begin (set! tmp.14708 rdi) (set! tmp.14709 rsi) (if (begin (if (begin (set! tmp.14735 (bitwise-and tmp.14709 7)) (= tmp.14735 0)) (set! tmp.14734 14) (set! tmp.14734 6)) (!= tmp.14734 6)) (if (begin (if (begin (set! tmp.14737 (bitwise-and tmp.14708 7)) (= tmp.14737 0)) (set! tmp.14736 14) (set! tmp.14736 6)) (!= tmp.14736 6)) (begin (set! rax (+ tmp.14708 tmp.14709)) (jump tmp-ra.14741 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14741 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14741 rbp rax)))))) (begin (set! tmp-ra.14742 r15) (begin (begin (return-point L.rp.2016 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2016) (jump L.+.2014 rbp r15 rdi rsi))) (set! tmp.14738 rax)) (begin (begin (return-point L.rp.2017 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2017) (jump L.*.2015 rbp r15 rdi rsi))) (set! tmp.14739 rax)) (begin (set! rsi tmp.14739) (set! rdi tmp.14738) (set! r15 tmp-ra.14742) (jump L.+.2014 rbp r15 rdi rsi)))))) (module ((new-frames (()))) (define L.+.2018 ((new-frames ())) (begin (set! tmp-ra.14772 r15) (begin (set! tmp.14745 rdi) (set! tmp.14746 rsi) (if (begin (if (begin (set! tmp.14767 (bitwise-and tmp.14746 7)) (= tmp.14767 0)) (set! tmp.14766 14) (set! tmp.14766 6)) (!= tmp.14766 6)) (if (begin (if (begin (set! tmp.14769 (bitwise-and tmp.14745 7)) (= tmp.14769 0)) (set! tmp.14768 14) (set! tmp.14768 6)) (!= tmp.14768 6)) (begin (set! rax (+ tmp.14745 tmp.14746)) (jump tmp-ra.14772 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14772 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14772 rbp rax)))))) (begin (set! tmp-ra.14773 r15) (if (begin (if (begin (begin (return-point L.rp.2019 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2019) (jump L.+.2018 rbp r15 rdi rsi))) (set! tmp.14771 rax)) (= tmp.14771 88)) (set! tmp.14770 14) (set! tmp.14770 6)) (!= tmp.14770 6)) (begin (set! rax 32) (jump tmp-ra.14773 rbp rax)) (begin (set! rax 48) (jump tmp-ra.14773 rbp rax))))) (module ((new-frames ())) (begin (set! tmp-ra.14797 r15) (begin (set! rax 14) (jump tmp-ra.14797 rbp rax)))) (module ((new-frames ())) (begin (set! tmp-ra.14821 r15) (begin (set! rax 6) (jump tmp-ra.14821 rbp rax)))) (module ((new-frames ())) (begin (set! tmp-ra.14845 r15) (begin (set! rax 22) (jump tmp-ra.14845 rbp rax)))) (module ((new-frames ())) (define L.+.2023 ((new-frames ())) (begin (set! tmp-ra.14905 r15) (begin (set! tmp.14879 rdi) (set! tmp.14880 rsi) (if (begin (if (begin (set! tmp.14901 (bitwise-and tmp.14880 7)) (= tmp.14901 0)) (set! tmp.14900 14) (set! tmp.14900 6)) (!= tmp.14900 6)) (if (begin (if (begin (set! tmp.14903 (bitwise-and tmp.14879 7)) (= tmp.14903 0)) (set! tmp.14902 14) (set! tmp.14902 6)) (!= tmp.14902 6)) (begin (set! rax (+ tmp.14879 tmp.14880)) (jump tmp-ra.14905 rbp rax)) (begin (set! rax 318) (jump tmp-ra.14905 rbp rax))) (begin (set! rax 318) (jump tmp-ra.14905 rbp rax)))))) (define L.F.2020 ((new-frames ((nfv.14907 nfv.14908)))) (begin (set! tmp-ra.14906 r15) (begin (set! a.14852 rdi) (set! b.14851 rsi) (set! c.14850 rdx) (set! d.14849 rcx) (set! e.14848 r8) (set! f.14847 r9) (set! g.14846 fv0) (begin (begin (return-point L.rp.2024 (begin (set! nfv.14908 64) (set! nfv.14907 g.14846) (set! r9 f.14847) (set! r8 e.14848) (set! rcx d.14849) (set! rdx c.14850) (set! rsi b.14851) (set! rdi a.14852) (set! r15 L.rp.2024) (jump L.G.2021 rbp r15 rdi rsi rdx rcx r8 r9 nfv.14907 nfv.14908))) (set! tmp.14904 rax)) (begin (set! rsi tmp.14904) (set! rdi 80) (set! r15 tmp-ra.14906) (jump L.+.2023 rbp r15 rdi rsi)))))) (define L.G.2021 ((new-frames ())) (begin (set! tmp-ra.14909 r15) (begin (set! a.14860 rdi) (set! b.14859 rsi) (set! c.14858 rdx) (set! d.14857 rcx) (set! e.14856 r8) (set! f.14855 r9) (set! g.14854 fv0) (set! h.14853 fv1) (begin (set! fv2 72) (set! fv1 h.14853) (set! fv0 g.14854) (set! r9 f.14855) (set! r8 e.14856) (set! rcx d.14857) (set! rdx c.14858) (set! rsi b.14859) (set! rdi a.14860) (set! r15 tmp-ra.14909) (jump L.H.2022 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))))) (define L.H.2022 ((new-frames (() () () () () () ()))) (begin (set! tmp-ra.14910 r15) (begin (set! a.14869 rdi) (set! b.14868 rsi) (set! c.14867 rdx) (set! d.14866 rcx) (set! e.14865 r8) (set! f.14864 r9) (set! g.14863 fv0) (set! h.14862 fv1) (set! j.14861 fv2) (begin (begin (return-point L.rp.2025 (begin (set! rsi b.14868) (set! rdi a.14869) (set! r15 L.rp.2025) (jump L.+.2023 rbp r15 rdi rsi))) (set! r1.14870 rax)) (begin (begin (return-point L.rp.2026 (begin (set! rsi c.14867) (set! rdi r1.14870) (set! r15 L.rp.2026) (jump L.+.2023 rbp r15 rdi rsi))) (set! r2.14871 rax)) (begin (begin (return-point L.rp.2027 (begin (set! rsi d.14866) (set! rdi r2.14871) (set! r15 L.rp.2027) (jump L.+.2023 rbp r15 rdi rsi))) (set! r3.14872 rax)) (begin (begin (return-point L.rp.2028 (begin (set! rsi e.14865) (set! rdi r3.14872) (set! r15 L.rp.2028) (jump L.+.2023 rbp r15 rdi rsi))) (set! r4.14873 rax)) (begin (begin (return-point L.rp.2029 (begin (set! rsi f.14864) (set! rdi r4.14873) (set! r15 L.rp.2029) (jump L.+.2023 rbp r15 rdi rsi))) (set! r5.14874 rax)) (begin (begin (return-point L.rp.2030 (begin (set! rsi g.14863) (set! rdi r5.14874) (set! r15 L.rp.2030) (jump L.+.2023 rbp r15 rdi rsi))) (set! r6.14875 rax)) (begin (begin (return-point L.rp.2031 (begin (set! rsi h.14862) (set! rdi r6.14875) (set! r15 L.rp.2031) (jump L.+.2023 rbp r15 rdi rsi))) (set! r7.14876 rax)) (begin (set! rsi j.14861) (set! rdi r7.14876) (set! r15 tmp-ra.14910) (jump L.+.2023 rbp r15 rdi rsi)))))))))))) (begin (set! tmp-ra.14911 r15) (begin (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.14911) (jump L.F.2020 rbp r15 rdi rsi rdx rcx r8 r9 fv0)))) (module ((new-frames ())) (define L.<.2033 ((new-frames ())) (begin (set! tmp-ra.14942 r15) (begin (set! tmp.14920 rdi) (set! tmp.14921 rsi) (if (begin (if (begin (set! tmp.14938 (bitwise-and tmp.14921 7)) (= tmp.14938 0)) (set! tmp.14937 14) (set! tmp.14937 6)) (!= tmp.14937 6)) (if (begin (if (begin (set! tmp.14940 (bitwise-and tmp.14920 7)) (= tmp.14940 0)) (set! tmp.14939 14) (set! tmp.14939 6)) (!= tmp.14939 6)) (if (< tmp.14920 tmp.14921) (begin (set! rax 14) (jump tmp-ra.14942 rbp rax)) (begin (set! rax 6) (jump tmp-ra.14942 rbp rax))) (begin (set! rax 830) (jump tmp-ra.14942 rbp rax))) (begin (set! rax 830) (jump tmp-ra.14942 rbp rax)))))) (define L.swap.2032 ((new-frames (()))) (begin (set! tmp-ra.14943 r15) (begin (set! x.14913 rdi) (set! y.14912 rsi) (if (begin (begin (return-point L.rp.2034 (begin (set! rsi x.14913) (set! rdi y.14912) (set! r15 L.rp.2034) (jump L.<.2033 rbp r15 rdi rsi))) (set! tmp.14941 rax)) (!= tmp.14941 6)) (begin (set! rax x.14913) (jump tmp-ra.14943 rbp rax)) (begin (set! rsi x.14913) (set! rdi y.14912) (set! r15 tmp-ra.14943) (jump L.swap.2032 rbp r15 rdi rsi)))))) (begin (set! tmp-ra.14944 r15) (begin (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.14944) (jump L.swap.2032 rbp r15 rdi rsi)))) (module ((new-frames ())) (define L.*.2037 ((new-frames ())) (begin (set! tmp-ra.14982 r15) (begin (set! tmp.14947 rdi) (set! tmp.14948 rsi) (if (begin (if (begin (set! tmp.14971 (bitwise-and tmp.14948 7)) (= tmp.14971 0)) (set! tmp.14970 14) (set! tmp.14970 6)) (!= tmp.14970 6)) (if (begin (if (begin (set! tmp.14973 (bitwise-and tmp.14947 7)) (= tmp.14973 0)) (set! tmp.14972 14) (set! tmp.14972 6)) (!= tmp.14972 6)) (begin (set! tmp.14974 (arithmetic-shift-right tmp.14948 3)) (begin (set! rax (* tmp.14947 tmp.14974)) (jump tmp-ra.14982 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14982 rbp rax))) (begin (set! rax 62) (jump tmp-ra.14982 rbp rax)))))) (define L.-.2036 ((new-frames ())) (begin (set! tmp-ra.14983 r15) (begin (set! tmp.14951 rdi) (set! tmp.14952 rsi) (if (begin (if (begin (set! tmp.14976 (bitwise-and tmp.14952 7)) (= tmp.14976 0)) (set! tmp.14975 14) (set! tmp.14975 6)) (!= tmp.14975 6)) (if (begin (if (begin (set! tmp.14978 (bitwise-and tmp.14951 7)) (= tmp.14978 0)) (set! tmp.14977 14) (set! tmp.14977 6)) (!= tmp.14977 6)) (begin (set! rax (- tmp.14951 tmp.14952)) (jump tmp-ra.14983 rbp rax)) (begin (set! rax 574) (jump tmp-ra.14983 rbp rax))) (begin (set! rax 574) (jump tmp-ra.14983 rbp rax)))))) (define L.fact_loop.2035 ((new-frames (() ()))) (begin (set! tmp-ra.14984 r15) (begin (set! n.14946 rdi) (set! acc.14945 rsi) (if (begin (if (= n.14946 0) (set! tmp.14979 14) (set! tmp.14979 6)) (!= tmp.14979 6)) (begin (set! rax acc.14945) (jump tmp-ra.14984 rbp rax)) (begin (begin (return-point L.rp.2038 (begin (set! rsi 8) (set! rdi n.14946) (set! r15 L.rp.2038) (jump L.-.2036 rbp r15 rdi rsi))) (set! tmp.14980 rax)) (begin (begin (return-point L.rp.2039 (begin (set! rsi n.14946) (set! rdi acc.14945) (set! r15 L.rp.2039) (jump L.*.2037 rbp r15 rdi rsi))) (set! tmp.14981 rax)) (begin (set! rsi tmp.14981) (set! rdi tmp.14980) (set! r15 tmp-ra.14984) (jump L.fact_loop.2035 rbp r15 rdi rsi)))))))) (begin (set! tmp-ra.14985 r15) (begin (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.14985) (jump L.fact_loop.2035 rbp r15 rdi rsi)))) (module ((new-frames ())) (define L.*.2042 ((new-frames ())) (begin (set! tmp-ra.15022 r15) (begin (set! tmp.14987 rdi) (set! tmp.14988 rsi) (if (begin (if (begin (set! tmp.15011 (bitwise-and tmp.14988 7)) (= tmp.15011 0)) (set! tmp.15010 14) (set! tmp.15010 6)) (!= tmp.15010 6)) (if (begin (if (begin (set! tmp.15013 (bitwise-and tmp.14987 7)) (= tmp.15013 0)) (set! tmp.15012 14) (set! tmp.15012 6)) (!= tmp.15012 6)) (begin (set! tmp.15014 (arithmetic-shift-right tmp.14988 3)) (begin (set! rax (* tmp.14987 tmp.15014)) (jump tmp-ra.15022 rbp rax))) (begin (set! rax 62) (jump tmp-ra.15022 rbp rax))) (begin (set! rax 62) (jump tmp-ra.15022 rbp rax)))))) (define L.-.2041 ((new-frames ())) (begin (set! tmp-ra.15023 r15) (begin (set! tmp.14991 rdi) (set! tmp.14992 rsi) (if (begin (if (begin (set! tmp.15016 (bitwise-and tmp.14992 7)) (= tmp.15016 0)) (set! tmp.15015 14) (set! tmp.15015 6)) (!= tmp.15015 6)) (if (begin (if (begin (set! tmp.15018 (bitwise-and tmp.14991 7)) (= tmp.15018 0)) (set! tmp.15017 14) (set! tmp.15017 6)) (!= tmp.15017 6)) (begin (set! rax (- tmp.14991 tmp.14992)) (jump tmp-ra.15023 rbp rax)) (begin (set! rax 574) (jump tmp-ra.15023 rbp rax))) (begin (set! rax 574) (jump tmp-ra.15023 rbp rax)))))) (define L.fact.2040 ((new-frames (() ()))) (begin (set! tmp-ra.15024 r15) (begin (set! x.14986 rdi) (if (begin (if (= x.14986 0) (set! tmp.15019 14) (set! tmp.15019 6)) (!= tmp.15019 6)) (begin (set! rax 8) (jump tmp-ra.15024 rbp rax)) (begin (begin (begin (return-point L.rp.2043 (begin (set! rsi 8) (set! rdi x.14986) (set! r15 L.rp.2043) (jump L.-.2041 rbp r15 rdi rsi))) (set! tmp.15021 rax)) (begin (return-point L.rp.2044 (begin (set! rdi tmp.15021) (set! r15 L.rp.2044) (jump L.fact.2040 rbp r15 rdi))) (set! tmp.15020 rax))) (begin (set! rsi tmp.15020) (set! rdi x.14986) (set! r15 tmp-ra.15024) (jump L.*.2042 rbp r15 rdi rsi))))))) (begin (set! tmp-ra.15025 r15) (begin (set! rdi 40) (set! r15 tmp-ra.15025) (jump L.fact.2040 rbp r15 rdi)))) (module ((new-frames ())) (define L.+.2046 ((new-frames ())) (begin (set! tmp-ra.15060 r15) (begin (set! tmp.15033 rdi) (set! tmp.15034 rsi) (if (begin (if (begin (set! tmp.15055 (bitwise-and tmp.15034 7)) (= tmp.15055 0)) (set! tmp.15054 14) (set! tmp.15054 6)) (!= tmp.15054 6)) (if (begin (if (begin (set! tmp.15057 (bitwise-and tmp.15033 7)) (= tmp.15057 0)) (set! tmp.15056 14) (set! tmp.15056 6)) (!= tmp.15056 6)) (begin (set! rax (+ tmp.15033 tmp.15034)) (jump tmp-ra.15060 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15060 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15060 rbp rax)))))) (define L.fib_loop.2045 ((new-frames (() ()))) (begin (set! tmp-ra.15061 r15) (begin (set! n.15028 rdi) (set! acc1.15027 rsi) (set! acc2.15026 rdx) (if (begin (if (= n.15028 0) (set! tmp.15058 14) (set! tmp.15058 6)) (!= tmp.15058 6)) (begin (set! rax acc1.15027) (jump tmp-ra.15061 rbp rax)) (if (begin (if (= n.15028 8) (set! tmp.15059 14) (set! tmp.15059 6)) (!= tmp.15059 6)) (begin (set! rax acc2.15026) (jump tmp-ra.15061 rbp rax)) (begin (begin (return-point L.rp.2047 (begin (set! rsi -8) (set! rdi n.15028) (set! r15 L.rp.2047) (jump L.+.2046 rbp r15 rdi rsi))) (set! new-n.15029 rax)) (begin (begin (return-point L.rp.2048 (begin (set! rsi acc2.15026) (set! rdi acc1.15027) (set! r15 L.rp.2048) (jump L.+.2046 rbp r15 rdi rsi))) (set! new-acc2.15030 rax)) (begin (set! rdx new-acc2.15030) (set! rsi acc2.15026) (set! rdi new-n.15029) (set! r15 tmp-ra.15061) (jump L.fib_loop.2045 rbp r15 rdi rsi rdx))))))))) (begin (set! tmp-ra.15062 r15) (begin (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.15062) (jump L.fib_loop.2045 rbp r15 rdi rsi rdx)))) (module ((new-frames ())) (define L.+.2050 ((new-frames ())) (begin (set! tmp-ra.15097 r15) (begin (set! tmp.15070 rdi) (set! tmp.15071 rsi) (if (begin (if (begin (set! tmp.15092 (bitwise-and tmp.15071 7)) (= tmp.15092 0)) (set! tmp.15091 14) (set! tmp.15091 6)) (!= tmp.15091 6)) (if (begin (if (begin (set! tmp.15094 (bitwise-and tmp.15070 7)) (= tmp.15094 0)) (set! tmp.15093 14) (set! tmp.15093 6)) (!= tmp.15093 6)) (begin (set! rax (+ tmp.15070 tmp.15071)) (jump tmp-ra.15097 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15097 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15097 rbp rax)))))) (define L.fib_loop.2049 ((new-frames (() ()))) (begin (set! tmp-ra.15098 r15) (begin (set! n.15065 rdi) (set! acc1.15064 rsi) (set! acc2.15063 rdx) (if (begin (if (= n.15065 0) (set! tmp.15095 14) (set! tmp.15095 6)) (!= tmp.15095 6)) (begin (set! rax acc1.15064) (jump tmp-ra.15098 rbp rax)) (if (begin (if (= n.15065 8) (set! tmp.15096 14) (set! tmp.15096 6)) (!= tmp.15096 6)) (begin (set! rax acc2.15063) (jump tmp-ra.15098 rbp rax)) (begin (begin (return-point L.rp.2051 (begin (set! rsi -8) (set! rdi n.15065) (set! r15 L.rp.2051) (jump L.+.2050 rbp r15 rdi rsi))) (set! new-n.15066 rax)) (begin (begin (return-point L.rp.2052 (begin (set! rsi acc2.15063) (set! rdi acc1.15064) (set! r15 L.rp.2052) (jump L.+.2050 rbp r15 rdi rsi))) (set! new-acc2.15067 rax)) (begin (set! rdx new-acc2.15067) (set! rsi acc2.15063) (set! rdi new-n.15066) (set! r15 tmp-ra.15098) (jump L.fib_loop.2049 rbp r15 rdi rsi rdx))))))))) (begin (set! tmp-ra.15099 r15) (begin (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.15099) (jump L.fib_loop.2049 rbp r15 rdi rsi rdx))))) ((module ((new-frames ())) (define L.id.2053 ((new-frames ())) (begin (set! tmp-ra.15124 r15) (set! x.15100 rdi) (set! rax x.15100) (jump tmp-ra.15124 rbp rax))) (begin (set! tmp-ra.15125 r15) (set! rdi 40) (set! r15 tmp-ra.15125) (jump L.id.2053 rbp r15 rdi))) (module ((new-frames (()))) (define L.+.2055 ((new-frames ())) (begin (set! tmp-ra.15155 r15) (set! tmp.15130 rdi) (set! tmp.15131 rsi) (if (begin (if (begin (begin (set! tmp.15152 tmp.15131) (set! tmp.15152 (bitwise-and tmp.15152 7))) (= tmp.15152 0)) (set! tmp.15151 14) (set! tmp.15151 6)) (!= tmp.15151 6)) (if (begin (if (begin (begin (set! tmp.15154 tmp.15130) (set! tmp.15154 (bitwise-and tmp.15154 7))) (= tmp.15154 0)) (set! tmp.15153 14) (set! tmp.15153 6)) (!= tmp.15153 6)) (begin (set! rax tmp.15130) (set! rax (+ rax tmp.15131)) (jump tmp-ra.15155 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15155 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15155 rbp rax))))) (define L.id.2054 ((new-frames ())) (begin (set! tmp-ra.15156 r15) (set! x.15126 rdi) (set! rax x.15126) (jump tmp-ra.15156 rbp rax))) (begin (set! tmp-ra.15157 r15) (return-point L.rp.2056 (begin (set! rdi 40) (set! r15 L.rp.2056) (jump L.id.2054 rbp r15 rdi))) (set! y.15127 rax) (set! rsi y.15127) (set! rdi 40) (set! r15 tmp-ra.15157) (jump L.+.2055 rbp r15 rdi rsi))) (module ((new-frames ())) (define L.+.2059 ((new-frames ())) (begin (set! tmp-ra.15191 r15) (set! tmp.15164 rdi) (set! tmp.15165 rsi) (if (begin (if (begin (begin (set! tmp.15186 tmp.15165) (set! tmp.15186 (bitwise-and tmp.15186 7))) (= tmp.15186 0)) (set! tmp.15185 14) (set! tmp.15185 6)) (!= tmp.15185 6)) (if (begin (if (begin (begin (set! tmp.15188 tmp.15164) (set! tmp.15188 (bitwise-and tmp.15188 7))) (= tmp.15188 0)) (set! tmp.15187 14) (set! tmp.15187 6)) (!= tmp.15187 6)) (begin (set! rax tmp.15164) (set! rax (+ rax tmp.15165)) (jump tmp-ra.15191 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15191 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15191 rbp rax))))) (define L.odd?.2057 ((new-frames (()))) (begin (set! tmp-ra.15192 r15) (set! x.15158 rdi) (if (begin (if (= x.15158 0) (set! tmp.15189 14) (set! tmp.15189 6)) (!= tmp.15189 6)) (begin (set! rax 0) (jump tmp-ra.15192 rbp rax)) (begin (return-point L.rp.2060 (begin (set! rsi -8) (set! rdi x.15158) (set! r15 L.rp.2060) (jump L.+.2059 rbp r15 rdi rsi))) (set! y.15159 rax) (set! rdi y.15159) (set! r15 tmp-ra.15192) (jump L.even?.2058 rbp r15 rdi))))) (define L.even?.2058 ((new-frames (()))) (begin (set! tmp-ra.15193 r15) (set! x.15160 rdi) (if (begin (if (= x.15160 0) (set! tmp.15190 14) (set! tmp.15190 6)) (!= tmp.15190 6)) (begin (set! rax 8) (jump tmp-ra.15193 rbp rax)) (begin (return-point L.rp.2061 (begin (set! rsi -8) (set! rdi x.15160) (set! r15 L.rp.2061) (jump L.+.2059 rbp r15 rdi rsi))) (set! y.15161 rax) (set! rdi y.15161) (set! r15 tmp-ra.15193) (jump L.odd?.2057 rbp r15 rdi))))) (begin (set! tmp-ra.15194 r15) (set! rdi 40) (set! r15 tmp-ra.15194) (jump L.even?.2058 rbp r15 rdi))) (module ((new-frames ())) (define L.zero.2062 ((new-frames ())) (begin (set! tmp-ra.15222 r15) (set! v0.15198 rdi) (set! v1.15197 rsi) (set! v2.15196 rdx) (set! v3.15195 rcx) (set! rax 0) (jump tmp-ra.15222 rbp rax))) (begin (set! tmp-ra.15223 r15) (set! rax 0) (jump tmp-ra.15223 rbp rax))) (module ((new-frames ())) (define L.id.2063 ((new-frames ())) (begin (set! tmp-ra.15249 r15) (set! x.15224 rdi) (set! rax x.15224) (jump tmp-ra.15249 rbp rax))) (begin (set! tmp-ra.15250 r15) (set! y.15225 L.id.2063) (set! rdi 40) (set! r15 tmp-ra.15250) (jump y.15225 rbp r15 rdi))) (module ((new-frames ())) (define L.id1.2064 ((new-frames ())) (begin (set! tmp-ra.15277 r15) (set! x.15251 rdi) (set! rax x.15251) (jump tmp-ra.15277 rbp rax))) (define L.id2.2065 ((new-frames ())) (begin (set! tmp-ra.15278 r15) (set! x.15252 rdi) (set! rax x.15252) (jump tmp-ra.15278 rbp rax))) (begin (set! tmp-ra.15279 r15) (if (begin (set! tmp.15280 14) (!= tmp.15280 6)) (set! y.15253 L.id1.2064) (set! y.15253 L.id2.2065)) (set! rdi 40) (set! r15 tmp-ra.15279) (jump y.15253 rbp r15 rdi))) (module ((new-frames (() ()))) (define L.*.2067 ((new-frames ())) (begin (set! tmp-ra.15315 r15) (set! tmp.15281 rdi) (set! tmp.15282 rsi) (if (begin (if (begin (begin (set! tmp.15305 tmp.15282) (set! tmp.15305 (bitwise-and tmp.15305 7))) (= tmp.15305 0)) (set! tmp.15304 14) (set! tmp.15304 6)) (!= tmp.15304 6)) (if (begin (if (begin (begin (set! tmp.15307 tmp.15281) (set! tmp.15307 (bitwise-and tmp.15307 7))) (= tmp.15307 0)) (set! tmp.15306 14) (set! tmp.15306 6)) (!= tmp.15306 6)) (begin (set! tmp.15308 tmp.15282) (set! tmp.15308 (arithmetic-shift-right tmp.15308 3)) (set! rax tmp.15281) (set! rax (* rax tmp.15308)) (jump tmp-ra.15315 rbp rax)) (begin (set! rax 62) (jump tmp-ra.15315 rbp rax))) (begin (set! rax 62) (jump tmp-ra.15315 rbp rax))))) (define L.+.2066 ((new-frames ())) (begin (set! tmp-ra.15316 r15) (set! tmp.15283 rdi) (set! tmp.15284 rsi) (if (begin (if (begin (begin (set! tmp.15310 tmp.15284) (set! tmp.15310 (bitwise-and tmp.15310 7))) (= tmp.15310 0)) (set! tmp.15309 14) (set! tmp.15309 6)) (!= tmp.15309 6)) (if (begin (if (begin (begin (set! tmp.15312 tmp.15283) (set! tmp.15312 (bitwise-and tmp.15312 7))) (= tmp.15312 0)) (set! tmp.15311 14) (set! tmp.15311 6)) (!= tmp.15311 6)) (begin (set! rax tmp.15283) (set! rax (+ rax tmp.15284)) (jump tmp-ra.15316 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15316 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15316 rbp rax))))) (begin (set! tmp-ra.15317 r15) (return-point L.rp.2068 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2068) (jump L.+.2066 rbp r15 rdi rsi))) (set! tmp.15313 rax) (return-point L.rp.2069 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2069) (jump L.*.2067 rbp r15 rdi rsi))) (set! tmp.15314 rax) (set! rsi tmp.15314) (set! rdi tmp.15313) (set! r15 tmp-ra.15317) (jump L.+.2066 rbp r15 rdi rsi))) (module ((new-frames (()))) (define L.+.2070 ((new-frames ())) (begin (set! tmp-ra.15347 r15) (set! tmp.15320 rdi) (set! tmp.15321 rsi) (if (begin (if (begin (begin (set! tmp.15342 tmp.15321) (set! tmp.15342 (bitwise-and tmp.15342 7))) (= tmp.15342 0)) (set! tmp.15341 14) (set! tmp.15341 6)) (!= tmp.15341 6)) (if (begin (if (begin (begin (set! tmp.15344 tmp.15320) (set! tmp.15344 (bitwise-and tmp.15344 7))) (= tmp.15344 0)) (set! tmp.15343 14) (set! tmp.15343 6)) (!= tmp.15343 6)) (begin (set! rax tmp.15320) (set! rax (+ rax tmp.15321)) (jump tmp-ra.15347 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15347 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15347 rbp rax))))) (begin (set! tmp-ra.15348 r15) (if (begin (if (begin (begin (return-point L.rp.2071 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2071) (jump L.+.2070 rbp r15 rdi rsi))) (set! tmp.15346 rax)) (= tmp.15346 88)) (set! tmp.15345 14) (set! tmp.15345 6)) (!= tmp.15345 6)) (begin (set! rax 32) (jump tmp-ra.15348 rbp rax)) (begin (set! rax 48) (jump tmp-ra.15348 rbp rax))))) (module ((new-frames ())) (begin (set! tmp-ra.15372 r15) (set! rax 14) (jump tmp-ra.15372 rbp rax))) (module ((new-frames ())) (begin (set! tmp-ra.15396 r15) (set! rax 6) (jump tmp-ra.15396 rbp rax))) (module ((new-frames ())) (begin (set! tmp-ra.15420 r15) (set! rax 22) (jump tmp-ra.15420 rbp rax))) (module ((new-frames ())) (define L.+.2075 ((new-frames ())) (begin (set! tmp-ra.15480 r15) (set! tmp.15454 rdi) (set! tmp.15455 rsi) (if (begin (if (begin (begin (set! tmp.15476 tmp.15455) (set! tmp.15476 (bitwise-and tmp.15476 7))) (= tmp.15476 0)) (set! tmp.15475 14) (set! tmp.15475 6)) (!= tmp.15475 6)) (if (begin (if (begin (begin (set! tmp.15478 tmp.15454) (set! tmp.15478 (bitwise-and tmp.15478 7))) (= tmp.15478 0)) (set! tmp.15477 14) (set! tmp.15477 6)) (!= tmp.15477 6)) (begin (set! rax tmp.15454) (set! rax (+ rax tmp.15455)) (jump tmp-ra.15480 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15480 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15480 rbp rax))))) (define L.F.2072 ((new-frames ((nfv.15482 nfv.15483)))) (begin (set! tmp-ra.15481 r15) (set! a.15427 rdi) (set! b.15426 rsi) (set! c.15425 rdx) (set! d.15424 rcx) (set! e.15423 r8) (set! f.15422 r9) (set! g.15421 fv0) (return-point L.rp.2076 (begin (set! nfv.15483 64) (set! nfv.15482 g.15421) (set! r9 f.15422) (set! r8 e.15423) (set! rcx d.15424) (set! rdx c.15425) (set! rsi b.15426) (set! rdi a.15427) (set! r15 L.rp.2076) (jump L.G.2073 rbp r15 rdi rsi rdx rcx r8 r9 nfv.15482 nfv.15483))) (set! tmp.15479 rax) (set! rsi tmp.15479) (set! rdi 80) (set! r15 tmp-ra.15481) (jump L.+.2075 rbp r15 rdi rsi))) (define L.G.2073 ((new-frames ())) (begin (set! tmp-ra.15484 r15) (set! a.15435 rdi) (set! b.15434 rsi) (set! c.15433 rdx) (set! d.15432 rcx) (set! e.15431 r8) (set! f.15430 r9) (set! g.15429 fv0) (set! h.15428 fv1) (set! fv2 72) (set! fv1 h.15428) (set! fv0 g.15429) (set! r9 f.15430) (set! r8 e.15431) (set! rcx d.15432) (set! rdx c.15433) (set! rsi b.15434) (set! rdi a.15435) (set! r15 tmp-ra.15484) (jump L.H.2074 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))) (define L.H.2074 ((new-frames (() () () () () () ()))) (begin (set! tmp-ra.15485 r15) (set! a.15444 rdi) (set! b.15443 rsi) (set! c.15442 rdx) (set! d.15441 rcx) (set! e.15440 r8) (set! f.15439 r9) (set! g.15438 fv0) (set! h.15437 fv1) (set! j.15436 fv2) (return-point L.rp.2077 (begin (set! rsi b.15443) (set! rdi a.15444) (set! r15 L.rp.2077) (jump L.+.2075 rbp r15 rdi rsi))) (set! r1.15445 rax) (return-point L.rp.2078 (begin (set! rsi c.15442) (set! rdi r1.15445) (set! r15 L.rp.2078) (jump L.+.2075 rbp r15 rdi rsi))) (set! r2.15446 rax) (return-point L.rp.2079 (begin (set! rsi d.15441) (set! rdi r2.15446) (set! r15 L.rp.2079) (jump L.+.2075 rbp r15 rdi rsi))) (set! r3.15447 rax) (return-point L.rp.2080 (begin (set! rsi e.15440) (set! rdi r3.15447) (set! r15 L.rp.2080) (jump L.+.2075 rbp r15 rdi rsi))) (set! r4.15448 rax) (return-point L.rp.2081 (begin (set! rsi f.15439) (set! rdi r4.15448) (set! r15 L.rp.2081) (jump L.+.2075 rbp r15 rdi rsi))) (set! r5.15449 rax) (return-point L.rp.2082 (begin (set! rsi g.15438) (set! rdi r5.15449) (set! r15 L.rp.2082) (jump L.+.2075 rbp r15 rdi rsi))) (set! r6.15450 rax) (return-point L.rp.2083 (begin (set! rsi h.15437) (set! rdi r6.15450) (set! r15 L.rp.2083) (jump L.+.2075 rbp r15 rdi rsi))) (set! r7.15451 rax) (set! rsi j.15436) (set! rdi r7.15451) (set! r15 tmp-ra.15485) (jump L.+.2075 rbp r15 rdi rsi))) (begin (set! tmp-ra.15486 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.15486) (jump L.F.2072 rbp r15 rdi rsi rdx rcx r8 r9 fv0))) (module ((new-frames ())) (define L.<.2085 ((new-frames ())) (begin (set! tmp-ra.15517 r15) (set! tmp.15495 rdi) (set! tmp.15496 rsi) (if (begin (if (begin (begin (set! tmp.15513 tmp.15496) (set! tmp.15513 (bitwise-and tmp.15513 7))) (= tmp.15513 0)) (set! tmp.15512 14) (set! tmp.15512 6)) (!= tmp.15512 6)) (if (begin (if (begin (begin (set! tmp.15515 tmp.15495) (set! tmp.15515 (bitwise-and tmp.15515 7))) (= tmp.15515 0)) (set! tmp.15514 14) (set! tmp.15514 6)) (!= tmp.15514 6)) (if (< tmp.15495 tmp.15496) (begin (set! rax 14) (jump tmp-ra.15517 rbp rax)) (begin (set! rax 6) (jump tmp-ra.15517 rbp rax))) (begin (set! rax 830) (jump tmp-ra.15517 rbp rax))) (begin (set! rax 830) (jump tmp-ra.15517 rbp rax))))) (define L.swap.2084 ((new-frames (()))) (begin (set! tmp-ra.15518 r15) (set! x.15488 rdi) (set! y.15487 rsi) (if (begin (begin (return-point L.rp.2086 (begin (set! rsi x.15488) (set! rdi y.15487) (set! r15 L.rp.2086) (jump L.<.2085 rbp r15 rdi rsi))) (set! tmp.15516 rax)) (!= tmp.15516 6)) (begin (set! rax x.15488) (jump tmp-ra.15518 rbp rax)) (begin (set! rsi x.15488) (set! rdi y.15487) (set! r15 tmp-ra.15518) (jump L.swap.2084 rbp r15 rdi rsi))))) (begin (set! tmp-ra.15519 r15) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.15519) (jump L.swap.2084 rbp r15 rdi rsi))) (module ((new-frames ())) (define L.*.2089 ((new-frames ())) (begin (set! tmp-ra.15557 r15) (set! tmp.15522 rdi) (set! tmp.15523 rsi) (if (begin (if (begin (begin (set! tmp.15546 tmp.15523) (set! tmp.15546 (bitwise-and tmp.15546 7))) (= tmp.15546 0)) (set! tmp.15545 14) (set! tmp.15545 6)) (!= tmp.15545 6)) (if (begin (if (begin (begin (set! tmp.15548 tmp.15522) (set! tmp.15548 (bitwise-and tmp.15548 7))) (= tmp.15548 0)) (set! tmp.15547 14) (set! tmp.15547 6)) (!= tmp.15547 6)) (begin (set! tmp.15549 tmp.15523) (set! tmp.15549 (arithmetic-shift-right tmp.15549 3)) (set! rax tmp.15522) (set! rax (* rax tmp.15549)) (jump tmp-ra.15557 rbp rax)) (begin (set! rax 62) (jump tmp-ra.15557 rbp rax))) (begin (set! rax 62) (jump tmp-ra.15557 rbp rax))))) (define L.-.2088 ((new-frames ())) (begin (set! tmp-ra.15558 r15) (set! tmp.15526 rdi) (set! tmp.15527 rsi) (if (begin (if (begin (begin (set! tmp.15551 tmp.15527) (set! tmp.15551 (bitwise-and tmp.15551 7))) (= tmp.15551 0)) (set! tmp.15550 14) (set! tmp.15550 6)) (!= tmp.15550 6)) (if (begin (if (begin (begin (set! tmp.15553 tmp.15526) (set! tmp.15553 (bitwise-and tmp.15553 7))) (= tmp.15553 0)) (set! tmp.15552 14) (set! tmp.15552 6)) (!= tmp.15552 6)) (begin (set! rax tmp.15526) (set! rax (- rax tmp.15527)) (jump tmp-ra.15558 rbp rax)) (begin (set! rax 574) (jump tmp-ra.15558 rbp rax))) (begin (set! rax 574) (jump tmp-ra.15558 rbp rax))))) (define L.fact_loop.2087 ((new-frames (() ()))) (begin (set! tmp-ra.15559 r15) (set! n.15521 rdi) (set! acc.15520 rsi) (if (begin (if (= n.15521 0) (set! tmp.15554 14) (set! tmp.15554 6)) (!= tmp.15554 6)) (begin (set! rax acc.15520) (jump tmp-ra.15559 rbp rax)) (begin (return-point L.rp.2090 (begin (set! rsi 8) (set! rdi n.15521) (set! r15 L.rp.2090) (jump L.-.2088 rbp r15 rdi rsi))) (set! tmp.15555 rax) (return-point L.rp.2091 (begin (set! rsi n.15521) (set! rdi acc.15520) (set! r15 L.rp.2091) (jump L.*.2089 rbp r15 rdi rsi))) (set! tmp.15556 rax) (set! rsi tmp.15556) (set! rdi tmp.15555) (set! r15 tmp-ra.15559) (jump L.fact_loop.2087 rbp r15 rdi rsi))))) (begin (set! tmp-ra.15560 r15) (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.15560) (jump L.fact_loop.2087 rbp r15 rdi rsi))) (module ((new-frames ())) (define L.*.2094 ((new-frames ())) (begin (set! tmp-ra.15597 r15) (set! tmp.15562 rdi) (set! tmp.15563 rsi) (if (begin (if (begin (begin (set! tmp.15586 tmp.15563) (set! tmp.15586 (bitwise-and tmp.15586 7))) (= tmp.15586 0)) (set! tmp.15585 14) (set! tmp.15585 6)) (!= tmp.15585 6)) (if (begin (if (begin (begin (set! tmp.15588 tmp.15562) (set! tmp.15588 (bitwise-and tmp.15588 7))) (= tmp.15588 0)) (set! tmp.15587 14) (set! tmp.15587 6)) (!= tmp.15587 6)) (begin (set! tmp.15589 tmp.15563) (set! tmp.15589 (arithmetic-shift-right tmp.15589 3)) (set! rax tmp.15562) (set! rax (* rax tmp.15589)) (jump tmp-ra.15597 rbp rax)) (begin (set! rax 62) (jump tmp-ra.15597 rbp rax))) (begin (set! rax 62) (jump tmp-ra.15597 rbp rax))))) (define L.-.2093 ((new-frames ())) (begin (set! tmp-ra.15598 r15) (set! tmp.15566 rdi) (set! tmp.15567 rsi) (if (begin (if (begin (begin (set! tmp.15591 tmp.15567) (set! tmp.15591 (bitwise-and tmp.15591 7))) (= tmp.15591 0)) (set! tmp.15590 14) (set! tmp.15590 6)) (!= tmp.15590 6)) (if (begin (if (begin (begin (set! tmp.15593 tmp.15566) (set! tmp.15593 (bitwise-and tmp.15593 7))) (= tmp.15593 0)) (set! tmp.15592 14) (set! tmp.15592 6)) (!= tmp.15592 6)) (begin (set! rax tmp.15566) (set! rax (- rax tmp.15567)) (jump tmp-ra.15598 rbp rax)) (begin (set! rax 574) (jump tmp-ra.15598 rbp rax))) (begin (set! rax 574) (jump tmp-ra.15598 rbp rax))))) (define L.fact.2092 ((new-frames (() ()))) (begin (set! tmp-ra.15599 r15) (set! x.15561 rdi) (if (begin (if (= x.15561 0) (set! tmp.15594 14) (set! tmp.15594 6)) (!= tmp.15594 6)) (begin (set! rax 8) (jump tmp-ra.15599 rbp rax)) (begin (return-point L.rp.2095 (begin (set! rsi 8) (set! rdi x.15561) (set! r15 L.rp.2095) (jump L.-.2093 rbp r15 rdi rsi))) (set! tmp.15596 rax) (return-point L.rp.2096 (begin (set! rdi tmp.15596) (set! r15 L.rp.2096) (jump L.fact.2092 rbp r15 rdi))) (set! tmp.15595 rax) (set! rsi tmp.15595) (set! rdi x.15561) (set! r15 tmp-ra.15599) (jump L.*.2094 rbp r15 rdi rsi))))) (begin (set! tmp-ra.15600 r15) (set! rdi 40) (set! r15 tmp-ra.15600) (jump L.fact.2092 rbp r15 rdi))) (module ((new-frames ())) (define L.+.2098 ((new-frames ())) (begin (set! tmp-ra.15635 r15) (set! tmp.15608 rdi) (set! tmp.15609 rsi) (if (begin (if (begin (begin (set! tmp.15630 tmp.15609) (set! tmp.15630 (bitwise-and tmp.15630 7))) (= tmp.15630 0)) (set! tmp.15629 14) (set! tmp.15629 6)) (!= tmp.15629 6)) (if (begin (if (begin (begin (set! tmp.15632 tmp.15608) (set! tmp.15632 (bitwise-and tmp.15632 7))) (= tmp.15632 0)) (set! tmp.15631 14) (set! tmp.15631 6)) (!= tmp.15631 6)) (begin (set! rax tmp.15608) (set! rax (+ rax tmp.15609)) (jump tmp-ra.15635 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15635 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15635 rbp rax))))) (define L.fib_loop.2097 ((new-frames (() ()))) (begin (set! tmp-ra.15636 r15) (set! n.15603 rdi) (set! acc1.15602 rsi) (set! acc2.15601 rdx) (if (begin (if (= n.15603 0) (set! tmp.15633 14) (set! tmp.15633 6)) (!= tmp.15633 6)) (begin (set! rax acc1.15602) (jump tmp-ra.15636 rbp rax)) (if (begin (if (= n.15603 8) (set! tmp.15634 14) (set! tmp.15634 6)) (!= tmp.15634 6)) (begin (set! rax acc2.15601) (jump tmp-ra.15636 rbp rax)) (begin (return-point L.rp.2099 (begin (set! rsi -8) (set! rdi n.15603) (set! r15 L.rp.2099) (jump L.+.2098 rbp r15 rdi rsi))) (set! new-n.15604 rax) (return-point L.rp.2100 (begin (set! rsi acc2.15601) (set! rdi acc1.15602) (set! r15 L.rp.2100) (jump L.+.2098 rbp r15 rdi rsi))) (set! new-acc2.15605 rax) (set! rdx new-acc2.15605) (set! rsi acc2.15601) (set! rdi new-n.15604) (set! r15 tmp-ra.15636) (jump L.fib_loop.2097 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.15637 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.15637) (jump L.fib_loop.2097 rbp r15 rdi rsi rdx))) (module ((new-frames ())) (define L.+.2102 ((new-frames ())) (begin (set! tmp-ra.15672 r15) (set! tmp.15645 rdi) (set! tmp.15646 rsi) (if (begin (if (begin (begin (set! tmp.15667 tmp.15646) (set! tmp.15667 (bitwise-and tmp.15667 7))) (= tmp.15667 0)) (set! tmp.15666 14) (set! tmp.15666 6)) (!= tmp.15666 6)) (if (begin (if (begin (begin (set! tmp.15669 tmp.15645) (set! tmp.15669 (bitwise-and tmp.15669 7))) (= tmp.15669 0)) (set! tmp.15668 14) (set! tmp.15668 6)) (!= tmp.15668 6)) (begin (set! rax tmp.15645) (set! rax (+ rax tmp.15646)) (jump tmp-ra.15672 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15672 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15672 rbp rax))))) (define L.fib_loop.2101 ((new-frames (() ()))) (begin (set! tmp-ra.15673 r15) (set! n.15640 rdi) (set! acc1.15639 rsi) (set! acc2.15638 rdx) (if (begin (if (= n.15640 0) (set! tmp.15670 14) (set! tmp.15670 6)) (!= tmp.15670 6)) (begin (set! rax acc1.15639) (jump tmp-ra.15673 rbp rax)) (if (begin (if (= n.15640 8) (set! tmp.15671 14) (set! tmp.15671 6)) (!= tmp.15671 6)) (begin (set! rax acc2.15638) (jump tmp-ra.15673 rbp rax)) (begin (return-point L.rp.2103 (begin (set! rsi -8) (set! rdi n.15640) (set! r15 L.rp.2103) (jump L.+.2102 rbp r15 rdi rsi))) (set! new-n.15641 rax) (return-point L.rp.2104 (begin (set! rsi acc2.15638) (set! rdi acc1.15639) (set! r15 L.rp.2104) (jump L.+.2102 rbp r15 rdi rsi))) (set! new-acc2.15642 rax) (set! rdx new-acc2.15642) (set! rsi acc2.15638) (set! rdi new-n.15641) (set! r15 tmp-ra.15673) (jump L.fib_loop.2101 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.15674 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.15674) (jump L.fib_loop.2101 rbp r15 rdi rsi rdx)))) ((module ((new-frames ()) (locals (tmp-ra.15700))) (define L.id.2105 ((new-frames ()) (locals (x.15675 tmp-ra.15699))) (begin (set! tmp-ra.15699 r15) (set! x.15675 rdi) (set! rax x.15675) (jump tmp-ra.15699 rbp rax))) (begin (set! tmp-ra.15700 r15) (set! rdi 40) (set! r15 tmp-ra.15700) (jump L.id.2105 rbp r15 rdi))) (module ((new-frames (())) (locals (y.15702 tmp-ra.15732))) (define L.+.2107 ((new-frames ()) (locals (tmp.15728 tmp.15705 tmp.15729 tmp-ra.15730 tmp.15727 tmp.15706 tmp.15726))) (begin (set! tmp-ra.15730 r15) (set! tmp.15705 rdi) (set! tmp.15706 rsi) (if (begin (if (begin (begin (set! tmp.15727 tmp.15706) (set! tmp.15727 (bitwise-and tmp.15727 7))) (= tmp.15727 0)) (set! tmp.15726 14) (set! tmp.15726 6)) (!= tmp.15726 6)) (if (begin (if (begin (begin (set! tmp.15729 tmp.15705) (set! tmp.15729 (bitwise-and tmp.15729 7))) (= tmp.15729 0)) (set! tmp.15728 14) (set! tmp.15728 6)) (!= tmp.15728 6)) (begin (set! rax tmp.15705) (set! rax (+ rax tmp.15706)) (jump tmp-ra.15730 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15730 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15730 rbp rax))))) (define L.id.2106 ((new-frames ()) (locals (x.15701 tmp-ra.15731))) (begin (set! tmp-ra.15731 r15) (set! x.15701 rdi) (set! rax x.15701) (jump tmp-ra.15731 rbp rax))) (begin (set! tmp-ra.15732 r15) (return-point L.rp.2108 (begin (set! rdi 40) (set! r15 L.rp.2108) (jump L.id.2106 rbp r15 rdi))) (set! y.15702 rax) (set! rsi y.15702) (set! rdi 40) (set! r15 tmp-ra.15732) (jump L.+.2107 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.15769))) (define L.+.2111 ((new-frames ()) (locals (tmp.15762 tmp.15739 tmp.15763 tmp-ra.15766 tmp.15761 tmp.15740 tmp.15760))) (begin (set! tmp-ra.15766 r15) (set! tmp.15739 rdi) (set! tmp.15740 rsi) (if (begin (if (begin (begin (set! tmp.15761 tmp.15740) (set! tmp.15761 (bitwise-and tmp.15761 7))) (= tmp.15761 0)) (set! tmp.15760 14) (set! tmp.15760 6)) (!= tmp.15760 6)) (if (begin (if (begin (begin (set! tmp.15763 tmp.15739) (set! tmp.15763 (bitwise-and tmp.15763 7))) (= tmp.15763 0)) (set! tmp.15762 14) (set! tmp.15762 6)) (!= tmp.15762 6)) (begin (set! rax tmp.15739) (set! rax (+ rax tmp.15740)) (jump tmp-ra.15766 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15766 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15766 rbp rax))))) (define L.odd?.2109 ((new-frames (())) (locals (y.15734 tmp-ra.15767 x.15733 tmp.15764))) (begin (set! tmp-ra.15767 r15) (set! x.15733 rdi) (if (begin (if (= x.15733 0) (set! tmp.15764 14) (set! tmp.15764 6)) (!= tmp.15764 6)) (begin (set! rax 0) (jump tmp-ra.15767 rbp rax)) (begin (return-point L.rp.2112 (begin (set! rsi -8) (set! rdi x.15733) (set! r15 L.rp.2112) (jump L.+.2111 rbp r15 rdi rsi))) (set! y.15734 rax) (set! rdi y.15734) (set! r15 tmp-ra.15767) (jump L.even?.2110 rbp r15 rdi))))) (define L.even?.2110 ((new-frames (())) (locals (y.15736 tmp-ra.15768 x.15735 tmp.15765))) (begin (set! tmp-ra.15768 r15) (set! x.15735 rdi) (if (begin (if (= x.15735 0) (set! tmp.15765 14) (set! tmp.15765 6)) (!= tmp.15765 6)) (begin (set! rax 8) (jump tmp-ra.15768 rbp rax)) (begin (return-point L.rp.2113 (begin (set! rsi -8) (set! rdi x.15735) (set! r15 L.rp.2113) (jump L.+.2111 rbp r15 rdi rsi))) (set! y.15736 rax) (set! rdi y.15736) (set! r15 tmp-ra.15768) (jump L.odd?.2109 rbp r15 rdi))))) (begin (set! tmp-ra.15769 r15) (set! rdi 40) (set! r15 tmp-ra.15769) (jump L.even?.2110 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp-ra.15798))) (define L.zero.2114 ((new-frames ()) (locals (v3.15770 v2.15771 v1.15772 v0.15773 tmp-ra.15797))) (begin (set! tmp-ra.15797 r15) (set! v0.15773 rdi) (set! v1.15772 rsi) (set! v2.15771 rdx) (set! v3.15770 rcx) (set! rax 0) (jump tmp-ra.15797 rbp rax))) (begin (set! tmp-ra.15798 r15) (set! rax 0) (jump tmp-ra.15798 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.15825 y.15800))) (define L.id.2115 ((new-frames ()) (locals (x.15799 tmp-ra.15824))) (begin (set! tmp-ra.15824 r15) (set! x.15799 rdi) (set! rax x.15799) (jump tmp-ra.15824 rbp rax))) (begin (set! tmp-ra.15825 r15) (set! y.15800 L.id.2115) (set! rdi 40) (set! r15 tmp-ra.15825) (jump y.15800 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp.15855 tmp-ra.15854 y.15828))) (define L.id1.2116 ((new-frames ()) (locals (x.15826 tmp-ra.15852))) (begin (set! tmp-ra.15852 r15) (set! x.15826 rdi) (set! rax x.15826) (jump tmp-ra.15852 rbp rax))) (define L.id2.2117 ((new-frames ()) (locals (x.15827 tmp-ra.15853))) (begin (set! tmp-ra.15853 r15) (set! x.15827 rdi) (set! rax x.15827) (jump tmp-ra.15853 rbp rax))) (begin (set! tmp-ra.15854 r15) (if (begin (set! tmp.15855 14) (!= tmp.15855 6)) (set! y.15828 L.id1.2116) (set! y.15828 L.id2.2117)) (set! rdi 40) (set! r15 tmp-ra.15854) (jump y.15828 rbp r15 rdi))) (module ((new-frames (() ())) (locals (tmp.15889 tmp.15888 tmp-ra.15892))) (define L.*.2119 ((new-frames ()) (locals (tmp.15881 tmp.15856 tmp.15882 tmp.15883 tmp-ra.15890 tmp.15880 tmp.15857 tmp.15879))) (begin (set! tmp-ra.15890 r15) (set! tmp.15856 rdi) (set! tmp.15857 rsi) (if (begin (if (begin (begin (set! tmp.15880 tmp.15857) (set! tmp.15880 (bitwise-and tmp.15880 7))) (= tmp.15880 0)) (set! tmp.15879 14) (set! tmp.15879 6)) (!= tmp.15879 6)) (if (begin (if (begin (begin (set! tmp.15882 tmp.15856) (set! tmp.15882 (bitwise-and tmp.15882 7))) (= tmp.15882 0)) (set! tmp.15881 14) (set! tmp.15881 6)) (!= tmp.15881 6)) (begin (set! tmp.15883 tmp.15857) (set! tmp.15883 (arithmetic-shift-right tmp.15883 3)) (set! rax tmp.15856) (set! rax (* rax tmp.15883)) (jump tmp-ra.15890 rbp rax)) (begin (set! rax 62) (jump tmp-ra.15890 rbp rax))) (begin (set! rax 62) (jump tmp-ra.15890 rbp rax))))) (define L.+.2118 ((new-frames ()) (locals (tmp.15886 tmp.15858 tmp.15887 tmp-ra.15891 tmp.15885 tmp.15859 tmp.15884))) (begin (set! tmp-ra.15891 r15) (set! tmp.15858 rdi) (set! tmp.15859 rsi) (if (begin (if (begin (begin (set! tmp.15885 tmp.15859) (set! tmp.15885 (bitwise-and tmp.15885 7))) (= tmp.15885 0)) (set! tmp.15884 14) (set! tmp.15884 6)) (!= tmp.15884 6)) (if (begin (if (begin (begin (set! tmp.15887 tmp.15858) (set! tmp.15887 (bitwise-and tmp.15887 7))) (= tmp.15887 0)) (set! tmp.15886 14) (set! tmp.15886 6)) (!= tmp.15886 6)) (begin (set! rax tmp.15858) (set! rax (+ rax tmp.15859)) (jump tmp-ra.15891 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15891 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15891 rbp rax))))) (begin (set! tmp-ra.15892 r15) (return-point L.rp.2120 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2120) (jump L.+.2118 rbp r15 rdi rsi))) (set! tmp.15888 rax) (return-point L.rp.2121 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2121) (jump L.*.2119 rbp r15 rdi rsi))) (set! tmp.15889 rax) (set! rsi tmp.15889) (set! rdi tmp.15888) (set! r15 tmp-ra.15892) (jump L.+.2118 rbp r15 rdi rsi))) (module ((new-frames (())) (locals (tmp-ra.15923 tmp.15921 tmp.15920))) (define L.+.2122 ((new-frames ()) (locals (tmp.15918 tmp.15895 tmp.15919 tmp-ra.15922 tmp.15917 tmp.15896 tmp.15916))) (begin (set! tmp-ra.15922 r15) (set! tmp.15895 rdi) (set! tmp.15896 rsi) (if (begin (if (begin (begin (set! tmp.15917 tmp.15896) (set! tmp.15917 (bitwise-and tmp.15917 7))) (= tmp.15917 0)) (set! tmp.15916 14) (set! tmp.15916 6)) (!= tmp.15916 6)) (if (begin (if (begin (begin (set! tmp.15919 tmp.15895) (set! tmp.15919 (bitwise-and tmp.15919 7))) (= tmp.15919 0)) (set! tmp.15918 14) (set! tmp.15918 6)) (!= tmp.15918 6)) (begin (set! rax tmp.15895) (set! rax (+ rax tmp.15896)) (jump tmp-ra.15922 rbp rax)) (begin (set! rax 318) (jump tmp-ra.15922 rbp rax))) (begin (set! rax 318) (jump tmp-ra.15922 rbp rax))))) (begin (set! tmp-ra.15923 r15) (if (begin (if (begin (begin (return-point L.rp.2123 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2123) (jump L.+.2122 rbp r15 rdi rsi))) (set! tmp.15921 rax)) (= tmp.15921 88)) (set! tmp.15920 14) (set! tmp.15920 6)) (!= tmp.15920 6)) (begin (set! rax 32) (jump tmp-ra.15923 rbp rax)) (begin (set! rax 48) (jump tmp-ra.15923 rbp rax))))) (module ((new-frames ()) (locals (tmp-ra.15947))) (begin (set! tmp-ra.15947 r15) (set! rax 14) (jump tmp-ra.15947 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.15971))) (begin (set! tmp-ra.15971 r15) (set! rax 6) (jump tmp-ra.15971 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.15995))) (begin (set! tmp-ra.15995 r15) (set! rax 22) (jump tmp-ra.15995 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.16061))) (define L.+.2127 ((new-frames ()) (locals (tmp.16052 tmp.16029 tmp.16053 tmp-ra.16055 tmp.16051 tmp.16030 tmp.16050))) (begin (set! tmp-ra.16055 r15) (set! tmp.16029 rdi) (set! tmp.16030 rsi) (if (begin (if (begin (begin (set! tmp.16051 tmp.16030) (set! tmp.16051 (bitwise-and tmp.16051 7))) (= tmp.16051 0)) (set! tmp.16050 14) (set! tmp.16050 6)) (!= tmp.16050 6)) (if (begin (if (begin (begin (set! tmp.16053 tmp.16029) (set! tmp.16053 (bitwise-and tmp.16053 7))) (= tmp.16053 0)) (set! tmp.16052 14) (set! tmp.16052 6)) (!= tmp.16052 6)) (begin (set! rax tmp.16029) (set! rax (+ rax tmp.16030)) (jump tmp-ra.16055 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16055 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16055 rbp rax))))) (define L.F.2124 ((new-frames ((nfv.16057 nfv.16058))) (locals (tmp.16054 nfv.16058 nfv.16057 g.15996 f.15997 e.15998 d.15999 c.16000 b.16001 a.16002 tmp-ra.16056))) (begin (set! tmp-ra.16056 r15) (set! a.16002 rdi) (set! b.16001 rsi) (set! c.16000 rdx) (set! d.15999 rcx) (set! e.15998 r8) (set! f.15997 r9) (set! g.15996 fv0) (return-point L.rp.2128 (begin (set! nfv.16058 64) (set! nfv.16057 g.15996) (set! r9 f.15997) (set! r8 e.15998) (set! rcx d.15999) (set! rdx c.16000) (set! rsi b.16001) (set! rdi a.16002) (set! r15 L.rp.2128) (jump L.G.2125 rbp r15 rdi rsi rdx rcx r8 r9 nfv.16057 nfv.16058))) (set! tmp.16054 rax) (set! rsi tmp.16054) (set! rdi 80) (set! r15 tmp-ra.16056) (jump L.+.2127 rbp r15 rdi rsi))) (define L.G.2125 ((new-frames ()) (locals (h.16003 g.16004 f.16005 e.16006 d.16007 c.16008 b.16009 a.16010 tmp-ra.16059))) (begin (set! tmp-ra.16059 r15) (set! a.16010 rdi) (set! b.16009 rsi) (set! c.16008 rdx) (set! d.16007 rcx) (set! e.16006 r8) (set! f.16005 r9) (set! g.16004 fv0) (set! h.16003 fv1) (set! fv2 72) (set! fv1 h.16003) (set! fv0 g.16004) (set! r9 f.16005) (set! r8 e.16006) (set! rcx d.16007) (set! rdx c.16008) (set! rsi b.16009) (set! rdi a.16010) (set! r15 tmp-ra.16059) (jump L.H.2126 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))) (define L.H.2126 ((new-frames (() () () () () () ())) (locals (r7.16026 r6.16025 r5.16024 r4.16023 r3.16022 r2.16021 r1.16020 j.16011 h.16012 g.16013 f.16014 e.16015 d.16016 c.16017 b.16018 a.16019 tmp-ra.16060))) (begin (set! tmp-ra.16060 r15) (set! a.16019 rdi) (set! b.16018 rsi) (set! c.16017 rdx) (set! d.16016 rcx) (set! e.16015 r8) (set! f.16014 r9) (set! g.16013 fv0) (set! h.16012 fv1) (set! j.16011 fv2) (return-point L.rp.2129 (begin (set! rsi b.16018) (set! rdi a.16019) (set! r15 L.rp.2129) (jump L.+.2127 rbp r15 rdi rsi))) (set! r1.16020 rax) (return-point L.rp.2130 (begin (set! rsi c.16017) (set! rdi r1.16020) (set! r15 L.rp.2130) (jump L.+.2127 rbp r15 rdi rsi))) (set! r2.16021 rax) (return-point L.rp.2131 (begin (set! rsi d.16016) (set! rdi r2.16021) (set! r15 L.rp.2131) (jump L.+.2127 rbp r15 rdi rsi))) (set! r3.16022 rax) (return-point L.rp.2132 (begin (set! rsi e.16015) (set! rdi r3.16022) (set! r15 L.rp.2132) (jump L.+.2127 rbp r15 rdi rsi))) (set! r4.16023 rax) (return-point L.rp.2133 (begin (set! rsi f.16014) (set! rdi r4.16023) (set! r15 L.rp.2133) (jump L.+.2127 rbp r15 rdi rsi))) (set! r5.16024 rax) (return-point L.rp.2134 (begin (set! rsi g.16013) (set! rdi r5.16024) (set! r15 L.rp.2134) (jump L.+.2127 rbp r15 rdi rsi))) (set! r6.16025 rax) (return-point L.rp.2135 (begin (set! rsi h.16012) (set! rdi r6.16025) (set! r15 L.rp.2135) (jump L.+.2127 rbp r15 rdi rsi))) (set! r7.16026 rax) (set! rsi j.16011) (set! rdi r7.16026) (set! r15 tmp-ra.16060) (jump L.+.2127 rbp r15 rdi rsi))) (begin (set! tmp-ra.16061 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.16061) (jump L.F.2124 rbp r15 rdi rsi rdx rcx r8 r9 fv0))) (module ((new-frames ()) (locals (tmp-ra.16094))) (define L.<.2137 ((new-frames ()) (locals (tmp.16089 tmp.16070 tmp.16090 tmp-ra.16092 tmp.16088 tmp.16071 tmp.16087))) (begin (set! tmp-ra.16092 r15) (set! tmp.16070 rdi) (set! tmp.16071 rsi) (if (begin (if (begin (begin (set! tmp.16088 tmp.16071) (set! tmp.16088 (bitwise-and tmp.16088 7))) (= tmp.16088 0)) (set! tmp.16087 14) (set! tmp.16087 6)) (!= tmp.16087 6)) (if (begin (if (begin (begin (set! tmp.16090 tmp.16070) (set! tmp.16090 (bitwise-and tmp.16090 7))) (= tmp.16090 0)) (set! tmp.16089 14) (set! tmp.16089 6)) (!= tmp.16089 6)) (if (< tmp.16070 tmp.16071) (begin (set! rax 14) (jump tmp-ra.16092 rbp rax)) (begin (set! rax 6) (jump tmp-ra.16092 rbp rax))) (begin (set! rax 830) (jump tmp-ra.16092 rbp rax))) (begin (set! rax 830) (jump tmp-ra.16092 rbp rax))))) (define L.swap.2136 ((new-frames (())) (locals (tmp-ra.16093 x.16063 y.16062 tmp.16091))) (begin (set! tmp-ra.16093 r15) (set! x.16063 rdi) (set! y.16062 rsi) (if (begin (begin (return-point L.rp.2138 (begin (set! rsi x.16063) (set! rdi y.16062) (set! r15 L.rp.2138) (jump L.<.2137 rbp r15 rdi rsi))) (set! tmp.16091 rax)) (!= tmp.16091 6)) (begin (set! rax x.16063) (jump tmp-ra.16093 rbp rax)) (begin (set! rsi x.16063) (set! rdi y.16062) (set! r15 tmp-ra.16093) (jump L.swap.2136 rbp r15 rdi rsi))))) (begin (set! tmp-ra.16094 r15) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.16094) (jump L.swap.2136 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.16135))) (define L.*.2141 ((new-frames ()) (locals (tmp.16122 tmp.16097 tmp.16123 tmp.16124 tmp-ra.16132 tmp.16121 tmp.16098 tmp.16120))) (begin (set! tmp-ra.16132 r15) (set! tmp.16097 rdi) (set! tmp.16098 rsi) (if (begin (if (begin (begin (set! tmp.16121 tmp.16098) (set! tmp.16121 (bitwise-and tmp.16121 7))) (= tmp.16121 0)) (set! tmp.16120 14) (set! tmp.16120 6)) (!= tmp.16120 6)) (if (begin (if (begin (begin (set! tmp.16123 tmp.16097) (set! tmp.16123 (bitwise-and tmp.16123 7))) (= tmp.16123 0)) (set! tmp.16122 14) (set! tmp.16122 6)) (!= tmp.16122 6)) (begin (set! tmp.16124 tmp.16098) (set! tmp.16124 (arithmetic-shift-right tmp.16124 3)) (set! rax tmp.16097) (set! rax (* rax tmp.16124)) (jump tmp-ra.16132 rbp rax)) (begin (set! rax 62) (jump tmp-ra.16132 rbp rax))) (begin (set! rax 62) (jump tmp-ra.16132 rbp rax))))) (define L.-.2140 ((new-frames ()) (locals (tmp.16127 tmp.16101 tmp.16128 tmp-ra.16133 tmp.16126 tmp.16102 tmp.16125))) (begin (set! tmp-ra.16133 r15) (set! tmp.16101 rdi) (set! tmp.16102 rsi) (if (begin (if (begin (begin (set! tmp.16126 tmp.16102) (set! tmp.16126 (bitwise-and tmp.16126 7))) (= tmp.16126 0)) (set! tmp.16125 14) (set! tmp.16125 6)) (!= tmp.16125 6)) (if (begin (if (begin (begin (set! tmp.16128 tmp.16101) (set! tmp.16128 (bitwise-and tmp.16128 7))) (= tmp.16128 0)) (set! tmp.16127 14) (set! tmp.16127 6)) (!= tmp.16127 6)) (begin (set! rax tmp.16101) (set! rax (- rax tmp.16102)) (jump tmp-ra.16133 rbp rax)) (begin (set! rax 574) (jump tmp-ra.16133 rbp rax))) (begin (set! rax 574) (jump tmp-ra.16133 rbp rax))))) (define L.fact_loop.2139 ((new-frames (() ())) (locals (tmp.16130 tmp.16131 tmp-ra.16134 acc.16095 n.16096 tmp.16129))) (begin (set! tmp-ra.16134 r15) (set! n.16096 rdi) (set! acc.16095 rsi) (if (begin (if (= n.16096 0) (set! tmp.16129 14) (set! tmp.16129 6)) (!= tmp.16129 6)) (begin (set! rax acc.16095) (jump tmp-ra.16134 rbp rax)) (begin (return-point L.rp.2142 (begin (set! rsi 8) (set! rdi n.16096) (set! r15 L.rp.2142) (jump L.-.2140 rbp r15 rdi rsi))) (set! tmp.16130 rax) (return-point L.rp.2143 (begin (set! rsi n.16096) (set! rdi acc.16095) (set! r15 L.rp.2143) (jump L.*.2141 rbp r15 rdi rsi))) (set! tmp.16131 rax) (set! rsi tmp.16131) (set! rdi tmp.16130) (set! r15 tmp-ra.16134) (jump L.fact_loop.2139 rbp r15 rdi rsi))))) (begin (set! tmp-ra.16135 r15) (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.16135) (jump L.fact_loop.2139 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.16175))) (define L.*.2146 ((new-frames ()) (locals (tmp.16162 tmp.16137 tmp.16163 tmp.16164 tmp-ra.16172 tmp.16161 tmp.16138 tmp.16160))) (begin (set! tmp-ra.16172 r15) (set! tmp.16137 rdi) (set! tmp.16138 rsi) (if (begin (if (begin (begin (set! tmp.16161 tmp.16138) (set! tmp.16161 (bitwise-and tmp.16161 7))) (= tmp.16161 0)) (set! tmp.16160 14) (set! tmp.16160 6)) (!= tmp.16160 6)) (if (begin (if (begin (begin (set! tmp.16163 tmp.16137) (set! tmp.16163 (bitwise-and tmp.16163 7))) (= tmp.16163 0)) (set! tmp.16162 14) (set! tmp.16162 6)) (!= tmp.16162 6)) (begin (set! tmp.16164 tmp.16138) (set! tmp.16164 (arithmetic-shift-right tmp.16164 3)) (set! rax tmp.16137) (set! rax (* rax tmp.16164)) (jump tmp-ra.16172 rbp rax)) (begin (set! rax 62) (jump tmp-ra.16172 rbp rax))) (begin (set! rax 62) (jump tmp-ra.16172 rbp rax))))) (define L.-.2145 ((new-frames ()) (locals (tmp.16167 tmp.16141 tmp.16168 tmp-ra.16173 tmp.16166 tmp.16142 tmp.16165))) (begin (set! tmp-ra.16173 r15) (set! tmp.16141 rdi) (set! tmp.16142 rsi) (if (begin (if (begin (begin (set! tmp.16166 tmp.16142) (set! tmp.16166 (bitwise-and tmp.16166 7))) (= tmp.16166 0)) (set! tmp.16165 14) (set! tmp.16165 6)) (!= tmp.16165 6)) (if (begin (if (begin (begin (set! tmp.16168 tmp.16141) (set! tmp.16168 (bitwise-and tmp.16168 7))) (= tmp.16168 0)) (set! tmp.16167 14) (set! tmp.16167 6)) (!= tmp.16167 6)) (begin (set! rax tmp.16141) (set! rax (- rax tmp.16142)) (jump tmp-ra.16173 rbp rax)) (begin (set! rax 574) (jump tmp-ra.16173 rbp rax))) (begin (set! rax 574) (jump tmp-ra.16173 rbp rax))))) (define L.fact.2144 ((new-frames (() ())) (locals (tmp.16171 tmp.16170 tmp-ra.16174 x.16136 tmp.16169))) (begin (set! tmp-ra.16174 r15) (set! x.16136 rdi) (if (begin (if (= x.16136 0) (set! tmp.16169 14) (set! tmp.16169 6)) (!= tmp.16169 6)) (begin (set! rax 8) (jump tmp-ra.16174 rbp rax)) (begin (return-point L.rp.2147 (begin (set! rsi 8) (set! rdi x.16136) (set! r15 L.rp.2147) (jump L.-.2145 rbp r15 rdi rsi))) (set! tmp.16171 rax) (return-point L.rp.2148 (begin (set! rdi tmp.16171) (set! r15 L.rp.2148) (jump L.fact.2144 rbp r15 rdi))) (set! tmp.16170 rax) (set! rsi tmp.16170) (set! rdi x.16136) (set! r15 tmp-ra.16174) (jump L.*.2146 rbp r15 rdi rsi))))) (begin (set! tmp-ra.16175 r15) (set! rdi 40) (set! r15 tmp-ra.16175) (jump L.fact.2144 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp-ra.16212))) (define L.+.2150 ((new-frames ()) (locals (tmp.16206 tmp.16183 tmp.16207 tmp-ra.16210 tmp.16205 tmp.16184 tmp.16204))) (begin (set! tmp-ra.16210 r15) (set! tmp.16183 rdi) (set! tmp.16184 rsi) (if (begin (if (begin (begin (set! tmp.16205 tmp.16184) (set! tmp.16205 (bitwise-and tmp.16205 7))) (= tmp.16205 0)) (set! tmp.16204 14) (set! tmp.16204 6)) (!= tmp.16204 6)) (if (begin (if (begin (begin (set! tmp.16207 tmp.16183) (set! tmp.16207 (bitwise-and tmp.16207 7))) (= tmp.16207 0)) (set! tmp.16206 14) (set! tmp.16206 6)) (!= tmp.16206 6)) (begin (set! rax tmp.16183) (set! rax (+ rax tmp.16184)) (jump tmp-ra.16210 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16210 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16210 rbp rax))))) (define L.fib_loop.2149 ((new-frames (() ())) (locals (tmp.16209 acc2.16176 new-acc2.16180 new-n.16179 tmp-ra.16211 acc1.16177 n.16178 tmp.16208))) (begin (set! tmp-ra.16211 r15) (set! n.16178 rdi) (set! acc1.16177 rsi) (set! acc2.16176 rdx) (if (begin (if (= n.16178 0) (set! tmp.16208 14) (set! tmp.16208 6)) (!= tmp.16208 6)) (begin (set! rax acc1.16177) (jump tmp-ra.16211 rbp rax)) (if (begin (if (= n.16178 8) (set! tmp.16209 14) (set! tmp.16209 6)) (!= tmp.16209 6)) (begin (set! rax acc2.16176) (jump tmp-ra.16211 rbp rax)) (begin (return-point L.rp.2151 (begin (set! rsi -8) (set! rdi n.16178) (set! r15 L.rp.2151) (jump L.+.2150 rbp r15 rdi rsi))) (set! new-n.16179 rax) (return-point L.rp.2152 (begin (set! rsi acc2.16176) (set! rdi acc1.16177) (set! r15 L.rp.2152) (jump L.+.2150 rbp r15 rdi rsi))) (set! new-acc2.16180 rax) (set! rdx new-acc2.16180) (set! rsi acc2.16176) (set! rdi new-n.16179) (set! r15 tmp-ra.16211) (jump L.fib_loop.2149 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.16212 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.16212) (jump L.fib_loop.2149 rbp r15 rdi rsi rdx))) (module ((new-frames ()) (locals (tmp-ra.16249))) (define L.+.2154 ((new-frames ()) (locals (tmp.16243 tmp.16220 tmp.16244 tmp-ra.16247 tmp.16242 tmp.16221 tmp.16241))) (begin (set! tmp-ra.16247 r15) (set! tmp.16220 rdi) (set! tmp.16221 rsi) (if (begin (if (begin (begin (set! tmp.16242 tmp.16221) (set! tmp.16242 (bitwise-and tmp.16242 7))) (= tmp.16242 0)) (set! tmp.16241 14) (set! tmp.16241 6)) (!= tmp.16241 6)) (if (begin (if (begin (begin (set! tmp.16244 tmp.16220) (set! tmp.16244 (bitwise-and tmp.16244 7))) (= tmp.16244 0)) (set! tmp.16243 14) (set! tmp.16243 6)) (!= tmp.16243 6)) (begin (set! rax tmp.16220) (set! rax (+ rax tmp.16221)) (jump tmp-ra.16247 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16247 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16247 rbp rax))))) (define L.fib_loop.2153 ((new-frames (() ())) (locals (tmp.16246 acc2.16213 new-acc2.16217 new-n.16216 tmp-ra.16248 acc1.16214 n.16215 tmp.16245))) (begin (set! tmp-ra.16248 r15) (set! n.16215 rdi) (set! acc1.16214 rsi) (set! acc2.16213 rdx) (if (begin (if (= n.16215 0) (set! tmp.16245 14) (set! tmp.16245 6)) (!= tmp.16245 6)) (begin (set! rax acc1.16214) (jump tmp-ra.16248 rbp rax)) (if (begin (if (= n.16215 8) (set! tmp.16246 14) (set! tmp.16246 6)) (!= tmp.16246 6)) (begin (set! rax acc2.16213) (jump tmp-ra.16248 rbp rax)) (begin (return-point L.rp.2155 (begin (set! rsi -8) (set! rdi n.16215) (set! r15 L.rp.2155) (jump L.+.2154 rbp r15 rdi rsi))) (set! new-n.16216 rax) (return-point L.rp.2156 (begin (set! rsi acc2.16213) (set! rdi acc1.16214) (set! r15 L.rp.2156) (jump L.+.2154 rbp r15 rdi rsi))) (set! new-acc2.16217 rax) (set! rdx new-acc2.16217) (set! rsi acc2.16213) (set! rdi new-n.16216) (set! r15 tmp-ra.16248) (jump L.fib_loop.2153 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.16249 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.16249) (jump L.fib_loop.2153 rbp r15 rdi rsi rdx)))) ((module ((new-frames ()) (locals (tmp-ra.16275)) (call-undead ()) (undead-out ((tmp-ra.16275 rbp) (tmp-ra.16275 rdi rbp) (rdi r15 rbp) (rdi r15 rbp)))) (define L.id.2157 ((new-frames ()) (locals (x.16250 tmp-ra.16274)) (undead-out ((rdi tmp-ra.16274 rbp) (x.16250 tmp-ra.16274 rbp) (tmp-ra.16274 rax rbp) (rax rbp))) (call-undead ())) (begin (set! tmp-ra.16274 r15) (set! x.16250 rdi) (set! rax x.16250) (jump tmp-ra.16274 rbp rax))) (begin (set! tmp-ra.16275 r15) (set! rdi 40) (set! r15 tmp-ra.16275) (jump L.id.2157 rbp r15 rdi))) (module ((new-frames (())) (locals (y.16277 tmp-ra.16307)) (call-undead (tmp-ra.16307)) (undead-out ((tmp-ra.16307 rbp) ((rax tmp-ra.16307 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (y.16277 tmp-ra.16307 rbp) (tmp-ra.16307 rsi rbp) (tmp-ra.16307 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))) (define L.+.2159 ((new-frames ()) (locals (tmp.16303 tmp.16280 tmp.16304 tmp-ra.16305 tmp.16302 tmp.16281 tmp.16301)) (undead-out ((rdi rsi tmp-ra.16305 rbp) (rsi tmp.16280 tmp-ra.16305 rbp) (tmp.16280 tmp.16281 tmp-ra.16305 rbp) ((((((tmp.16302 tmp.16280 tmp.16281 tmp-ra.16305 rbp) (tmp.16302 tmp.16280 tmp.16281 tmp-ra.16305 rbp)) (tmp.16280 tmp.16281 tmp-ra.16305 rbp)) (tmp.16301 tmp.16280 tmp.16281 tmp-ra.16305 rbp) (tmp.16301 tmp.16280 tmp.16281 tmp-ra.16305 rbp)) (tmp.16280 tmp.16281 tmp-ra.16305 rbp)) ((((((tmp.16304 tmp.16280 tmp.16281 tmp-ra.16305 rbp) (tmp.16304 tmp.16280 tmp.16281 tmp-ra.16305 rbp)) (tmp.16280 tmp.16281 tmp-ra.16305 rbp)) (tmp.16303 tmp.16280 tmp.16281 tmp-ra.16305 rbp) (tmp.16303 tmp.16280 tmp.16281 tmp-ra.16305 rbp)) (tmp.16280 tmp.16281 tmp-ra.16305 rbp)) ((tmp.16281 rax tmp-ra.16305 rbp) (tmp-ra.16305 rax rbp) (rax rbp)) ((tmp-ra.16305 rax rbp) (rax rbp))) ((tmp-ra.16305 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16305 r15) (set! tmp.16280 rdi) (set! tmp.16281 rsi) (if (begin (if (begin (begin (set! tmp.16302 tmp.16281) (set! tmp.16302 (bitwise-and tmp.16302 7))) (= tmp.16302 0)) (set! tmp.16301 14) (set! tmp.16301 6)) (!= tmp.16301 6)) (if (begin (if (begin (begin (set! tmp.16304 tmp.16280) (set! tmp.16304 (bitwise-and tmp.16304 7))) (= tmp.16304 0)) (set! tmp.16303 14) (set! tmp.16303 6)) (!= tmp.16303 6)) (begin (set! rax tmp.16280) (set! rax (+ rax tmp.16281)) (jump tmp-ra.16305 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16305 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16305 rbp rax))))) (define L.id.2158 ((new-frames ()) (locals (x.16276 tmp-ra.16306)) (undead-out ((rdi tmp-ra.16306 rbp) (x.16276 tmp-ra.16306 rbp) (tmp-ra.16306 rax rbp) (rax rbp))) (call-undead ())) (begin (set! tmp-ra.16306 r15) (set! x.16276 rdi) (set! rax x.16276) (jump tmp-ra.16306 rbp rax))) (begin (set! tmp-ra.16307 r15) (return-point L.rp.2160 (begin (set! rdi 40) (set! r15 L.rp.2160) (jump L.id.2158 rbp r15 rdi))) (set! y.16277 rax) (set! rsi y.16277) (set! rdi 40) (set! r15 tmp-ra.16307) (jump L.+.2159 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.16344)) (call-undead ()) (undead-out ((tmp-ra.16344 rbp) (tmp-ra.16344 rdi rbp) (rdi r15 rbp) (rdi r15 rbp)))) (define L.+.2163 ((new-frames ()) (locals (tmp.16337 tmp.16314 tmp.16338 tmp-ra.16341 tmp.16336 tmp.16315 tmp.16335)) (undead-out ((rdi rsi tmp-ra.16341 rbp) (rsi tmp.16314 tmp-ra.16341 rbp) (tmp.16314 tmp.16315 tmp-ra.16341 rbp) ((((((tmp.16336 tmp.16314 tmp.16315 tmp-ra.16341 rbp) (tmp.16336 tmp.16314 tmp.16315 tmp-ra.16341 rbp)) (tmp.16314 tmp.16315 tmp-ra.16341 rbp)) (tmp.16335 tmp.16314 tmp.16315 tmp-ra.16341 rbp) (tmp.16335 tmp.16314 tmp.16315 tmp-ra.16341 rbp)) (tmp.16314 tmp.16315 tmp-ra.16341 rbp)) ((((((tmp.16338 tmp.16314 tmp.16315 tmp-ra.16341 rbp) (tmp.16338 tmp.16314 tmp.16315 tmp-ra.16341 rbp)) (tmp.16314 tmp.16315 tmp-ra.16341 rbp)) (tmp.16337 tmp.16314 tmp.16315 tmp-ra.16341 rbp) (tmp.16337 tmp.16314 tmp.16315 tmp-ra.16341 rbp)) (tmp.16314 tmp.16315 tmp-ra.16341 rbp)) ((tmp.16315 rax tmp-ra.16341 rbp) (tmp-ra.16341 rax rbp) (rax rbp)) ((tmp-ra.16341 rax rbp) (rax rbp))) ((tmp-ra.16341 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16341 r15) (set! tmp.16314 rdi) (set! tmp.16315 rsi) (if (begin (if (begin (begin (set! tmp.16336 tmp.16315) (set! tmp.16336 (bitwise-and tmp.16336 7))) (= tmp.16336 0)) (set! tmp.16335 14) (set! tmp.16335 6)) (!= tmp.16335 6)) (if (begin (if (begin (begin (set! tmp.16338 tmp.16314) (set! tmp.16338 (bitwise-and tmp.16338 7))) (= tmp.16338 0)) (set! tmp.16337 14) (set! tmp.16337 6)) (!= tmp.16337 6)) (begin (set! rax tmp.16314) (set! rax (+ rax tmp.16315)) (jump tmp-ra.16341 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16341 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16341 rbp rax))))) (define L.odd?.2161 ((new-frames (())) (locals (y.16309 tmp-ra.16342 x.16308 tmp.16339)) (undead-out ((rdi tmp-ra.16342 rbp) (x.16308 tmp-ra.16342 rbp) ((((x.16308 tmp-ra.16342 rbp) (tmp.16339 x.16308 tmp-ra.16342 rbp) (tmp.16339 x.16308 tmp-ra.16342 rbp)) (x.16308 tmp-ra.16342 rbp)) ((tmp-ra.16342 rax rbp) (rax rbp)) (((rax tmp-ra.16342 rbp) ((x.16308 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.16309 tmp-ra.16342 rbp) (tmp-ra.16342 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (call-undead (tmp-ra.16342))) (begin (set! tmp-ra.16342 r15) (set! x.16308 rdi) (if (begin (if (= x.16308 0) (set! tmp.16339 14) (set! tmp.16339 6)) (!= tmp.16339 6)) (begin (set! rax 0) (jump tmp-ra.16342 rbp rax)) (begin (return-point L.rp.2164 (begin (set! rsi -8) (set! rdi x.16308) (set! r15 L.rp.2164) (jump L.+.2163 rbp r15 rdi rsi))) (set! y.16309 rax) (set! rdi y.16309) (set! r15 tmp-ra.16342) (jump L.even?.2162 rbp r15 rdi))))) (define L.even?.2162 ((new-frames (())) (locals (y.16311 tmp-ra.16343 x.16310 tmp.16340)) (undead-out ((rdi tmp-ra.16343 rbp) (x.16310 tmp-ra.16343 rbp) ((((x.16310 tmp-ra.16343 rbp) (tmp.16340 x.16310 tmp-ra.16343 rbp) (tmp.16340 x.16310 tmp-ra.16343 rbp)) (x.16310 tmp-ra.16343 rbp)) ((tmp-ra.16343 rax rbp) (rax rbp)) (((rax tmp-ra.16343 rbp) ((x.16310 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.16311 tmp-ra.16343 rbp) (tmp-ra.16343 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (call-undead (tmp-ra.16343))) (begin (set! tmp-ra.16343 r15) (set! x.16310 rdi) (if (begin (if (= x.16310 0) (set! tmp.16340 14) (set! tmp.16340 6)) (!= tmp.16340 6)) (begin (set! rax 8) (jump tmp-ra.16343 rbp rax)) (begin (return-point L.rp.2165 (begin (set! rsi -8) (set! rdi x.16310) (set! r15 L.rp.2165) (jump L.+.2163 rbp r15 rdi rsi))) (set! y.16311 rax) (set! rdi y.16311) (set! r15 tmp-ra.16343) (jump L.odd?.2161 rbp r15 rdi))))) (begin (set! tmp-ra.16344 r15) (set! rdi 40) (set! r15 tmp-ra.16344) (jump L.even?.2162 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp-ra.16373)) (call-undead ()) (undead-out ((tmp-ra.16373 rbp) (tmp-ra.16373 rax rbp) (rax rbp)))) (define L.zero.2166 ((new-frames ()) (locals (v3.16345 v2.16346 v1.16347 v0.16348 tmp-ra.16372)) (undead-out ((rdi rsi rdx rcx tmp-ra.16372 rbp) (rsi rdx rcx tmp-ra.16372 rbp) (rdx rcx tmp-ra.16372 rbp) (rcx tmp-ra.16372 rbp) (tmp-ra.16372 rbp) (tmp-ra.16372 rax rbp) (rax rbp))) (call-undead ())) (begin (set! tmp-ra.16372 r15) (set! v0.16348 rdi) (set! v1.16347 rsi) (set! v2.16346 rdx) (set! v3.16345 rcx) (set! rax 0) (jump tmp-ra.16372 rbp rax))) (begin (set! tmp-ra.16373 r15) (set! rax 0) (jump tmp-ra.16373 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.16400 y.16375)) (call-undead ()) (undead-out ((tmp-ra.16400 rbp) (tmp-ra.16400 y.16375 rbp) (tmp-ra.16400 y.16375 rdi rbp) (y.16375 rdi r15 rbp) (rdi r15 rbp)))) (define L.id.2167 ((new-frames ()) (locals (x.16374 tmp-ra.16399)) (undead-out ((rdi tmp-ra.16399 rbp) (x.16374 tmp-ra.16399 rbp) (tmp-ra.16399 rax rbp) (rax rbp))) (call-undead ())) (begin (set! tmp-ra.16399 r15) (set! x.16374 rdi) (set! rax x.16374) (jump tmp-ra.16399 rbp rax))) (begin (set! tmp-ra.16400 r15) (set! y.16375 L.id.2167) (set! rdi 40) (set! r15 tmp-ra.16400) (jump y.16375 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp.16430 tmp-ra.16429 y.16403)) (call-undead ()) (undead-out ((tmp-ra.16429 rbp) (((tmp.16430 tmp-ra.16429 rbp) (tmp-ra.16429 rbp)) (tmp-ra.16429 y.16403 rbp) (tmp-ra.16429 y.16403 rbp)) (tmp-ra.16429 y.16403 rdi rbp) (y.16403 rdi r15 rbp) (rdi r15 rbp)))) (define L.id1.2168 ((new-frames ()) (locals (x.16401 tmp-ra.16427)) (undead-out ((rdi tmp-ra.16427 rbp) (x.16401 tmp-ra.16427 rbp) (tmp-ra.16427 rax rbp) (rax rbp))) (call-undead ())) (begin (set! tmp-ra.16427 r15) (set! x.16401 rdi) (set! rax x.16401) (jump tmp-ra.16427 rbp rax))) (define L.id2.2169 ((new-frames ()) (locals (x.16402 tmp-ra.16428)) (undead-out ((rdi tmp-ra.16428 rbp) (x.16402 tmp-ra.16428 rbp) (tmp-ra.16428 rax rbp) (rax rbp))) (call-undead ())) (begin (set! tmp-ra.16428 r15) (set! x.16402 rdi) (set! rax x.16402) (jump tmp-ra.16428 rbp rax))) (begin (set! tmp-ra.16429 r15) (if (begin (set! tmp.16430 14) (!= tmp.16430 6)) (set! y.16403 L.id1.2168) (set! y.16403 L.id2.2169)) (set! rdi 40) (set! r15 tmp-ra.16429) (jump y.16403 rbp r15 rdi))) (module ((new-frames (() ())) (locals (tmp.16464 tmp.16463 tmp-ra.16467)) (call-undead (tmp.16463 tmp-ra.16467)) (undead-out ((tmp-ra.16467 rbp) ((rax tmp-ra.16467 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.16463 tmp-ra.16467 rbp) ((rax tmp.16463 tmp-ra.16467 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.16464 tmp.16463 tmp-ra.16467 rbp) (tmp.16463 tmp-ra.16467 rsi rbp) (tmp-ra.16467 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))) (define L.*.2171 ((new-frames ()) (locals (tmp.16456 tmp.16431 tmp.16457 tmp.16458 tmp-ra.16465 tmp.16455 tmp.16432 tmp.16454)) (undead-out ((rdi rsi tmp-ra.16465 rbp) (rsi tmp.16431 tmp-ra.16465 rbp) (tmp.16432 tmp.16431 tmp-ra.16465 rbp) ((((((tmp.16455 tmp.16432 tmp.16431 tmp-ra.16465 rbp) (tmp.16455 tmp.16432 tmp.16431 tmp-ra.16465 rbp)) (tmp.16432 tmp.16431 tmp-ra.16465 rbp)) (tmp.16454 tmp.16432 tmp.16431 tmp-ra.16465 rbp) (tmp.16454 tmp.16432 tmp.16431 tmp-ra.16465 rbp)) (tmp.16432 tmp.16431 tmp-ra.16465 rbp)) ((((((tmp.16457 tmp.16432 tmp.16431 tmp-ra.16465 rbp) (tmp.16457 tmp.16432 tmp.16431 tmp-ra.16465 rbp)) (tmp.16432 tmp.16431 tmp-ra.16465 rbp)) (tmp.16456 tmp.16432 tmp.16431 tmp-ra.16465 rbp) (tmp.16456 tmp.16432 tmp.16431 tmp-ra.16465 rbp)) (tmp.16432 tmp.16431 tmp-ra.16465 rbp)) ((tmp.16458 tmp.16431 tmp-ra.16465 rbp) (tmp.16431 tmp.16458 tmp-ra.16465 rbp) (tmp.16458 rax tmp-ra.16465 rbp) (tmp-ra.16465 rax rbp) (rax rbp)) ((tmp-ra.16465 rax rbp) (rax rbp))) ((tmp-ra.16465 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16465 r15) (set! tmp.16431 rdi) (set! tmp.16432 rsi) (if (begin (if (begin (begin (set! tmp.16455 tmp.16432) (set! tmp.16455 (bitwise-and tmp.16455 7))) (= tmp.16455 0)) (set! tmp.16454 14) (set! tmp.16454 6)) (!= tmp.16454 6)) (if (begin (if (begin (begin (set! tmp.16457 tmp.16431) (set! tmp.16457 (bitwise-and tmp.16457 7))) (= tmp.16457 0)) (set! tmp.16456 14) (set! tmp.16456 6)) (!= tmp.16456 6)) (begin (set! tmp.16458 tmp.16432) (set! tmp.16458 (arithmetic-shift-right tmp.16458 3)) (set! rax tmp.16431) (set! rax (* rax tmp.16458)) (jump tmp-ra.16465 rbp rax)) (begin (set! rax 62) (jump tmp-ra.16465 rbp rax))) (begin (set! rax 62) (jump tmp-ra.16465 rbp rax))))) (define L.+.2170 ((new-frames ()) (locals (tmp.16461 tmp.16433 tmp.16462 tmp-ra.16466 tmp.16460 tmp.16434 tmp.16459)) (undead-out ((rdi rsi tmp-ra.16466 rbp) (rsi tmp.16433 tmp-ra.16466 rbp) (tmp.16433 tmp.16434 tmp-ra.16466 rbp) ((((((tmp.16460 tmp.16433 tmp.16434 tmp-ra.16466 rbp) (tmp.16460 tmp.16433 tmp.16434 tmp-ra.16466 rbp)) (tmp.16433 tmp.16434 tmp-ra.16466 rbp)) (tmp.16459 tmp.16433 tmp.16434 tmp-ra.16466 rbp) (tmp.16459 tmp.16433 tmp.16434 tmp-ra.16466 rbp)) (tmp.16433 tmp.16434 tmp-ra.16466 rbp)) ((((((tmp.16462 tmp.16433 tmp.16434 tmp-ra.16466 rbp) (tmp.16462 tmp.16433 tmp.16434 tmp-ra.16466 rbp)) (tmp.16433 tmp.16434 tmp-ra.16466 rbp)) (tmp.16461 tmp.16433 tmp.16434 tmp-ra.16466 rbp) (tmp.16461 tmp.16433 tmp.16434 tmp-ra.16466 rbp)) (tmp.16433 tmp.16434 tmp-ra.16466 rbp)) ((tmp.16434 rax tmp-ra.16466 rbp) (tmp-ra.16466 rax rbp) (rax rbp)) ((tmp-ra.16466 rax rbp) (rax rbp))) ((tmp-ra.16466 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16466 r15) (set! tmp.16433 rdi) (set! tmp.16434 rsi) (if (begin (if (begin (begin (set! tmp.16460 tmp.16434) (set! tmp.16460 (bitwise-and tmp.16460 7))) (= tmp.16460 0)) (set! tmp.16459 14) (set! tmp.16459 6)) (!= tmp.16459 6)) (if (begin (if (begin (begin (set! tmp.16462 tmp.16433) (set! tmp.16462 (bitwise-and tmp.16462 7))) (= tmp.16462 0)) (set! tmp.16461 14) (set! tmp.16461 6)) (!= tmp.16461 6)) (begin (set! rax tmp.16433) (set! rax (+ rax tmp.16434)) (jump tmp-ra.16466 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16466 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16466 rbp rax))))) (begin (set! tmp-ra.16467 r15) (return-point L.rp.2172 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2172) (jump L.+.2170 rbp r15 rdi rsi))) (set! tmp.16463 rax) (return-point L.rp.2173 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2173) (jump L.*.2171 rbp r15 rdi rsi))) (set! tmp.16464 rax) (set! rsi tmp.16464) (set! rdi tmp.16463) (set! r15 tmp-ra.16467) (jump L.+.2170 rbp r15 rdi rsi))) (module ((new-frames (())) (locals (tmp-ra.16498 tmp.16496 tmp.16495)) (call-undead (tmp-ra.16498)) (undead-out ((tmp-ra.16498 rbp) (((((((rax tmp-ra.16498 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.16496 tmp-ra.16498 rbp)) (tmp-ra.16498 rbp)) (tmp.16495 tmp-ra.16498 rbp) (tmp.16495 tmp-ra.16498 rbp)) (tmp-ra.16498 rbp)) ((tmp-ra.16498 rax rbp) (rax rbp)) ((tmp-ra.16498 rax rbp) (rax rbp)))))) (define L.+.2174 ((new-frames ()) (locals (tmp.16493 tmp.16470 tmp.16494 tmp-ra.16497 tmp.16492 tmp.16471 tmp.16491)) (undead-out ((rdi rsi tmp-ra.16497 rbp) (rsi tmp.16470 tmp-ra.16497 rbp) (tmp.16470 tmp.16471 tmp-ra.16497 rbp) ((((((tmp.16492 tmp.16470 tmp.16471 tmp-ra.16497 rbp) (tmp.16492 tmp.16470 tmp.16471 tmp-ra.16497 rbp)) (tmp.16470 tmp.16471 tmp-ra.16497 rbp)) (tmp.16491 tmp.16470 tmp.16471 tmp-ra.16497 rbp) (tmp.16491 tmp.16470 tmp.16471 tmp-ra.16497 rbp)) (tmp.16470 tmp.16471 tmp-ra.16497 rbp)) ((((((tmp.16494 tmp.16470 tmp.16471 tmp-ra.16497 rbp) (tmp.16494 tmp.16470 tmp.16471 tmp-ra.16497 rbp)) (tmp.16470 tmp.16471 tmp-ra.16497 rbp)) (tmp.16493 tmp.16470 tmp.16471 tmp-ra.16497 rbp) (tmp.16493 tmp.16470 tmp.16471 tmp-ra.16497 rbp)) (tmp.16470 tmp.16471 tmp-ra.16497 rbp)) ((tmp.16471 rax tmp-ra.16497 rbp) (tmp-ra.16497 rax rbp) (rax rbp)) ((tmp-ra.16497 rax rbp) (rax rbp))) ((tmp-ra.16497 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16497 r15) (set! tmp.16470 rdi) (set! tmp.16471 rsi) (if (begin (if (begin (begin (set! tmp.16492 tmp.16471) (set! tmp.16492 (bitwise-and tmp.16492 7))) (= tmp.16492 0)) (set! tmp.16491 14) (set! tmp.16491 6)) (!= tmp.16491 6)) (if (begin (if (begin (begin (set! tmp.16494 tmp.16470) (set! tmp.16494 (bitwise-and tmp.16494 7))) (= tmp.16494 0)) (set! tmp.16493 14) (set! tmp.16493 6)) (!= tmp.16493 6)) (begin (set! rax tmp.16470) (set! rax (+ rax tmp.16471)) (jump tmp-ra.16497 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16497 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16497 rbp rax))))) (begin (set! tmp-ra.16498 r15) (if (begin (if (begin (begin (return-point L.rp.2175 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2175) (jump L.+.2174 rbp r15 rdi rsi))) (set! tmp.16496 rax)) (= tmp.16496 88)) (set! tmp.16495 14) (set! tmp.16495 6)) (!= tmp.16495 6)) (begin (set! rax 32) (jump tmp-ra.16498 rbp rax)) (begin (set! rax 48) (jump tmp-ra.16498 rbp rax))))) (module ((new-frames ()) (locals (tmp-ra.16522)) (call-undead ()) (undead-out ((tmp-ra.16522 rbp) (tmp-ra.16522 rax rbp) (rax rbp)))) (begin (set! tmp-ra.16522 r15) (set! rax 14) (jump tmp-ra.16522 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.16546)) (call-undead ()) (undead-out ((tmp-ra.16546 rbp) (tmp-ra.16546 rax rbp) (rax rbp)))) (begin (set! tmp-ra.16546 r15) (set! rax 6) (jump tmp-ra.16546 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.16570)) (call-undead ()) (undead-out ((tmp-ra.16570 rbp) (tmp-ra.16570 rax rbp) (rax rbp)))) (begin (set! tmp-ra.16570 r15) (set! rax 22) (jump tmp-ra.16570 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.16636)) (call-undead ()) (undead-out ((tmp-ra.16636 rbp) (tmp-ra.16636 fv0 rbp) (tmp-ra.16636 fv0 r9 rbp) (tmp-ra.16636 fv0 r9 r8 rbp) (tmp-ra.16636 fv0 r9 r8 rcx rbp) (tmp-ra.16636 fv0 r9 r8 rcx rdx rbp) (tmp-ra.16636 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.16636 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp)))) (define L.+.2179 ((new-frames ()) (locals (tmp.16627 tmp.16604 tmp.16628 tmp-ra.16630 tmp.16626 tmp.16605 tmp.16625)) (undead-out ((rdi rsi tmp-ra.16630 rbp) (rsi tmp.16604 tmp-ra.16630 rbp) (tmp.16604 tmp.16605 tmp-ra.16630 rbp) ((((((tmp.16626 tmp.16604 tmp.16605 tmp-ra.16630 rbp) (tmp.16626 tmp.16604 tmp.16605 tmp-ra.16630 rbp)) (tmp.16604 tmp.16605 tmp-ra.16630 rbp)) (tmp.16625 tmp.16604 tmp.16605 tmp-ra.16630 rbp) (tmp.16625 tmp.16604 tmp.16605 tmp-ra.16630 rbp)) (tmp.16604 tmp.16605 tmp-ra.16630 rbp)) ((((((tmp.16628 tmp.16604 tmp.16605 tmp-ra.16630 rbp) (tmp.16628 tmp.16604 tmp.16605 tmp-ra.16630 rbp)) (tmp.16604 tmp.16605 tmp-ra.16630 rbp)) (tmp.16627 tmp.16604 tmp.16605 tmp-ra.16630 rbp) (tmp.16627 tmp.16604 tmp.16605 tmp-ra.16630 rbp)) (tmp.16604 tmp.16605 tmp-ra.16630 rbp)) ((tmp.16605 rax tmp-ra.16630 rbp) (tmp-ra.16630 rax rbp) (rax rbp)) ((tmp-ra.16630 rax rbp) (rax rbp))) ((tmp-ra.16630 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16630 r15) (set! tmp.16604 rdi) (set! tmp.16605 rsi) (if (begin (if (begin (begin (set! tmp.16626 tmp.16605) (set! tmp.16626 (bitwise-and tmp.16626 7))) (= tmp.16626 0)) (set! tmp.16625 14) (set! tmp.16625 6)) (!= tmp.16625 6)) (if (begin (if (begin (begin (set! tmp.16628 tmp.16604) (set! tmp.16628 (bitwise-and tmp.16628 7))) (= tmp.16628 0)) (set! tmp.16627 14) (set! tmp.16627 6)) (!= tmp.16627 6)) (begin (set! rax tmp.16604) (set! rax (+ rax tmp.16605)) (jump tmp-ra.16630 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16630 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16630 rbp rax))))) (define L.F.2176 ((new-frames ((nfv.16632 nfv.16633))) (locals (tmp.16629 nfv.16633 nfv.16632 g.16571 f.16572 e.16573 d.16574 c.16575 b.16576 a.16577 tmp-ra.16631)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 tmp-ra.16631 rbp) (rsi rdx rcx r8 r9 fv0 a.16577 tmp-ra.16631 rbp) (rdx rcx r8 r9 fv0 a.16577 b.16576 tmp-ra.16631 rbp) (rcx r8 r9 fv0 a.16577 b.16576 c.16575 tmp-ra.16631 rbp) (r8 r9 fv0 a.16577 b.16576 c.16575 d.16574 tmp-ra.16631 rbp) (r9 fv0 a.16577 b.16576 c.16575 d.16574 e.16573 tmp-ra.16631 rbp) (fv0 a.16577 b.16576 c.16575 d.16574 e.16573 f.16572 tmp-ra.16631 rbp) (a.16577 b.16576 c.16575 d.16574 e.16573 f.16572 g.16571 tmp-ra.16631 rbp) ((rax tmp-ra.16631 rbp) ((g.16571 f.16572 e.16573 d.16574 c.16575 b.16576 a.16577 nfv.16633 rbp) (f.16572 e.16573 d.16574 c.16575 b.16576 a.16577 nfv.16633 nfv.16632 rbp) (e.16573 d.16574 c.16575 b.16576 a.16577 nfv.16633 nfv.16632 r9 rbp) (d.16574 c.16575 b.16576 a.16577 nfv.16633 nfv.16632 r9 r8 rbp) (c.16575 b.16576 a.16577 nfv.16633 nfv.16632 r9 r8 rcx rbp) (b.16576 a.16577 nfv.16633 nfv.16632 r9 r8 rcx rdx rbp) (a.16577 nfv.16633 nfv.16632 r9 r8 rcx rdx rsi rbp) (nfv.16633 nfv.16632 r9 r8 rcx rdx rsi rdi rbp) (nfv.16633 nfv.16632 r9 r8 rcx rdx rsi rdi r15 rbp) (nfv.16633 nfv.16632 r9 r8 rcx rdx rsi rdi r15 rbp))) (tmp.16629 tmp-ra.16631 rbp) (tmp-ra.16631 rsi rbp) (tmp-ra.16631 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (call-undead (tmp-ra.16631))) (begin (set! tmp-ra.16631 r15) (set! a.16577 rdi) (set! b.16576 rsi) (set! c.16575 rdx) (set! d.16574 rcx) (set! e.16573 r8) (set! f.16572 r9) (set! g.16571 fv0) (return-point L.rp.2180 (begin (set! nfv.16633 64) (set! nfv.16632 g.16571) (set! r9 f.16572) (set! r8 e.16573) (set! rcx d.16574) (set! rdx c.16575) (set! rsi b.16576) (set! rdi a.16577) (set! r15 L.rp.2180) (jump L.G.2177 rbp r15 rdi rsi rdx rcx r8 r9 nfv.16632 nfv.16633))) (set! tmp.16629 rax) (set! rsi tmp.16629) (set! rdi 80) (set! r15 tmp-ra.16631) (jump L.+.2179 rbp r15 rdi rsi))) (define L.G.2177 ((new-frames ()) (locals (h.16578 g.16579 f.16580 e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 tmp-ra.16634 rbp) (rsi rdx rcx r8 r9 fv0 fv1 a.16585 tmp-ra.16634 rbp) (rdx rcx r8 r9 fv0 fv1 b.16584 a.16585 tmp-ra.16634 rbp) (rcx r8 r9 fv0 fv1 c.16583 b.16584 a.16585 tmp-ra.16634 rbp) (r8 r9 fv0 fv1 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 rbp) (r9 fv0 fv1 e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 rbp) (fv0 fv1 f.16580 e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 rbp) (fv1 g.16579 f.16580 e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 rbp) (h.16578 g.16579 f.16580 e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 rbp) (h.16578 g.16579 f.16580 e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 fv2 rbp) (g.16579 f.16580 e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 fv2 fv1 rbp) (f.16580 e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 fv2 fv1 fv0 rbp) (e.16581 d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 fv2 fv1 fv0 r9 rbp) (d.16582 c.16583 b.16584 a.16585 tmp-ra.16634 fv2 fv1 fv0 r9 r8 rbp) (c.16583 b.16584 a.16585 tmp-ra.16634 fv2 fv1 fv0 r9 r8 rcx rbp) (b.16584 a.16585 tmp-ra.16634 fv2 fv1 fv0 r9 r8 rcx rdx rbp) (a.16585 tmp-ra.16634 fv2 fv1 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.16634 fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (call-undead ())) (begin (set! tmp-ra.16634 r15) (set! a.16585 rdi) (set! b.16584 rsi) (set! c.16583 rdx) (set! d.16582 rcx) (set! e.16581 r8) (set! f.16580 r9) (set! g.16579 fv0) (set! h.16578 fv1) (set! fv2 72) (set! fv1 h.16578) (set! fv0 g.16579) (set! r9 f.16580) (set! r8 e.16581) (set! rcx d.16582) (set! rdx c.16583) (set! rsi b.16584) (set! rdi a.16585) (set! r15 tmp-ra.16634) (jump L.H.2178 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))) (define L.H.2178 ((new-frames (() () () () () () ())) (locals (r7.16601 r6.16600 r5.16599 r4.16598 r3.16597 r2.16596 r1.16595 j.16586 h.16587 g.16588 f.16589 e.16590 d.16591 c.16592 b.16593 a.16594 tmp-ra.16635)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.16635 rbp) (rsi rdx rcx r8 r9 fv0 fv1 fv2 a.16594 tmp-ra.16635 rbp) (rdx rcx r8 r9 fv0 fv1 fv2 a.16594 b.16593 tmp-ra.16635 rbp) (rcx r8 r9 fv0 fv1 fv2 a.16594 b.16593 c.16592 tmp-ra.16635 rbp) (r8 r9 fv0 fv1 fv2 a.16594 b.16593 c.16592 d.16591 tmp-ra.16635 rbp) (r9 fv0 fv1 fv2 a.16594 b.16593 c.16592 d.16591 e.16590 tmp-ra.16635 rbp) (fv0 fv1 fv2 a.16594 b.16593 c.16592 d.16591 e.16590 f.16589 tmp-ra.16635 rbp) (fv1 fv2 a.16594 b.16593 c.16592 d.16591 e.16590 f.16589 g.16588 tmp-ra.16635 rbp) (fv2 a.16594 b.16593 c.16592 d.16591 e.16590 f.16589 g.16588 h.16587 tmp-ra.16635 rbp) (a.16594 b.16593 c.16592 d.16591 e.16590 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((rax c.16592 d.16591 e.16590 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((a.16594 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r1.16595 c.16592 d.16591 e.16590 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((rax d.16591 e.16590 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((r1.16595 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r2.16596 d.16591 e.16590 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((rax e.16590 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((r2.16596 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r3.16597 e.16590 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((rax f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((r3.16597 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r4.16598 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((rax g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((r4.16598 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r5.16599 g.16588 h.16587 j.16586 tmp-ra.16635 rbp) ((rax h.16587 j.16586 tmp-ra.16635 rbp) ((r5.16599 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r6.16600 h.16587 j.16586 tmp-ra.16635 rbp) ((rax j.16586 tmp-ra.16635 rbp) ((r6.16600 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (j.16586 r7.16601 tmp-ra.16635 rbp) (r7.16601 tmp-ra.16635 rsi rbp) (tmp-ra.16635 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (call-undead (c.16592 d.16591 e.16590 f.16589 g.16588 h.16587 j.16586 tmp-ra.16635))) (begin (set! tmp-ra.16635 r15) (set! a.16594 rdi) (set! b.16593 rsi) (set! c.16592 rdx) (set! d.16591 rcx) (set! e.16590 r8) (set! f.16589 r9) (set! g.16588 fv0) (set! h.16587 fv1) (set! j.16586 fv2) (return-point L.rp.2181 (begin (set! rsi b.16593) (set! rdi a.16594) (set! r15 L.rp.2181) (jump L.+.2179 rbp r15 rdi rsi))) (set! r1.16595 rax) (return-point L.rp.2182 (begin (set! rsi c.16592) (set! rdi r1.16595) (set! r15 L.rp.2182) (jump L.+.2179 rbp r15 rdi rsi))) (set! r2.16596 rax) (return-point L.rp.2183 (begin (set! rsi d.16591) (set! rdi r2.16596) (set! r15 L.rp.2183) (jump L.+.2179 rbp r15 rdi rsi))) (set! r3.16597 rax) (return-point L.rp.2184 (begin (set! rsi e.16590) (set! rdi r3.16597) (set! r15 L.rp.2184) (jump L.+.2179 rbp r15 rdi rsi))) (set! r4.16598 rax) (return-point L.rp.2185 (begin (set! rsi f.16589) (set! rdi r4.16598) (set! r15 L.rp.2185) (jump L.+.2179 rbp r15 rdi rsi))) (set! r5.16599 rax) (return-point L.rp.2186 (begin (set! rsi g.16588) (set! rdi r5.16599) (set! r15 L.rp.2186) (jump L.+.2179 rbp r15 rdi rsi))) (set! r6.16600 rax) (return-point L.rp.2187 (begin (set! rsi h.16587) (set! rdi r6.16600) (set! r15 L.rp.2187) (jump L.+.2179 rbp r15 rdi rsi))) (set! r7.16601 rax) (set! rsi j.16586) (set! rdi r7.16601) (set! r15 tmp-ra.16635) (jump L.+.2179 rbp r15 rdi rsi))) (begin (set! tmp-ra.16636 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.16636) (jump L.F.2176 rbp r15 rdi rsi rdx rcx r8 r9 fv0))) (module ((new-frames ()) (locals (tmp-ra.16669)) (call-undead ()) (undead-out ((tmp-ra.16669 rbp) (tmp-ra.16669 rsi rbp) (tmp-ra.16669 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))) (define L.<.2189 ((new-frames ()) (locals (tmp.16664 tmp.16645 tmp.16665 tmp-ra.16667 tmp.16663 tmp.16646 tmp.16662)) (undead-out ((rdi rsi tmp-ra.16667 rbp) (rsi tmp.16645 tmp-ra.16667 rbp) (tmp.16646 tmp.16645 tmp-ra.16667 rbp) ((((((tmp.16663 tmp.16646 tmp.16645 tmp-ra.16667 rbp) (tmp.16663 tmp.16646 tmp.16645 tmp-ra.16667 rbp)) (tmp.16646 tmp.16645 tmp-ra.16667 rbp)) (tmp.16662 tmp.16646 tmp.16645 tmp-ra.16667 rbp) (tmp.16662 tmp.16646 tmp.16645 tmp-ra.16667 rbp)) (tmp.16646 tmp.16645 tmp-ra.16667 rbp)) ((((((tmp.16665 tmp.16646 tmp.16645 tmp-ra.16667 rbp) (tmp.16665 tmp.16646 tmp.16645 tmp-ra.16667 rbp)) (tmp.16646 tmp.16645 tmp-ra.16667 rbp)) (tmp.16664 tmp.16646 tmp.16645 tmp-ra.16667 rbp) (tmp.16664 tmp.16646 tmp.16645 tmp-ra.16667 rbp)) (tmp.16646 tmp.16645 tmp-ra.16667 rbp)) ((tmp-ra.16667 rbp) ((tmp-ra.16667 rax rbp) (rax rbp)) ((tmp-ra.16667 rax rbp) (rax rbp))) ((tmp-ra.16667 rax rbp) (rax rbp))) ((tmp-ra.16667 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16667 r15) (set! tmp.16645 rdi) (set! tmp.16646 rsi) (if (begin (if (begin (begin (set! tmp.16663 tmp.16646) (set! tmp.16663 (bitwise-and tmp.16663 7))) (= tmp.16663 0)) (set! tmp.16662 14) (set! tmp.16662 6)) (!= tmp.16662 6)) (if (begin (if (begin (begin (set! tmp.16665 tmp.16645) (set! tmp.16665 (bitwise-and tmp.16665 7))) (= tmp.16665 0)) (set! tmp.16664 14) (set! tmp.16664 6)) (!= tmp.16664 6)) (if (< tmp.16645 tmp.16646) (begin (set! rax 14) (jump tmp-ra.16667 rbp rax)) (begin (set! rax 6) (jump tmp-ra.16667 rbp rax))) (begin (set! rax 830) (jump tmp-ra.16667 rbp rax))) (begin (set! rax 830) (jump tmp-ra.16667 rbp rax))))) (define L.swap.2188 ((new-frames (())) (locals (tmp-ra.16668 x.16638 y.16637 tmp.16666)) (undead-out ((rdi rsi tmp-ra.16668 rbp) (rsi x.16638 tmp-ra.16668 rbp) (y.16637 x.16638 tmp-ra.16668 rbp) (((((rax y.16637 x.16638 tmp-ra.16668 rbp) ((y.16637 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.16666 y.16637 x.16638 tmp-ra.16668 rbp)) (y.16637 x.16638 tmp-ra.16668 rbp)) ((tmp-ra.16668 rax rbp) (rax rbp)) ((y.16637 tmp-ra.16668 rsi rbp) (tmp-ra.16668 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (y.16637 x.16638 tmp-ra.16668))) (begin (set! tmp-ra.16668 r15) (set! x.16638 rdi) (set! y.16637 rsi) (if (begin (begin (return-point L.rp.2190 (begin (set! rsi x.16638) (set! rdi y.16637) (set! r15 L.rp.2190) (jump L.<.2189 rbp r15 rdi rsi))) (set! tmp.16666 rax)) (!= tmp.16666 6)) (begin (set! rax x.16638) (jump tmp-ra.16668 rbp rax)) (begin (set! rsi x.16638) (set! rdi y.16637) (set! r15 tmp-ra.16668) (jump L.swap.2188 rbp r15 rdi rsi))))) (begin (set! tmp-ra.16669 r15) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.16669) (jump L.swap.2188 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.16710)) (call-undead ()) (undead-out ((tmp-ra.16710 rbp) (tmp-ra.16710 rsi rbp) (tmp-ra.16710 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))) (define L.*.2193 ((new-frames ()) (locals (tmp.16697 tmp.16672 tmp.16698 tmp.16699 tmp-ra.16707 tmp.16696 tmp.16673 tmp.16695)) (undead-out ((rdi rsi tmp-ra.16707 rbp) (rsi tmp.16672 tmp-ra.16707 rbp) (tmp.16673 tmp.16672 tmp-ra.16707 rbp) ((((((tmp.16696 tmp.16673 tmp.16672 tmp-ra.16707 rbp) (tmp.16696 tmp.16673 tmp.16672 tmp-ra.16707 rbp)) (tmp.16673 tmp.16672 tmp-ra.16707 rbp)) (tmp.16695 tmp.16673 tmp.16672 tmp-ra.16707 rbp) (tmp.16695 tmp.16673 tmp.16672 tmp-ra.16707 rbp)) (tmp.16673 tmp.16672 tmp-ra.16707 rbp)) ((((((tmp.16698 tmp.16673 tmp.16672 tmp-ra.16707 rbp) (tmp.16698 tmp.16673 tmp.16672 tmp-ra.16707 rbp)) (tmp.16673 tmp.16672 tmp-ra.16707 rbp)) (tmp.16697 tmp.16673 tmp.16672 tmp-ra.16707 rbp) (tmp.16697 tmp.16673 tmp.16672 tmp-ra.16707 rbp)) (tmp.16673 tmp.16672 tmp-ra.16707 rbp)) ((tmp.16699 tmp.16672 tmp-ra.16707 rbp) (tmp.16672 tmp.16699 tmp-ra.16707 rbp) (tmp.16699 rax tmp-ra.16707 rbp) (tmp-ra.16707 rax rbp) (rax rbp)) ((tmp-ra.16707 rax rbp) (rax rbp))) ((tmp-ra.16707 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16707 r15) (set! tmp.16672 rdi) (set! tmp.16673 rsi) (if (begin (if (begin (begin (set! tmp.16696 tmp.16673) (set! tmp.16696 (bitwise-and tmp.16696 7))) (= tmp.16696 0)) (set! tmp.16695 14) (set! tmp.16695 6)) (!= tmp.16695 6)) (if (begin (if (begin (begin (set! tmp.16698 tmp.16672) (set! tmp.16698 (bitwise-and tmp.16698 7))) (= tmp.16698 0)) (set! tmp.16697 14) (set! tmp.16697 6)) (!= tmp.16697 6)) (begin (set! tmp.16699 tmp.16673) (set! tmp.16699 (arithmetic-shift-right tmp.16699 3)) (set! rax tmp.16672) (set! rax (* rax tmp.16699)) (jump tmp-ra.16707 rbp rax)) (begin (set! rax 62) (jump tmp-ra.16707 rbp rax))) (begin (set! rax 62) (jump tmp-ra.16707 rbp rax))))) (define L.-.2192 ((new-frames ()) (locals (tmp.16702 tmp.16676 tmp.16703 tmp-ra.16708 tmp.16701 tmp.16677 tmp.16700)) (undead-out ((rdi rsi tmp-ra.16708 rbp) (rsi tmp.16676 tmp-ra.16708 rbp) (tmp.16676 tmp.16677 tmp-ra.16708 rbp) ((((((tmp.16701 tmp.16676 tmp.16677 tmp-ra.16708 rbp) (tmp.16701 tmp.16676 tmp.16677 tmp-ra.16708 rbp)) (tmp.16676 tmp.16677 tmp-ra.16708 rbp)) (tmp.16700 tmp.16676 tmp.16677 tmp-ra.16708 rbp) (tmp.16700 tmp.16676 tmp.16677 tmp-ra.16708 rbp)) (tmp.16676 tmp.16677 tmp-ra.16708 rbp)) ((((((tmp.16703 tmp.16676 tmp.16677 tmp-ra.16708 rbp) (tmp.16703 tmp.16676 tmp.16677 tmp-ra.16708 rbp)) (tmp.16676 tmp.16677 tmp-ra.16708 rbp)) (tmp.16702 tmp.16676 tmp.16677 tmp-ra.16708 rbp) (tmp.16702 tmp.16676 tmp.16677 tmp-ra.16708 rbp)) (tmp.16676 tmp.16677 tmp-ra.16708 rbp)) ((tmp.16677 rax tmp-ra.16708 rbp) (tmp-ra.16708 rax rbp) (rax rbp)) ((tmp-ra.16708 rax rbp) (rax rbp))) ((tmp-ra.16708 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16708 r15) (set! tmp.16676 rdi) (set! tmp.16677 rsi) (if (begin (if (begin (begin (set! tmp.16701 tmp.16677) (set! tmp.16701 (bitwise-and tmp.16701 7))) (= tmp.16701 0)) (set! tmp.16700 14) (set! tmp.16700 6)) (!= tmp.16700 6)) (if (begin (if (begin (begin (set! tmp.16703 tmp.16676) (set! tmp.16703 (bitwise-and tmp.16703 7))) (= tmp.16703 0)) (set! tmp.16702 14) (set! tmp.16702 6)) (!= tmp.16702 6)) (begin (set! rax tmp.16676) (set! rax (- rax tmp.16677)) (jump tmp-ra.16708 rbp rax)) (begin (set! rax 574) (jump tmp-ra.16708 rbp rax))) (begin (set! rax 574) (jump tmp-ra.16708 rbp rax))))) (define L.fact_loop.2191 ((new-frames (() ())) (locals (tmp.16705 tmp.16706 tmp-ra.16709 acc.16670 n.16671 tmp.16704)) (undead-out ((rdi rsi tmp-ra.16709 rbp) (rsi n.16671 tmp-ra.16709 rbp) (n.16671 acc.16670 tmp-ra.16709 rbp) ((((n.16671 acc.16670 tmp-ra.16709 rbp) (tmp.16704 n.16671 acc.16670 tmp-ra.16709 rbp) (tmp.16704 n.16671 acc.16670 tmp-ra.16709 rbp)) (n.16671 acc.16670 tmp-ra.16709 rbp)) ((tmp-ra.16709 rax rbp) (rax rbp)) (((rax acc.16670 n.16671 tmp-ra.16709 rbp) ((n.16671 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc.16670 n.16671 tmp.16705 tmp-ra.16709 rbp) ((rax tmp.16705 tmp-ra.16709 rbp) ((acc.16670 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.16706 tmp.16705 tmp-ra.16709 rbp) (tmp.16705 tmp-ra.16709 rsi rbp) (tmp-ra.16709 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (tmp.16705 acc.16670 n.16671 tmp-ra.16709))) (begin (set! tmp-ra.16709 r15) (set! n.16671 rdi) (set! acc.16670 rsi) (if (begin (if (= n.16671 0) (set! tmp.16704 14) (set! tmp.16704 6)) (!= tmp.16704 6)) (begin (set! rax acc.16670) (jump tmp-ra.16709 rbp rax)) (begin (return-point L.rp.2194 (begin (set! rsi 8) (set! rdi n.16671) (set! r15 L.rp.2194) (jump L.-.2192 rbp r15 rdi rsi))) (set! tmp.16705 rax) (return-point L.rp.2195 (begin (set! rsi n.16671) (set! rdi acc.16670) (set! r15 L.rp.2195) (jump L.*.2193 rbp r15 rdi rsi))) (set! tmp.16706 rax) (set! rsi tmp.16706) (set! rdi tmp.16705) (set! r15 tmp-ra.16709) (jump L.fact_loop.2191 rbp r15 rdi rsi))))) (begin (set! tmp-ra.16710 r15) (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.16710) (jump L.fact_loop.2191 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.16750)) (call-undead ()) (undead-out ((tmp-ra.16750 rbp) (tmp-ra.16750 rdi rbp) (rdi r15 rbp) (rdi r15 rbp)))) (define L.*.2198 ((new-frames ()) (locals (tmp.16737 tmp.16712 tmp.16738 tmp.16739 tmp-ra.16747 tmp.16736 tmp.16713 tmp.16735)) (undead-out ((rdi rsi tmp-ra.16747 rbp) (rsi tmp.16712 tmp-ra.16747 rbp) (tmp.16713 tmp.16712 tmp-ra.16747 rbp) ((((((tmp.16736 tmp.16713 tmp.16712 tmp-ra.16747 rbp) (tmp.16736 tmp.16713 tmp.16712 tmp-ra.16747 rbp)) (tmp.16713 tmp.16712 tmp-ra.16747 rbp)) (tmp.16735 tmp.16713 tmp.16712 tmp-ra.16747 rbp) (tmp.16735 tmp.16713 tmp.16712 tmp-ra.16747 rbp)) (tmp.16713 tmp.16712 tmp-ra.16747 rbp)) ((((((tmp.16738 tmp.16713 tmp.16712 tmp-ra.16747 rbp) (tmp.16738 tmp.16713 tmp.16712 tmp-ra.16747 rbp)) (tmp.16713 tmp.16712 tmp-ra.16747 rbp)) (tmp.16737 tmp.16713 tmp.16712 tmp-ra.16747 rbp) (tmp.16737 tmp.16713 tmp.16712 tmp-ra.16747 rbp)) (tmp.16713 tmp.16712 tmp-ra.16747 rbp)) ((tmp.16739 tmp.16712 tmp-ra.16747 rbp) (tmp.16712 tmp.16739 tmp-ra.16747 rbp) (tmp.16739 rax tmp-ra.16747 rbp) (tmp-ra.16747 rax rbp) (rax rbp)) ((tmp-ra.16747 rax rbp) (rax rbp))) ((tmp-ra.16747 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16747 r15) (set! tmp.16712 rdi) (set! tmp.16713 rsi) (if (begin (if (begin (begin (set! tmp.16736 tmp.16713) (set! tmp.16736 (bitwise-and tmp.16736 7))) (= tmp.16736 0)) (set! tmp.16735 14) (set! tmp.16735 6)) (!= tmp.16735 6)) (if (begin (if (begin (begin (set! tmp.16738 tmp.16712) (set! tmp.16738 (bitwise-and tmp.16738 7))) (= tmp.16738 0)) (set! tmp.16737 14) (set! tmp.16737 6)) (!= tmp.16737 6)) (begin (set! tmp.16739 tmp.16713) (set! tmp.16739 (arithmetic-shift-right tmp.16739 3)) (set! rax tmp.16712) (set! rax (* rax tmp.16739)) (jump tmp-ra.16747 rbp rax)) (begin (set! rax 62) (jump tmp-ra.16747 rbp rax))) (begin (set! rax 62) (jump tmp-ra.16747 rbp rax))))) (define L.-.2197 ((new-frames ()) (locals (tmp.16742 tmp.16716 tmp.16743 tmp-ra.16748 tmp.16741 tmp.16717 tmp.16740)) (undead-out ((rdi rsi tmp-ra.16748 rbp) (rsi tmp.16716 tmp-ra.16748 rbp) (tmp.16716 tmp.16717 tmp-ra.16748 rbp) ((((((tmp.16741 tmp.16716 tmp.16717 tmp-ra.16748 rbp) (tmp.16741 tmp.16716 tmp.16717 tmp-ra.16748 rbp)) (tmp.16716 tmp.16717 tmp-ra.16748 rbp)) (tmp.16740 tmp.16716 tmp.16717 tmp-ra.16748 rbp) (tmp.16740 tmp.16716 tmp.16717 tmp-ra.16748 rbp)) (tmp.16716 tmp.16717 tmp-ra.16748 rbp)) ((((((tmp.16743 tmp.16716 tmp.16717 tmp-ra.16748 rbp) (tmp.16743 tmp.16716 tmp.16717 tmp-ra.16748 rbp)) (tmp.16716 tmp.16717 tmp-ra.16748 rbp)) (tmp.16742 tmp.16716 tmp.16717 tmp-ra.16748 rbp) (tmp.16742 tmp.16716 tmp.16717 tmp-ra.16748 rbp)) (tmp.16716 tmp.16717 tmp-ra.16748 rbp)) ((tmp.16717 rax tmp-ra.16748 rbp) (tmp-ra.16748 rax rbp) (rax rbp)) ((tmp-ra.16748 rax rbp) (rax rbp))) ((tmp-ra.16748 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16748 r15) (set! tmp.16716 rdi) (set! tmp.16717 rsi) (if (begin (if (begin (begin (set! tmp.16741 tmp.16717) (set! tmp.16741 (bitwise-and tmp.16741 7))) (= tmp.16741 0)) (set! tmp.16740 14) (set! tmp.16740 6)) (!= tmp.16740 6)) (if (begin (if (begin (begin (set! tmp.16743 tmp.16716) (set! tmp.16743 (bitwise-and tmp.16743 7))) (= tmp.16743 0)) (set! tmp.16742 14) (set! tmp.16742 6)) (!= tmp.16742 6)) (begin (set! rax tmp.16716) (set! rax (- rax tmp.16717)) (jump tmp-ra.16748 rbp rax)) (begin (set! rax 574) (jump tmp-ra.16748 rbp rax))) (begin (set! rax 574) (jump tmp-ra.16748 rbp rax))))) (define L.fact.2196 ((new-frames (() ())) (locals (tmp.16746 tmp.16745 tmp-ra.16749 x.16711 tmp.16744)) (undead-out ((rdi tmp-ra.16749 rbp) (x.16711 tmp-ra.16749 rbp) ((((x.16711 tmp-ra.16749 rbp) (tmp.16744 x.16711 tmp-ra.16749 rbp) (tmp.16744 x.16711 tmp-ra.16749 rbp)) (x.16711 tmp-ra.16749 rbp)) ((tmp-ra.16749 rax rbp) (rax rbp)) (((rax x.16711 tmp-ra.16749 rbp) ((x.16711 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.16746 x.16711 tmp-ra.16749 rbp) ((rax x.16711 tmp-ra.16749 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (tmp.16745 x.16711 tmp-ra.16749 rbp) (x.16711 tmp-ra.16749 rsi rbp) (tmp-ra.16749 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (x.16711 tmp-ra.16749))) (begin (set! tmp-ra.16749 r15) (set! x.16711 rdi) (if (begin (if (= x.16711 0) (set! tmp.16744 14) (set! tmp.16744 6)) (!= tmp.16744 6)) (begin (set! rax 8) (jump tmp-ra.16749 rbp rax)) (begin (return-point L.rp.2199 (begin (set! rsi 8) (set! rdi x.16711) (set! r15 L.rp.2199) (jump L.-.2197 rbp r15 rdi rsi))) (set! tmp.16746 rax) (return-point L.rp.2200 (begin (set! rdi tmp.16746) (set! r15 L.rp.2200) (jump L.fact.2196 rbp r15 rdi))) (set! tmp.16745 rax) (set! rsi tmp.16745) (set! rdi x.16711) (set! r15 tmp-ra.16749) (jump L.*.2198 rbp r15 rdi rsi))))) (begin (set! tmp-ra.16750 r15) (set! rdi 40) (set! r15 tmp-ra.16750) (jump L.fact.2196 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp-ra.16787)) (call-undead ()) (undead-out ((tmp-ra.16787 rbp) (tmp-ra.16787 rdx rbp) (tmp-ra.16787 rdx rsi rbp) (tmp-ra.16787 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))) (define L.+.2202 ((new-frames ()) (locals (tmp.16781 tmp.16758 tmp.16782 tmp-ra.16785 tmp.16780 tmp.16759 tmp.16779)) (undead-out ((rdi rsi tmp-ra.16785 rbp) (rsi tmp.16758 tmp-ra.16785 rbp) (tmp.16758 tmp.16759 tmp-ra.16785 rbp) ((((((tmp.16780 tmp.16758 tmp.16759 tmp-ra.16785 rbp) (tmp.16780 tmp.16758 tmp.16759 tmp-ra.16785 rbp)) (tmp.16758 tmp.16759 tmp-ra.16785 rbp)) (tmp.16779 tmp.16758 tmp.16759 tmp-ra.16785 rbp) (tmp.16779 tmp.16758 tmp.16759 tmp-ra.16785 rbp)) (tmp.16758 tmp.16759 tmp-ra.16785 rbp)) ((((((tmp.16782 tmp.16758 tmp.16759 tmp-ra.16785 rbp) (tmp.16782 tmp.16758 tmp.16759 tmp-ra.16785 rbp)) (tmp.16758 tmp.16759 tmp-ra.16785 rbp)) (tmp.16781 tmp.16758 tmp.16759 tmp-ra.16785 rbp) (tmp.16781 tmp.16758 tmp.16759 tmp-ra.16785 rbp)) (tmp.16758 tmp.16759 tmp-ra.16785 rbp)) ((tmp.16759 rax tmp-ra.16785 rbp) (tmp-ra.16785 rax rbp) (rax rbp)) ((tmp-ra.16785 rax rbp) (rax rbp))) ((tmp-ra.16785 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16785 r15) (set! tmp.16758 rdi) (set! tmp.16759 rsi) (if (begin (if (begin (begin (set! tmp.16780 tmp.16759) (set! tmp.16780 (bitwise-and tmp.16780 7))) (= tmp.16780 0)) (set! tmp.16779 14) (set! tmp.16779 6)) (!= tmp.16779 6)) (if (begin (if (begin (begin (set! tmp.16782 tmp.16758) (set! tmp.16782 (bitwise-and tmp.16782 7))) (= tmp.16782 0)) (set! tmp.16781 14) (set! tmp.16781 6)) (!= tmp.16781 6)) (begin (set! rax tmp.16758) (set! rax (+ rax tmp.16759)) (jump tmp-ra.16785 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16785 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16785 rbp rax))))) (define L.fib_loop.2201 ((new-frames (() ())) (locals (tmp.16784 acc2.16751 new-acc2.16755 new-n.16754 tmp-ra.16786 acc1.16752 n.16753 tmp.16783)) (undead-out ((rdi rsi rdx tmp-ra.16786 rbp) (rsi rdx n.16753 tmp-ra.16786 rbp) (rdx n.16753 acc1.16752 tmp-ra.16786 rbp) (acc2.16751 n.16753 acc1.16752 tmp-ra.16786 rbp) ((((acc2.16751 n.16753 acc1.16752 tmp-ra.16786 rbp) (tmp.16783 acc2.16751 n.16753 acc1.16752 tmp-ra.16786 rbp) (tmp.16783 acc2.16751 n.16753 acc1.16752 tmp-ra.16786 rbp)) (acc2.16751 n.16753 acc1.16752 tmp-ra.16786 rbp)) ((tmp-ra.16786 rax rbp) (rax rbp)) ((((acc1.16752 n.16753 acc2.16751 tmp-ra.16786 rbp) (tmp.16784 acc1.16752 n.16753 acc2.16751 tmp-ra.16786 rbp) (tmp.16784 acc1.16752 n.16753 acc2.16751 tmp-ra.16786 rbp)) (acc1.16752 n.16753 acc2.16751 tmp-ra.16786 rbp)) ((tmp-ra.16786 rax rbp) (rax rbp)) (((rax acc1.16752 acc2.16751 tmp-ra.16786 rbp) ((n.16753 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.16752 acc2.16751 new-n.16754 tmp-ra.16786 rbp) ((rax acc2.16751 new-n.16754 tmp-ra.16786 rbp) ((acc1.16752 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.16755 acc2.16751 new-n.16754 tmp-ra.16786 rbp) (acc2.16751 new-n.16754 tmp-ra.16786 rdx rbp) (new-n.16754 tmp-ra.16786 rdx rsi rbp) (tmp-ra.16786 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (call-undead (new-n.16754 acc1.16752 acc2.16751 tmp-ra.16786))) (begin (set! tmp-ra.16786 r15) (set! n.16753 rdi) (set! acc1.16752 rsi) (set! acc2.16751 rdx) (if (begin (if (= n.16753 0) (set! tmp.16783 14) (set! tmp.16783 6)) (!= tmp.16783 6)) (begin (set! rax acc1.16752) (jump tmp-ra.16786 rbp rax)) (if (begin (if (= n.16753 8) (set! tmp.16784 14) (set! tmp.16784 6)) (!= tmp.16784 6)) (begin (set! rax acc2.16751) (jump tmp-ra.16786 rbp rax)) (begin (return-point L.rp.2203 (begin (set! rsi -8) (set! rdi n.16753) (set! r15 L.rp.2203) (jump L.+.2202 rbp r15 rdi rsi))) (set! new-n.16754 rax) (return-point L.rp.2204 (begin (set! rsi acc2.16751) (set! rdi acc1.16752) (set! r15 L.rp.2204) (jump L.+.2202 rbp r15 rdi rsi))) (set! new-acc2.16755 rax) (set! rdx new-acc2.16755) (set! rsi acc2.16751) (set! rdi new-n.16754) (set! r15 tmp-ra.16786) (jump L.fib_loop.2201 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.16787 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.16787) (jump L.fib_loop.2201 rbp r15 rdi rsi rdx))) (module ((new-frames ()) (locals (tmp-ra.16824)) (call-undead ()) (undead-out ((tmp-ra.16824 rbp) (tmp-ra.16824 rdx rbp) (tmp-ra.16824 rdx rsi rbp) (tmp-ra.16824 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))) (define L.+.2206 ((new-frames ()) (locals (tmp.16818 tmp.16795 tmp.16819 tmp-ra.16822 tmp.16817 tmp.16796 tmp.16816)) (undead-out ((rdi rsi tmp-ra.16822 rbp) (rsi tmp.16795 tmp-ra.16822 rbp) (tmp.16795 tmp.16796 tmp-ra.16822 rbp) ((((((tmp.16817 tmp.16795 tmp.16796 tmp-ra.16822 rbp) (tmp.16817 tmp.16795 tmp.16796 tmp-ra.16822 rbp)) (tmp.16795 tmp.16796 tmp-ra.16822 rbp)) (tmp.16816 tmp.16795 tmp.16796 tmp-ra.16822 rbp) (tmp.16816 tmp.16795 tmp.16796 tmp-ra.16822 rbp)) (tmp.16795 tmp.16796 tmp-ra.16822 rbp)) ((((((tmp.16819 tmp.16795 tmp.16796 tmp-ra.16822 rbp) (tmp.16819 tmp.16795 tmp.16796 tmp-ra.16822 rbp)) (tmp.16795 tmp.16796 tmp-ra.16822 rbp)) (tmp.16818 tmp.16795 tmp.16796 tmp-ra.16822 rbp) (tmp.16818 tmp.16795 tmp.16796 tmp-ra.16822 rbp)) (tmp.16795 tmp.16796 tmp-ra.16822 rbp)) ((tmp.16796 rax tmp-ra.16822 rbp) (tmp-ra.16822 rax rbp) (rax rbp)) ((tmp-ra.16822 rax rbp) (rax rbp))) ((tmp-ra.16822 rax rbp) (rax rbp))))) (call-undead ())) (begin (set! tmp-ra.16822 r15) (set! tmp.16795 rdi) (set! tmp.16796 rsi) (if (begin (if (begin (begin (set! tmp.16817 tmp.16796) (set! tmp.16817 (bitwise-and tmp.16817 7))) (= tmp.16817 0)) (set! tmp.16816 14) (set! tmp.16816 6)) (!= tmp.16816 6)) (if (begin (if (begin (begin (set! tmp.16819 tmp.16795) (set! tmp.16819 (bitwise-and tmp.16819 7))) (= tmp.16819 0)) (set! tmp.16818 14) (set! tmp.16818 6)) (!= tmp.16818 6)) (begin (set! rax tmp.16795) (set! rax (+ rax tmp.16796)) (jump tmp-ra.16822 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16822 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16822 rbp rax))))) (define L.fib_loop.2205 ((new-frames (() ())) (locals (tmp.16821 acc2.16788 new-acc2.16792 new-n.16791 tmp-ra.16823 acc1.16789 n.16790 tmp.16820)) (undead-out ((rdi rsi rdx tmp-ra.16823 rbp) (rsi rdx n.16790 tmp-ra.16823 rbp) (rdx n.16790 acc1.16789 tmp-ra.16823 rbp) (acc2.16788 n.16790 acc1.16789 tmp-ra.16823 rbp) ((((acc2.16788 n.16790 acc1.16789 tmp-ra.16823 rbp) (tmp.16820 acc2.16788 n.16790 acc1.16789 tmp-ra.16823 rbp) (tmp.16820 acc2.16788 n.16790 acc1.16789 tmp-ra.16823 rbp)) (acc2.16788 n.16790 acc1.16789 tmp-ra.16823 rbp)) ((tmp-ra.16823 rax rbp) (rax rbp)) ((((acc1.16789 n.16790 acc2.16788 tmp-ra.16823 rbp) (tmp.16821 acc1.16789 n.16790 acc2.16788 tmp-ra.16823 rbp) (tmp.16821 acc1.16789 n.16790 acc2.16788 tmp-ra.16823 rbp)) (acc1.16789 n.16790 acc2.16788 tmp-ra.16823 rbp)) ((tmp-ra.16823 rax rbp) (rax rbp)) (((rax acc1.16789 acc2.16788 tmp-ra.16823 rbp) ((n.16790 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.16789 acc2.16788 new-n.16791 tmp-ra.16823 rbp) ((rax acc2.16788 new-n.16791 tmp-ra.16823 rbp) ((acc1.16789 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.16792 acc2.16788 new-n.16791 tmp-ra.16823 rbp) (acc2.16788 new-n.16791 tmp-ra.16823 rdx rbp) (new-n.16791 tmp-ra.16823 rdx rsi rbp) (tmp-ra.16823 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (call-undead (new-n.16791 acc1.16789 acc2.16788 tmp-ra.16823))) (begin (set! tmp-ra.16823 r15) (set! n.16790 rdi) (set! acc1.16789 rsi) (set! acc2.16788 rdx) (if (begin (if (= n.16790 0) (set! tmp.16820 14) (set! tmp.16820 6)) (!= tmp.16820 6)) (begin (set! rax acc1.16789) (jump tmp-ra.16823 rbp rax)) (if (begin (if (= n.16790 8) (set! tmp.16821 14) (set! tmp.16821 6)) (!= tmp.16821 6)) (begin (set! rax acc2.16788) (jump tmp-ra.16823 rbp rax)) (begin (return-point L.rp.2207 (begin (set! rsi -8) (set! rdi n.16790) (set! r15 L.rp.2207) (jump L.+.2206 rbp r15 rdi rsi))) (set! new-n.16791 rax) (return-point L.rp.2208 (begin (set! rsi acc2.16788) (set! rdi acc1.16789) (set! r15 L.rp.2208) (jump L.+.2206 rbp r15 rdi rsi))) (set! new-acc2.16792 rax) (set! rdx new-acc2.16792) (set! rsi acc2.16788) (set! rdi new-n.16791) (set! r15 tmp-ra.16823) (jump L.fib_loop.2205 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.16824 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.16824) (jump L.fib_loop.2205 rbp r15 rdi rsi rdx)))) ((module ((new-frames ()) (locals (tmp-ra.16850)) (call-undead ()) (undead-out ((tmp-ra.16850 rbp) (tmp-ra.16850 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.16850 (rdi rbp)) (rbp (r15 rdi tmp-ra.16850)) (rdi (r15 rbp tmp-ra.16850)) (r15 (rbp rdi))))) (define L.id.2209 ((new-frames ()) (locals (x.16825 tmp-ra.16849)) (undead-out ((rdi tmp-ra.16849 rbp) (x.16825 tmp-ra.16849 rbp) (tmp-ra.16849 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.16849 (rax x.16825 rbp rdi)) (x.16825 (rbp tmp-ra.16849)) (rdi (tmp-ra.16849)) (rbp (rax x.16825 tmp-ra.16849)) (rax (rbp tmp-ra.16849))))) (begin (set! tmp-ra.16849 r15) (set! x.16825 rdi) (set! rax x.16825) (jump tmp-ra.16849 rbp rax))) (begin (set! tmp-ra.16850 r15) (set! rdi 40) (set! r15 tmp-ra.16850) (jump L.id.2209 rbp r15 rdi))) (module ((new-frames (())) (locals (y.16852 tmp-ra.16882)) (call-undead (tmp-ra.16882)) (undead-out ((tmp-ra.16882 rbp) ((rax tmp-ra.16882 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (y.16852 tmp-ra.16882 rbp) (tmp-ra.16882 rsi rbp) (tmp-ra.16882 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.16882 (rdi rsi y.16852 rbp)) (y.16852 (rbp tmp-ra.16882)) (rbp (rsi y.16852 r15 rdi tmp-ra.16882)) (rdi (rsi tmp-ra.16882 r15 rbp)) (r15 (rsi rbp rdi)) (rsi (r15 rdi rbp tmp-ra.16882))))) (define L.+.2211 ((new-frames ()) (locals (tmp.16878 tmp.16855 tmp.16879 tmp-ra.16880 tmp.16877 tmp.16856 tmp.16876)) (undead-out ((rdi rsi tmp-ra.16880 rbp) (rsi tmp.16855 tmp-ra.16880 rbp) (tmp.16855 tmp.16856 tmp-ra.16880 rbp) ((((((tmp.16877 tmp.16855 tmp.16856 tmp-ra.16880 rbp) (tmp.16877 tmp.16855 tmp.16856 tmp-ra.16880 rbp)) (tmp.16855 tmp.16856 tmp-ra.16880 rbp)) (tmp.16876 tmp.16855 tmp.16856 tmp-ra.16880 rbp) (tmp.16876 tmp.16855 tmp.16856 tmp-ra.16880 rbp)) (tmp.16855 tmp.16856 tmp-ra.16880 rbp)) ((((((tmp.16879 tmp.16855 tmp.16856 tmp-ra.16880 rbp) (tmp.16879 tmp.16855 tmp.16856 tmp-ra.16880 rbp)) (tmp.16855 tmp.16856 tmp-ra.16880 rbp)) (tmp.16878 tmp.16855 tmp.16856 tmp-ra.16880 rbp) (tmp.16878 tmp.16855 tmp.16856 tmp-ra.16880 rbp)) (tmp.16855 tmp.16856 tmp-ra.16880 rbp)) ((tmp.16856 rax tmp-ra.16880 rbp) (tmp-ra.16880 rax rbp) (rax rbp)) ((tmp-ra.16880 rax rbp) (rax rbp))) ((tmp-ra.16880 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.16876 (rbp tmp-ra.16880 tmp.16856 tmp.16855)) (tmp.16856 (rbp tmp-ra.16880 tmp.16855 tmp.16877 tmp.16876 tmp.16879 tmp.16878 rax)) (tmp.16877 (rbp tmp-ra.16880 tmp.16856 tmp.16855)) (tmp-ra.16880 (tmp.16856 tmp.16855 rbp rsi rdi tmp.16877 tmp.16876 tmp.16879 tmp.16878 rax)) (tmp.16879 (rbp tmp-ra.16880 tmp.16856 tmp.16855)) (tmp.16855 (tmp.16856 rbp tmp-ra.16880 rsi tmp.16877 tmp.16876 tmp.16879 tmp.16878)) (tmp.16878 (rbp tmp-ra.16880 tmp.16856 tmp.16855)) (rax (tmp.16856 rbp tmp-ra.16880)) (rbp (tmp.16856 tmp.16855 tmp-ra.16880 tmp.16877 tmp.16876 tmp.16879 tmp.16878 rax)) (rdi (tmp-ra.16880)) (rsi (tmp.16855 tmp-ra.16880))))) (begin (set! tmp-ra.16880 r15) (set! tmp.16855 rdi) (set! tmp.16856 rsi) (if (begin (if (begin (begin (set! tmp.16877 tmp.16856) (set! tmp.16877 (bitwise-and tmp.16877 7))) (= tmp.16877 0)) (set! tmp.16876 14) (set! tmp.16876 6)) (!= tmp.16876 6)) (if (begin (if (begin (begin (set! tmp.16879 tmp.16855) (set! tmp.16879 (bitwise-and tmp.16879 7))) (= tmp.16879 0)) (set! tmp.16878 14) (set! tmp.16878 6)) (!= tmp.16878 6)) (begin (set! rax tmp.16855) (set! rax (+ rax tmp.16856)) (jump tmp-ra.16880 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16880 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16880 rbp rax))))) (define L.id.2210 ((new-frames ()) (locals (x.16851 tmp-ra.16881)) (undead-out ((rdi tmp-ra.16881 rbp) (x.16851 tmp-ra.16881 rbp) (tmp-ra.16881 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.16881 (rax x.16851 rbp rdi)) (x.16851 (rbp tmp-ra.16881)) (rdi (tmp-ra.16881)) (rbp (rax x.16851 tmp-ra.16881)) (rax (rbp tmp-ra.16881))))) (begin (set! tmp-ra.16881 r15) (set! x.16851 rdi) (set! rax x.16851) (jump tmp-ra.16881 rbp rax))) (begin (set! tmp-ra.16882 r15) (return-point L.rp.2212 (begin (set! rdi 40) (set! r15 L.rp.2212) (jump L.id.2210 rbp r15 rdi))) (set! y.16852 rax) (set! rsi y.16852) (set! rdi 40) (set! r15 tmp-ra.16882) (jump L.+.2211 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.16919)) (call-undead ()) (undead-out ((tmp-ra.16919 rbp) (tmp-ra.16919 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.16919 (rdi rbp)) (rbp (r15 rdi tmp-ra.16919)) (rdi (r15 rbp tmp-ra.16919)) (r15 (rbp rdi))))) (define L.+.2215 ((new-frames ()) (locals (tmp.16912 tmp.16889 tmp.16913 tmp-ra.16916 tmp.16911 tmp.16890 tmp.16910)) (undead-out ((rdi rsi tmp-ra.16916 rbp) (rsi tmp.16889 tmp-ra.16916 rbp) (tmp.16889 tmp.16890 tmp-ra.16916 rbp) ((((((tmp.16911 tmp.16889 tmp.16890 tmp-ra.16916 rbp) (tmp.16911 tmp.16889 tmp.16890 tmp-ra.16916 rbp)) (tmp.16889 tmp.16890 tmp-ra.16916 rbp)) (tmp.16910 tmp.16889 tmp.16890 tmp-ra.16916 rbp) (tmp.16910 tmp.16889 tmp.16890 tmp-ra.16916 rbp)) (tmp.16889 tmp.16890 tmp-ra.16916 rbp)) ((((((tmp.16913 tmp.16889 tmp.16890 tmp-ra.16916 rbp) (tmp.16913 tmp.16889 tmp.16890 tmp-ra.16916 rbp)) (tmp.16889 tmp.16890 tmp-ra.16916 rbp)) (tmp.16912 tmp.16889 tmp.16890 tmp-ra.16916 rbp) (tmp.16912 tmp.16889 tmp.16890 tmp-ra.16916 rbp)) (tmp.16889 tmp.16890 tmp-ra.16916 rbp)) ((tmp.16890 rax tmp-ra.16916 rbp) (tmp-ra.16916 rax rbp) (rax rbp)) ((tmp-ra.16916 rax rbp) (rax rbp))) ((tmp-ra.16916 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.16910 (rbp tmp-ra.16916 tmp.16890 tmp.16889)) (tmp.16890 (rbp tmp-ra.16916 tmp.16889 tmp.16911 tmp.16910 tmp.16913 tmp.16912 rax)) (tmp.16911 (rbp tmp-ra.16916 tmp.16890 tmp.16889)) (tmp-ra.16916 (tmp.16890 tmp.16889 rbp rsi rdi tmp.16911 tmp.16910 tmp.16913 tmp.16912 rax)) (tmp.16913 (rbp tmp-ra.16916 tmp.16890 tmp.16889)) (tmp.16889 (tmp.16890 rbp tmp-ra.16916 rsi tmp.16911 tmp.16910 tmp.16913 tmp.16912)) (tmp.16912 (rbp tmp-ra.16916 tmp.16890 tmp.16889)) (rax (tmp.16890 rbp tmp-ra.16916)) (rbp (tmp.16890 tmp.16889 tmp-ra.16916 tmp.16911 tmp.16910 tmp.16913 tmp.16912 rax)) (rdi (tmp-ra.16916)) (rsi (tmp.16889 tmp-ra.16916))))) (begin (set! tmp-ra.16916 r15) (set! tmp.16889 rdi) (set! tmp.16890 rsi) (if (begin (if (begin (begin (set! tmp.16911 tmp.16890) (set! tmp.16911 (bitwise-and tmp.16911 7))) (= tmp.16911 0)) (set! tmp.16910 14) (set! tmp.16910 6)) (!= tmp.16910 6)) (if (begin (if (begin (begin (set! tmp.16913 tmp.16889) (set! tmp.16913 (bitwise-and tmp.16913 7))) (= tmp.16913 0)) (set! tmp.16912 14) (set! tmp.16912 6)) (!= tmp.16912 6)) (begin (set! rax tmp.16889) (set! rax (+ rax tmp.16890)) (jump tmp-ra.16916 rbp rax)) (begin (set! rax 318) (jump tmp-ra.16916 rbp rax))) (begin (set! rax 318) (jump tmp-ra.16916 rbp rax))))) (define L.odd?.2213 ((new-frames (())) (locals (y.16884 tmp-ra.16917 x.16883 tmp.16914)) (undead-out ((rdi tmp-ra.16917 rbp) (x.16883 tmp-ra.16917 rbp) ((((x.16883 tmp-ra.16917 rbp) (tmp.16914 x.16883 tmp-ra.16917 rbp) (tmp.16914 x.16883 tmp-ra.16917 rbp)) (x.16883 tmp-ra.16917 rbp)) ((tmp-ra.16917 rax rbp) (rax rbp)) (((rax tmp-ra.16917 rbp) ((x.16883 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.16884 tmp-ra.16917 rbp) (tmp-ra.16917 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (call-undead (tmp-ra.16917)) (conflicts ((tmp.16914 (rbp tmp-ra.16917 x.16883)) (x.16883 (rbp tmp-ra.16917 tmp.16914 rsi)) (tmp-ra.16917 (x.16883 rbp tmp.16914 rax rdi y.16884)) (y.16884 (rbp tmp-ra.16917)) (rsi (r15 rdi rbp x.16883)) (rbp (x.16883 tmp-ra.16917 tmp.16914 rax y.16884 r15 rdi rsi)) (rdi (tmp-ra.16917 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.16917))))) (begin (set! tmp-ra.16917 r15) (set! x.16883 rdi) (if (begin (if (= x.16883 0) (set! tmp.16914 14) (set! tmp.16914 6)) (!= tmp.16914 6)) (begin (set! rax 0) (jump tmp-ra.16917 rbp rax)) (begin (return-point L.rp.2216 (begin (set! rsi -8) (set! rdi x.16883) (set! r15 L.rp.2216) (jump L.+.2215 rbp r15 rdi rsi))) (set! y.16884 rax) (set! rdi y.16884) (set! r15 tmp-ra.16917) (jump L.even?.2214 rbp r15 rdi))))) (define L.even?.2214 ((new-frames (())) (locals (y.16886 tmp-ra.16918 x.16885 tmp.16915)) (undead-out ((rdi tmp-ra.16918 rbp) (x.16885 tmp-ra.16918 rbp) ((((x.16885 tmp-ra.16918 rbp) (tmp.16915 x.16885 tmp-ra.16918 rbp) (tmp.16915 x.16885 tmp-ra.16918 rbp)) (x.16885 tmp-ra.16918 rbp)) ((tmp-ra.16918 rax rbp) (rax rbp)) (((rax tmp-ra.16918 rbp) ((x.16885 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.16886 tmp-ra.16918 rbp) (tmp-ra.16918 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (call-undead (tmp-ra.16918)) (conflicts ((tmp.16915 (rbp tmp-ra.16918 x.16885)) (x.16885 (rbp tmp-ra.16918 tmp.16915 rsi)) (tmp-ra.16918 (x.16885 rbp tmp.16915 rax rdi y.16886)) (y.16886 (rbp tmp-ra.16918)) (rsi (r15 rdi rbp x.16885)) (rbp (x.16885 tmp-ra.16918 tmp.16915 rax y.16886 r15 rdi rsi)) (rdi (tmp-ra.16918 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.16918))))) (begin (set! tmp-ra.16918 r15) (set! x.16885 rdi) (if (begin (if (= x.16885 0) (set! tmp.16915 14) (set! tmp.16915 6)) (!= tmp.16915 6)) (begin (set! rax 8) (jump tmp-ra.16918 rbp rax)) (begin (return-point L.rp.2217 (begin (set! rsi -8) (set! rdi x.16885) (set! r15 L.rp.2217) (jump L.+.2215 rbp r15 rdi rsi))) (set! y.16886 rax) (set! rdi y.16886) (set! r15 tmp-ra.16918) (jump L.odd?.2213 rbp r15 rdi))))) (begin (set! tmp-ra.16919 r15) (set! rdi 40) (set! r15 tmp-ra.16919) (jump L.even?.2214 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp-ra.16948)) (call-undead ()) (undead-out ((tmp-ra.16948 rbp) (tmp-ra.16948 rax rbp) (rax rbp))) (conflicts ((tmp-ra.16948 (rax rbp)) (rbp (rax tmp-ra.16948)) (rax (rbp tmp-ra.16948))))) (define L.zero.2218 ((new-frames ()) (locals (v3.16920 v2.16921 v1.16922 v0.16923 tmp-ra.16947)) (undead-out ((rdi rsi rdx rcx tmp-ra.16947 rbp) (rsi rdx rcx tmp-ra.16947 rbp) (rdx rcx tmp-ra.16947 rbp) (rcx tmp-ra.16947 rbp) (tmp-ra.16947 rbp) (tmp-ra.16947 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.16947 (rax v3.16920 v2.16921 v1.16922 v0.16923 rbp rcx rdx rsi rdi)) (v0.16923 (rbp tmp-ra.16947 rcx rdx rsi)) (v1.16922 (rbp tmp-ra.16947 rcx rdx)) (v2.16921 (rbp tmp-ra.16947 rcx)) (v3.16920 (rbp tmp-ra.16947)) (rdi (tmp-ra.16947)) (rsi (v0.16923 tmp-ra.16947)) (rdx (v1.16922 v0.16923 tmp-ra.16947)) (rcx (v2.16921 v1.16922 v0.16923 tmp-ra.16947)) (rbp (rax v3.16920 v2.16921 v1.16922 v0.16923 tmp-ra.16947)) (rax (rbp tmp-ra.16947))))) (begin (set! tmp-ra.16947 r15) (set! v0.16923 rdi) (set! v1.16922 rsi) (set! v2.16921 rdx) (set! v3.16920 rcx) (set! rax 0) (jump tmp-ra.16947 rbp rax))) (begin (set! tmp-ra.16948 r15) (set! rax 0) (jump tmp-ra.16948 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.16975 y.16950)) (call-undead ()) (undead-out ((tmp-ra.16975 rbp) (tmp-ra.16975 y.16950 rbp) (tmp-ra.16975 y.16950 rdi rbp) (y.16950 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.16950 (r15 rdi rbp tmp-ra.16975)) (tmp-ra.16975 (rdi y.16950 rbp)) (rbp (r15 rdi y.16950 tmp-ra.16975)) (rdi (r15 rbp y.16950 tmp-ra.16975)) (r15 (rbp rdi y.16950))))) (define L.id.2219 ((new-frames ()) (locals (x.16949 tmp-ra.16974)) (undead-out ((rdi tmp-ra.16974 rbp) (x.16949 tmp-ra.16974 rbp) (tmp-ra.16974 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.16974 (rax x.16949 rbp rdi)) (x.16949 (rbp tmp-ra.16974)) (rdi (tmp-ra.16974)) (rbp (rax x.16949 tmp-ra.16974)) (rax (rbp tmp-ra.16974))))) (begin (set! tmp-ra.16974 r15) (set! x.16949 rdi) (set! rax x.16949) (jump tmp-ra.16974 rbp rax))) (begin (set! tmp-ra.16975 r15) (set! y.16950 L.id.2219) (set! rdi 40) (set! r15 tmp-ra.16975) (jump y.16950 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp.17005 tmp-ra.17004 y.16978)) (call-undead ()) (undead-out ((tmp-ra.17004 rbp) (((tmp.17005 tmp-ra.17004 rbp) (tmp-ra.17004 rbp)) (tmp-ra.17004 y.16978 rbp) (tmp-ra.17004 y.16978 rbp)) (tmp-ra.17004 y.16978 rdi rbp) (y.16978 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.16978 (r15 rdi rbp tmp-ra.17004)) (tmp-ra.17004 (rdi tmp.17005 y.16978 rbp)) (tmp.17005 (rbp tmp-ra.17004)) (rbp (r15 rdi tmp.17005 y.16978 tmp-ra.17004)) (rdi (r15 rbp y.16978 tmp-ra.17004)) (r15 (rbp rdi y.16978))))) (define L.id1.2220 ((new-frames ()) (locals (x.16976 tmp-ra.17002)) (undead-out ((rdi tmp-ra.17002 rbp) (x.16976 tmp-ra.17002 rbp) (tmp-ra.17002 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.17002 (rax x.16976 rbp rdi)) (x.16976 (rbp tmp-ra.17002)) (rdi (tmp-ra.17002)) (rbp (rax x.16976 tmp-ra.17002)) (rax (rbp tmp-ra.17002))))) (begin (set! tmp-ra.17002 r15) (set! x.16976 rdi) (set! rax x.16976) (jump tmp-ra.17002 rbp rax))) (define L.id2.2221 ((new-frames ()) (locals (x.16977 tmp-ra.17003)) (undead-out ((rdi tmp-ra.17003 rbp) (x.16977 tmp-ra.17003 rbp) (tmp-ra.17003 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.17003 (rax x.16977 rbp rdi)) (x.16977 (rbp tmp-ra.17003)) (rdi (tmp-ra.17003)) (rbp (rax x.16977 tmp-ra.17003)) (rax (rbp tmp-ra.17003))))) (begin (set! tmp-ra.17003 r15) (set! x.16977 rdi) (set! rax x.16977) (jump tmp-ra.17003 rbp rax))) (begin (set! tmp-ra.17004 r15) (if (begin (set! tmp.17005 14) (!= tmp.17005 6)) (set! y.16978 L.id1.2220) (set! y.16978 L.id2.2221)) (set! rdi 40) (set! r15 tmp-ra.17004) (jump y.16978 rbp r15 rdi))) (module ((new-frames (() ())) (locals (tmp.17039 tmp.17038 tmp-ra.17042)) (call-undead (tmp.17038 tmp-ra.17042)) (undead-out ((tmp-ra.17042 rbp) ((rax tmp-ra.17042 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17038 tmp-ra.17042 rbp) ((rax tmp.17038 tmp-ra.17042 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17039 tmp.17038 tmp-ra.17042 rbp) (tmp.17038 tmp-ra.17042 rsi rbp) (tmp-ra.17042 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.17042 (rdi rsi tmp.17039 tmp.17038 rbp)) (tmp.17038 (rsi tmp.17039 rbp tmp-ra.17042)) (tmp.17039 (rbp tmp-ra.17042 tmp.17038)) (rbp (tmp.17039 tmp.17038 r15 rdi rsi tmp-ra.17042)) (rsi (tmp-ra.17042 tmp.17038 r15 rdi rbp)) (rdi (tmp-ra.17042 r15 rbp rsi)) (r15 (rbp rdi rsi))))) (define L.*.2223 ((new-frames ()) (locals (tmp.17031 tmp.17006 tmp.17032 tmp.17033 tmp-ra.17040 tmp.17030 tmp.17007 tmp.17029)) (undead-out ((rdi rsi tmp-ra.17040 rbp) (rsi tmp.17006 tmp-ra.17040 rbp) (tmp.17007 tmp.17006 tmp-ra.17040 rbp) ((((((tmp.17030 tmp.17007 tmp.17006 tmp-ra.17040 rbp) (tmp.17030 tmp.17007 tmp.17006 tmp-ra.17040 rbp)) (tmp.17007 tmp.17006 tmp-ra.17040 rbp)) (tmp.17029 tmp.17007 tmp.17006 tmp-ra.17040 rbp) (tmp.17029 tmp.17007 tmp.17006 tmp-ra.17040 rbp)) (tmp.17007 tmp.17006 tmp-ra.17040 rbp)) ((((((tmp.17032 tmp.17007 tmp.17006 tmp-ra.17040 rbp) (tmp.17032 tmp.17007 tmp.17006 tmp-ra.17040 rbp)) (tmp.17007 tmp.17006 tmp-ra.17040 rbp)) (tmp.17031 tmp.17007 tmp.17006 tmp-ra.17040 rbp) (tmp.17031 tmp.17007 tmp.17006 tmp-ra.17040 rbp)) (tmp.17007 tmp.17006 tmp-ra.17040 rbp)) ((tmp.17033 tmp.17006 tmp-ra.17040 rbp) (tmp.17006 tmp.17033 tmp-ra.17040 rbp) (tmp.17033 rax tmp-ra.17040 rbp) (tmp-ra.17040 rax rbp) (rax rbp)) ((tmp-ra.17040 rax rbp) (rax rbp))) ((tmp-ra.17040 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17029 (rbp tmp-ra.17040 tmp.17006 tmp.17007)) (tmp.17007 (rbp tmp-ra.17040 tmp.17006 tmp.17030 tmp.17029 tmp.17032 tmp.17031)) (tmp.17030 (rbp tmp-ra.17040 tmp.17006 tmp.17007)) (tmp-ra.17040 (tmp.17007 tmp.17006 rbp rsi rdi tmp.17030 tmp.17029 tmp.17032 tmp.17031 tmp.17033 rax)) (tmp.17033 (rax rbp tmp-ra.17040 tmp.17006)) (tmp.17032 (rbp tmp-ra.17040 tmp.17006 tmp.17007)) (tmp.17006 (tmp.17007 rbp tmp-ra.17040 rsi tmp.17030 tmp.17029 tmp.17032 tmp.17031 tmp.17033)) (tmp.17031 (rbp tmp-ra.17040 tmp.17006 tmp.17007)) (rax (tmp.17033 rbp tmp-ra.17040)) (rbp (tmp.17007 tmp.17006 tmp-ra.17040 tmp.17030 tmp.17029 tmp.17032 tmp.17031 tmp.17033 rax)) (rdi (tmp-ra.17040)) (rsi (tmp.17006 tmp-ra.17040))))) (begin (set! tmp-ra.17040 r15) (set! tmp.17006 rdi) (set! tmp.17007 rsi) (if (begin (if (begin (begin (set! tmp.17030 tmp.17007) (set! tmp.17030 (bitwise-and tmp.17030 7))) (= tmp.17030 0)) (set! tmp.17029 14) (set! tmp.17029 6)) (!= tmp.17029 6)) (if (begin (if (begin (begin (set! tmp.17032 tmp.17006) (set! tmp.17032 (bitwise-and tmp.17032 7))) (= tmp.17032 0)) (set! tmp.17031 14) (set! tmp.17031 6)) (!= tmp.17031 6)) (begin (set! tmp.17033 tmp.17007) (set! tmp.17033 (arithmetic-shift-right tmp.17033 3)) (set! rax tmp.17006) (set! rax (* rax tmp.17033)) (jump tmp-ra.17040 rbp rax)) (begin (set! rax 62) (jump tmp-ra.17040 rbp rax))) (begin (set! rax 62) (jump tmp-ra.17040 rbp rax))))) (define L.+.2222 ((new-frames ()) (locals (tmp.17036 tmp.17008 tmp.17037 tmp-ra.17041 tmp.17035 tmp.17009 tmp.17034)) (undead-out ((rdi rsi tmp-ra.17041 rbp) (rsi tmp.17008 tmp-ra.17041 rbp) (tmp.17008 tmp.17009 tmp-ra.17041 rbp) ((((((tmp.17035 tmp.17008 tmp.17009 tmp-ra.17041 rbp) (tmp.17035 tmp.17008 tmp.17009 tmp-ra.17041 rbp)) (tmp.17008 tmp.17009 tmp-ra.17041 rbp)) (tmp.17034 tmp.17008 tmp.17009 tmp-ra.17041 rbp) (tmp.17034 tmp.17008 tmp.17009 tmp-ra.17041 rbp)) (tmp.17008 tmp.17009 tmp-ra.17041 rbp)) ((((((tmp.17037 tmp.17008 tmp.17009 tmp-ra.17041 rbp) (tmp.17037 tmp.17008 tmp.17009 tmp-ra.17041 rbp)) (tmp.17008 tmp.17009 tmp-ra.17041 rbp)) (tmp.17036 tmp.17008 tmp.17009 tmp-ra.17041 rbp) (tmp.17036 tmp.17008 tmp.17009 tmp-ra.17041 rbp)) (tmp.17008 tmp.17009 tmp-ra.17041 rbp)) ((tmp.17009 rax tmp-ra.17041 rbp) (tmp-ra.17041 rax rbp) (rax rbp)) ((tmp-ra.17041 rax rbp) (rax rbp))) ((tmp-ra.17041 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17034 (rbp tmp-ra.17041 tmp.17009 tmp.17008)) (tmp.17009 (rbp tmp-ra.17041 tmp.17008 tmp.17035 tmp.17034 tmp.17037 tmp.17036 rax)) (tmp.17035 (rbp tmp-ra.17041 tmp.17009 tmp.17008)) (tmp-ra.17041 (tmp.17009 tmp.17008 rbp rsi rdi tmp.17035 tmp.17034 tmp.17037 tmp.17036 rax)) (tmp.17037 (rbp tmp-ra.17041 tmp.17009 tmp.17008)) (tmp.17008 (tmp.17009 rbp tmp-ra.17041 rsi tmp.17035 tmp.17034 tmp.17037 tmp.17036)) (tmp.17036 (rbp tmp-ra.17041 tmp.17009 tmp.17008)) (rax (tmp.17009 rbp tmp-ra.17041)) (rbp (tmp.17009 tmp.17008 tmp-ra.17041 tmp.17035 tmp.17034 tmp.17037 tmp.17036 rax)) (rdi (tmp-ra.17041)) (rsi (tmp.17008 tmp-ra.17041))))) (begin (set! tmp-ra.17041 r15) (set! tmp.17008 rdi) (set! tmp.17009 rsi) (if (begin (if (begin (begin (set! tmp.17035 tmp.17009) (set! tmp.17035 (bitwise-and tmp.17035 7))) (= tmp.17035 0)) (set! tmp.17034 14) (set! tmp.17034 6)) (!= tmp.17034 6)) (if (begin (if (begin (begin (set! tmp.17037 tmp.17008) (set! tmp.17037 (bitwise-and tmp.17037 7))) (= tmp.17037 0)) (set! tmp.17036 14) (set! tmp.17036 6)) (!= tmp.17036 6)) (begin (set! rax tmp.17008) (set! rax (+ rax tmp.17009)) (jump tmp-ra.17041 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17041 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17041 rbp rax))))) (begin (set! tmp-ra.17042 r15) (return-point L.rp.2224 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2224) (jump L.+.2222 rbp r15 rdi rsi))) (set! tmp.17038 rax) (return-point L.rp.2225 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2225) (jump L.*.2223 rbp r15 rdi rsi))) (set! tmp.17039 rax) (set! rsi tmp.17039) (set! rdi tmp.17038) (set! r15 tmp-ra.17042) (jump L.+.2222 rbp r15 rdi rsi))) (module ((new-frames (())) (locals (tmp-ra.17073 tmp.17071 tmp.17070)) (call-undead (tmp-ra.17073)) (undead-out ((tmp-ra.17073 rbp) (((((((rax tmp-ra.17073 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17071 tmp-ra.17073 rbp)) (tmp-ra.17073 rbp)) (tmp.17070 tmp-ra.17073 rbp) (tmp.17070 tmp-ra.17073 rbp)) (tmp-ra.17073 rbp)) ((tmp-ra.17073 rax rbp) (rax rbp)) ((tmp-ra.17073 rax rbp) (rax rbp))))) (conflicts ((tmp.17070 (rbp tmp-ra.17073)) (tmp.17071 (rbp tmp-ra.17073)) (tmp-ra.17073 (rbp tmp.17071 tmp.17070 rax)) (rax (rbp tmp-ra.17073)) (rbp (tmp-ra.17073 r15 rdi rsi tmp.17071 tmp.17070 rax)) (rsi (r15 rdi rbp)) (rdi (r15 rbp rsi)) (r15 (rbp rdi rsi))))) (define L.+.2226 ((new-frames ()) (locals (tmp.17068 tmp.17045 tmp.17069 tmp-ra.17072 tmp.17067 tmp.17046 tmp.17066)) (undead-out ((rdi rsi tmp-ra.17072 rbp) (rsi tmp.17045 tmp-ra.17072 rbp) (tmp.17045 tmp.17046 tmp-ra.17072 rbp) ((((((tmp.17067 tmp.17045 tmp.17046 tmp-ra.17072 rbp) (tmp.17067 tmp.17045 tmp.17046 tmp-ra.17072 rbp)) (tmp.17045 tmp.17046 tmp-ra.17072 rbp)) (tmp.17066 tmp.17045 tmp.17046 tmp-ra.17072 rbp) (tmp.17066 tmp.17045 tmp.17046 tmp-ra.17072 rbp)) (tmp.17045 tmp.17046 tmp-ra.17072 rbp)) ((((((tmp.17069 tmp.17045 tmp.17046 tmp-ra.17072 rbp) (tmp.17069 tmp.17045 tmp.17046 tmp-ra.17072 rbp)) (tmp.17045 tmp.17046 tmp-ra.17072 rbp)) (tmp.17068 tmp.17045 tmp.17046 tmp-ra.17072 rbp) (tmp.17068 tmp.17045 tmp.17046 tmp-ra.17072 rbp)) (tmp.17045 tmp.17046 tmp-ra.17072 rbp)) ((tmp.17046 rax tmp-ra.17072 rbp) (tmp-ra.17072 rax rbp) (rax rbp)) ((tmp-ra.17072 rax rbp) (rax rbp))) ((tmp-ra.17072 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17066 (rbp tmp-ra.17072 tmp.17046 tmp.17045)) (tmp.17046 (rbp tmp-ra.17072 tmp.17045 tmp.17067 tmp.17066 tmp.17069 tmp.17068 rax)) (tmp.17067 (rbp tmp-ra.17072 tmp.17046 tmp.17045)) (tmp-ra.17072 (tmp.17046 tmp.17045 rbp rsi rdi tmp.17067 tmp.17066 tmp.17069 tmp.17068 rax)) (tmp.17069 (rbp tmp-ra.17072 tmp.17046 tmp.17045)) (tmp.17045 (tmp.17046 rbp tmp-ra.17072 rsi tmp.17067 tmp.17066 tmp.17069 tmp.17068)) (tmp.17068 (rbp tmp-ra.17072 tmp.17046 tmp.17045)) (rax (tmp.17046 rbp tmp-ra.17072)) (rbp (tmp.17046 tmp.17045 tmp-ra.17072 tmp.17067 tmp.17066 tmp.17069 tmp.17068 rax)) (rdi (tmp-ra.17072)) (rsi (tmp.17045 tmp-ra.17072))))) (begin (set! tmp-ra.17072 r15) (set! tmp.17045 rdi) (set! tmp.17046 rsi) (if (begin (if (begin (begin (set! tmp.17067 tmp.17046) (set! tmp.17067 (bitwise-and tmp.17067 7))) (= tmp.17067 0)) (set! tmp.17066 14) (set! tmp.17066 6)) (!= tmp.17066 6)) (if (begin (if (begin (begin (set! tmp.17069 tmp.17045) (set! tmp.17069 (bitwise-and tmp.17069 7))) (= tmp.17069 0)) (set! tmp.17068 14) (set! tmp.17068 6)) (!= tmp.17068 6)) (begin (set! rax tmp.17045) (set! rax (+ rax tmp.17046)) (jump tmp-ra.17072 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17072 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17072 rbp rax))))) (begin (set! tmp-ra.17073 r15) (if (begin (if (begin (begin (return-point L.rp.2227 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2227) (jump L.+.2226 rbp r15 rdi rsi))) (set! tmp.17071 rax)) (= tmp.17071 88)) (set! tmp.17070 14) (set! tmp.17070 6)) (!= tmp.17070 6)) (begin (set! rax 32) (jump tmp-ra.17073 rbp rax)) (begin (set! rax 48) (jump tmp-ra.17073 rbp rax))))) (module ((new-frames ()) (locals (tmp-ra.17097)) (call-undead ()) (undead-out ((tmp-ra.17097 rbp) (tmp-ra.17097 rax rbp) (rax rbp))) (conflicts ((tmp-ra.17097 (rax rbp)) (rbp (rax tmp-ra.17097)) (rax (rbp tmp-ra.17097))))) (begin (set! tmp-ra.17097 r15) (set! rax 14) (jump tmp-ra.17097 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.17121)) (call-undead ()) (undead-out ((tmp-ra.17121 rbp) (tmp-ra.17121 rax rbp) (rax rbp))) (conflicts ((tmp-ra.17121 (rax rbp)) (rbp (rax tmp-ra.17121)) (rax (rbp tmp-ra.17121))))) (begin (set! tmp-ra.17121 r15) (set! rax 6) (jump tmp-ra.17121 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.17145)) (call-undead ()) (undead-out ((tmp-ra.17145 rbp) (tmp-ra.17145 rax rbp) (rax rbp))) (conflicts ((tmp-ra.17145 (rax rbp)) (rbp (rax tmp-ra.17145)) (rax (rbp tmp-ra.17145))))) (begin (set! tmp-ra.17145 r15) (set! rax 22) (jump tmp-ra.17145 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.17211)) (call-undead ()) (undead-out ((tmp-ra.17211 rbp) (tmp-ra.17211 fv0 rbp) (tmp-ra.17211 fv0 r9 rbp) (tmp-ra.17211 fv0 r9 r8 rbp) (tmp-ra.17211 fv0 r9 r8 rcx rbp) (tmp-ra.17211 fv0 r9 r8 rcx rdx rbp) (tmp-ra.17211 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.17211 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.17211 (rdi rsi rdx rcx r8 r9 fv0 rbp)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 tmp-ra.17211)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp tmp-ra.17211)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 tmp-ra.17211)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 tmp-ra.17211)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 tmp-ra.17211)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 tmp-ra.17211)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 tmp-ra.17211)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 tmp-ra.17211)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0))))) (define L.+.2231 ((new-frames ()) (locals (tmp.17202 tmp.17179 tmp.17203 tmp-ra.17205 tmp.17201 tmp.17180 tmp.17200)) (undead-out ((rdi rsi tmp-ra.17205 rbp) (rsi tmp.17179 tmp-ra.17205 rbp) (tmp.17179 tmp.17180 tmp-ra.17205 rbp) ((((((tmp.17201 tmp.17179 tmp.17180 tmp-ra.17205 rbp) (tmp.17201 tmp.17179 tmp.17180 tmp-ra.17205 rbp)) (tmp.17179 tmp.17180 tmp-ra.17205 rbp)) (tmp.17200 tmp.17179 tmp.17180 tmp-ra.17205 rbp) (tmp.17200 tmp.17179 tmp.17180 tmp-ra.17205 rbp)) (tmp.17179 tmp.17180 tmp-ra.17205 rbp)) ((((((tmp.17203 tmp.17179 tmp.17180 tmp-ra.17205 rbp) (tmp.17203 tmp.17179 tmp.17180 tmp-ra.17205 rbp)) (tmp.17179 tmp.17180 tmp-ra.17205 rbp)) (tmp.17202 tmp.17179 tmp.17180 tmp-ra.17205 rbp) (tmp.17202 tmp.17179 tmp.17180 tmp-ra.17205 rbp)) (tmp.17179 tmp.17180 tmp-ra.17205 rbp)) ((tmp.17180 rax tmp-ra.17205 rbp) (tmp-ra.17205 rax rbp) (rax rbp)) ((tmp-ra.17205 rax rbp) (rax rbp))) ((tmp-ra.17205 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17200 (rbp tmp-ra.17205 tmp.17180 tmp.17179)) (tmp.17180 (rbp tmp-ra.17205 tmp.17179 tmp.17201 tmp.17200 tmp.17203 tmp.17202 rax)) (tmp.17201 (rbp tmp-ra.17205 tmp.17180 tmp.17179)) (tmp-ra.17205 (tmp.17180 tmp.17179 rbp rsi rdi tmp.17201 tmp.17200 tmp.17203 tmp.17202 rax)) (tmp.17203 (rbp tmp-ra.17205 tmp.17180 tmp.17179)) (tmp.17179 (tmp.17180 rbp tmp-ra.17205 rsi tmp.17201 tmp.17200 tmp.17203 tmp.17202)) (tmp.17202 (rbp tmp-ra.17205 tmp.17180 tmp.17179)) (rax (tmp.17180 rbp tmp-ra.17205)) (rbp (tmp.17180 tmp.17179 tmp-ra.17205 tmp.17201 tmp.17200 tmp.17203 tmp.17202 rax)) (rdi (tmp-ra.17205)) (rsi (tmp.17179 tmp-ra.17205))))) (begin (set! tmp-ra.17205 r15) (set! tmp.17179 rdi) (set! tmp.17180 rsi) (if (begin (if (begin (begin (set! tmp.17201 tmp.17180) (set! tmp.17201 (bitwise-and tmp.17201 7))) (= tmp.17201 0)) (set! tmp.17200 14) (set! tmp.17200 6)) (!= tmp.17200 6)) (if (begin (if (begin (begin (set! tmp.17203 tmp.17179) (set! tmp.17203 (bitwise-and tmp.17203 7))) (= tmp.17203 0)) (set! tmp.17202 14) (set! tmp.17202 6)) (!= tmp.17202 6)) (begin (set! rax tmp.17179) (set! rax (+ rax tmp.17180)) (jump tmp-ra.17205 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17205 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17205 rbp rax))))) (define L.F.2228 ((new-frames ((nfv.17207 nfv.17208))) (locals (tmp.17204 nfv.17208 nfv.17207 g.17146 f.17147 e.17148 d.17149 c.17150 b.17151 a.17152 tmp-ra.17206)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 tmp-ra.17206 rbp) (rsi rdx rcx r8 r9 fv0 a.17152 tmp-ra.17206 rbp) (rdx rcx r8 r9 fv0 a.17152 b.17151 tmp-ra.17206 rbp) (rcx r8 r9 fv0 a.17152 b.17151 c.17150 tmp-ra.17206 rbp) (r8 r9 fv0 a.17152 b.17151 c.17150 d.17149 tmp-ra.17206 rbp) (r9 fv0 a.17152 b.17151 c.17150 d.17149 e.17148 tmp-ra.17206 rbp) (fv0 a.17152 b.17151 c.17150 d.17149 e.17148 f.17147 tmp-ra.17206 rbp) (a.17152 b.17151 c.17150 d.17149 e.17148 f.17147 g.17146 tmp-ra.17206 rbp) ((rax tmp-ra.17206 rbp) ((g.17146 f.17147 e.17148 d.17149 c.17150 b.17151 a.17152 nfv.17208 rbp) (f.17147 e.17148 d.17149 c.17150 b.17151 a.17152 nfv.17208 nfv.17207 rbp) (e.17148 d.17149 c.17150 b.17151 a.17152 nfv.17208 nfv.17207 r9 rbp) (d.17149 c.17150 b.17151 a.17152 nfv.17208 nfv.17207 r9 r8 rbp) (c.17150 b.17151 a.17152 nfv.17208 nfv.17207 r9 r8 rcx rbp) (b.17151 a.17152 nfv.17208 nfv.17207 r9 r8 rcx rdx rbp) (a.17152 nfv.17208 nfv.17207 r9 r8 rcx rdx rsi rbp) (nfv.17208 nfv.17207 r9 r8 rcx rdx rsi rdi rbp) (nfv.17208 nfv.17207 r9 r8 rcx rdx rsi rdi r15 rbp) (nfv.17208 nfv.17207 r9 r8 rcx rdx rsi rdi r15 rbp))) (tmp.17204 tmp-ra.17206 rbp) (tmp-ra.17206 rsi rbp) (tmp-ra.17206 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (call-undead (tmp-ra.17206)) (conflicts ((tmp-ra.17206 (tmp.17204 g.17146 f.17147 e.17148 d.17149 c.17150 b.17151 a.17152 rbp fv0 r9 r8 rcx rdx rsi rdi)) (a.17152 (nfv.17207 nfv.17208 g.17146 f.17147 e.17148 d.17149 c.17150 b.17151 rbp tmp-ra.17206 fv0 r9 r8 rcx rdx rsi)) (b.17151 (nfv.17207 nfv.17208 g.17146 f.17147 e.17148 d.17149 c.17150 rbp tmp-ra.17206 a.17152 fv0 r9 r8 rcx rdx)) (c.17150 (nfv.17207 nfv.17208 g.17146 f.17147 e.17148 d.17149 rbp tmp-ra.17206 b.17151 a.17152 fv0 r9 r8 rcx)) (d.17149 (nfv.17207 nfv.17208 g.17146 f.17147 e.17148 rbp tmp-ra.17206 c.17150 b.17151 a.17152 fv0 r9 r8)) (e.17148 (nfv.17207 nfv.17208 g.17146 f.17147 rbp tmp-ra.17206 d.17149 c.17150 b.17151 a.17152 fv0 r9)) (f.17147 (nfv.17207 nfv.17208 g.17146 rbp tmp-ra.17206 e.17148 d.17149 c.17150 b.17151 a.17152 fv0)) (g.17146 (nfv.17208 rbp tmp-ra.17206 f.17147 e.17148 d.17149 c.17150 b.17151 a.17152)) (nfv.17207 (r15 rdi rsi rdx rcx r8 r9 rbp nfv.17208 a.17152 b.17151 c.17150 d.17149 e.17148 f.17147)) (nfv.17208 (r15 rdi rsi rdx rcx r8 r9 nfv.17207 rbp a.17152 b.17151 c.17150 d.17149 e.17148 f.17147 g.17146)) (tmp.17204 (rbp tmp-ra.17206)) (rdi (r15 rbp rsi rdx rcx r8 r9 nfv.17207 nfv.17208 tmp-ra.17206)) (rsi (r15 rdi rbp rdx rcx r8 r9 nfv.17207 nfv.17208 a.17152 tmp-ra.17206)) (rdx (r15 rdi rsi rbp rcx r8 r9 nfv.17207 nfv.17208 b.17151 a.17152 tmp-ra.17206)) (rcx (r15 rdi rsi rdx rbp r8 r9 nfv.17207 nfv.17208 c.17150 b.17151 a.17152 tmp-ra.17206)) (r8 (r15 rdi rsi rdx rcx rbp r9 nfv.17207 nfv.17208 d.17149 c.17150 b.17151 a.17152 tmp-ra.17206)) (r9 (r15 rdi rsi rdx rcx r8 rbp nfv.17207 nfv.17208 e.17148 d.17149 c.17150 b.17151 a.17152 tmp-ra.17206)) (fv0 (f.17147 e.17148 d.17149 c.17150 b.17151 a.17152 tmp-ra.17206)) (rbp (tmp.17204 r15 rdi rsi rdx rcx r8 r9 nfv.17207 nfv.17208 g.17146 f.17147 e.17148 d.17149 c.17150 b.17151 a.17152 tmp-ra.17206)) (r15 (rbp rdi rsi rdx rcx r8 r9 nfv.17207 nfv.17208))))) (begin (set! tmp-ra.17206 r15) (set! a.17152 rdi) (set! b.17151 rsi) (set! c.17150 rdx) (set! d.17149 rcx) (set! e.17148 r8) (set! f.17147 r9) (set! g.17146 fv0) (return-point L.rp.2232 (begin (set! nfv.17208 64) (set! nfv.17207 g.17146) (set! r9 f.17147) (set! r8 e.17148) (set! rcx d.17149) (set! rdx c.17150) (set! rsi b.17151) (set! rdi a.17152) (set! r15 L.rp.2232) (jump L.G.2229 rbp r15 rdi rsi rdx rcx r8 r9 nfv.17207 nfv.17208))) (set! tmp.17204 rax) (set! rsi tmp.17204) (set! rdi 80) (set! r15 tmp-ra.17206) (jump L.+.2231 rbp r15 rdi rsi))) (define L.G.2229 ((new-frames ()) (locals (h.17153 g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 tmp-ra.17209 rbp) (rsi rdx rcx r8 r9 fv0 fv1 a.17160 tmp-ra.17209 rbp) (rdx rcx r8 r9 fv0 fv1 b.17159 a.17160 tmp-ra.17209 rbp) (rcx r8 r9 fv0 fv1 c.17158 b.17159 a.17160 tmp-ra.17209 rbp) (r8 r9 fv0 fv1 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 rbp) (r9 fv0 fv1 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 rbp) (fv0 fv1 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 rbp) (fv1 g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 rbp) (h.17153 g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 rbp) (h.17153 g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 fv2 rbp) (g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 fv2 fv1 rbp) (f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 fv2 fv1 fv0 rbp) (e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 fv2 fv1 fv0 r9 rbp) (d.17157 c.17158 b.17159 a.17160 tmp-ra.17209 fv2 fv1 fv0 r9 r8 rbp) (c.17158 b.17159 a.17160 tmp-ra.17209 fv2 fv1 fv0 r9 r8 rcx rbp) (b.17159 a.17160 tmp-ra.17209 fv2 fv1 fv0 r9 r8 rcx rdx rbp) (a.17160 tmp-ra.17209 fv2 fv1 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.17209 fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (call-undead ()) (conflicts ((tmp-ra.17209 (fv2 h.17153 g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 rbp fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.17160 (fv2 h.17153 g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 rbp tmp-ra.17209 fv1 fv0 r9 r8 rcx rdx rsi)) (b.17159 (fv2 h.17153 g.17154 f.17155 e.17156 d.17157 c.17158 rbp tmp-ra.17209 a.17160 fv1 fv0 r9 r8 rcx rdx)) (c.17158 (fv2 h.17153 g.17154 f.17155 e.17156 d.17157 rbp tmp-ra.17209 a.17160 b.17159 fv1 fv0 r9 r8 rcx)) (d.17157 (fv2 h.17153 g.17154 f.17155 e.17156 rbp tmp-ra.17209 a.17160 b.17159 c.17158 fv1 fv0 r9 r8)) (e.17156 (fv2 h.17153 g.17154 f.17155 rbp tmp-ra.17209 a.17160 b.17159 c.17158 d.17157 fv1 fv0 r9)) (f.17155 (fv2 h.17153 g.17154 rbp tmp-ra.17209 a.17160 b.17159 c.17158 d.17157 e.17156 fv1 fv0)) (g.17154 (fv2 h.17153 rbp tmp-ra.17209 a.17160 b.17159 c.17158 d.17157 e.17156 f.17155 fv1)) (h.17153 (fv2 rbp tmp-ra.17209 a.17160 b.17159 c.17158 d.17157 e.17156 f.17155 g.17154)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.17209)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 fv1 fv2 a.17160 tmp-ra.17209)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 fv1 fv2 b.17159 a.17160 tmp-ra.17209)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 fv1 fv2 c.17158 b.17159 a.17160 tmp-ra.17209)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 fv1 fv2 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 fv1 fv2 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp fv1 fv2 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209)) (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 rbp fv2 g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 h.17153 g.17154 f.17155 e.17156 d.17157 c.17158 b.17159 a.17160 tmp-ra.17209)) (fv2 (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 rbp tmp-ra.17209 a.17160 b.17159 c.17158 d.17157 e.17156 f.17155 g.17154 h.17153)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))))) (begin (set! tmp-ra.17209 r15) (set! a.17160 rdi) (set! b.17159 rsi) (set! c.17158 rdx) (set! d.17157 rcx) (set! e.17156 r8) (set! f.17155 r9) (set! g.17154 fv0) (set! h.17153 fv1) (set! fv2 72) (set! fv1 h.17153) (set! fv0 g.17154) (set! r9 f.17155) (set! r8 e.17156) (set! rcx d.17157) (set! rdx c.17158) (set! rsi b.17159) (set! rdi a.17160) (set! r15 tmp-ra.17209) (jump L.H.2230 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))) (define L.H.2230 ((new-frames (() () () () () () ())) (locals (r7.17176 r6.17175 r5.17174 r4.17173 r3.17172 r2.17171 r1.17170 j.17161 h.17162 g.17163 f.17164 e.17165 d.17166 c.17167 b.17168 a.17169 tmp-ra.17210)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.17210 rbp) (rsi rdx rcx r8 r9 fv0 fv1 fv2 a.17169 tmp-ra.17210 rbp) (rdx rcx r8 r9 fv0 fv1 fv2 a.17169 b.17168 tmp-ra.17210 rbp) (rcx r8 r9 fv0 fv1 fv2 a.17169 b.17168 c.17167 tmp-ra.17210 rbp) (r8 r9 fv0 fv1 fv2 a.17169 b.17168 c.17167 d.17166 tmp-ra.17210 rbp) (r9 fv0 fv1 fv2 a.17169 b.17168 c.17167 d.17166 e.17165 tmp-ra.17210 rbp) (fv0 fv1 fv2 a.17169 b.17168 c.17167 d.17166 e.17165 f.17164 tmp-ra.17210 rbp) (fv1 fv2 a.17169 b.17168 c.17167 d.17166 e.17165 f.17164 g.17163 tmp-ra.17210 rbp) (fv2 a.17169 b.17168 c.17167 d.17166 e.17165 f.17164 g.17163 h.17162 tmp-ra.17210 rbp) (a.17169 b.17168 c.17167 d.17166 e.17165 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((rax c.17167 d.17166 e.17165 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((a.17169 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r1.17170 c.17167 d.17166 e.17165 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((rax d.17166 e.17165 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((r1.17170 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r2.17171 d.17166 e.17165 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((rax e.17165 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((r2.17171 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r3.17172 e.17165 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((rax f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((r3.17172 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r4.17173 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((rax g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((r4.17173 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r5.17174 g.17163 h.17162 j.17161 tmp-ra.17210 rbp) ((rax h.17162 j.17161 tmp-ra.17210 rbp) ((r5.17174 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r6.17175 h.17162 j.17161 tmp-ra.17210 rbp) ((rax j.17161 tmp-ra.17210 rbp) ((r6.17175 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (j.17161 r7.17176 tmp-ra.17210 rbp) (r7.17176 tmp-ra.17210 rsi rbp) (tmp-ra.17210 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (call-undead (c.17167 d.17166 e.17165 f.17164 g.17163 h.17162 j.17161 tmp-ra.17210)) (conflicts ((tmp-ra.17210 (r7.17176 r6.17175 r5.17174 r4.17173 r3.17172 r2.17171 r1.17170 j.17161 h.17162 g.17163 f.17164 e.17165 d.17166 c.17167 b.17168 a.17169 rbp fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.17169 (j.17161 h.17162 g.17163 f.17164 e.17165 d.17166 c.17167 b.17168 rbp tmp-ra.17210 fv2 fv1 fv0 r9 r8 rcx rdx rsi)) (b.17168 (j.17161 h.17162 g.17163 f.17164 e.17165 d.17166 c.17167 rbp tmp-ra.17210 a.17169 fv2 fv1 fv0 r9 r8 rcx rdx)) (c.17167 (r1.17170 j.17161 h.17162 g.17163 f.17164 e.17165 d.17166 rbp tmp-ra.17210 b.17168 a.17169 fv2 fv1 fv0 r9 r8 rcx)) (d.17166 (r2.17171 r1.17170 j.17161 h.17162 g.17163 f.17164 e.17165 rbp tmp-ra.17210 c.17167 b.17168 a.17169 fv2 fv1 fv0 r9 r8)) (e.17165 (r3.17172 r2.17171 r1.17170 j.17161 h.17162 g.17163 f.17164 rbp tmp-ra.17210 d.17166 c.17167 b.17168 a.17169 fv2 fv1 fv0 r9)) (f.17164 (r4.17173 r3.17172 r2.17171 r1.17170 j.17161 h.17162 g.17163 rbp tmp-ra.17210 e.17165 d.17166 c.17167 b.17168 a.17169 fv2 fv1 fv0)) (g.17163 (r5.17174 r4.17173 r3.17172 r2.17171 r1.17170 j.17161 h.17162 rbp tmp-ra.17210 f.17164 e.17165 d.17166 c.17167 b.17168 a.17169 fv2 fv1)) (h.17162 (r6.17175 r5.17174 r4.17173 r3.17172 r2.17171 r1.17170 j.17161 rbp tmp-ra.17210 g.17163 f.17164 e.17165 d.17166 c.17167 b.17168 a.17169 fv2)) (j.17161 (r7.17176 r6.17175 r5.17174 r4.17173 r3.17172 r2.17171 r1.17170 rbp tmp-ra.17210 h.17162 g.17163 f.17164 e.17165 d.17166 c.17167 b.17168 a.17169)) (r1.17170 (rsi rbp tmp-ra.17210 j.17161 h.17162 g.17163 f.17164 e.17165 d.17166 c.17167)) (r2.17171 (rsi rbp tmp-ra.17210 j.17161 h.17162 g.17163 f.17164 e.17165 d.17166)) (r3.17172 (rsi rbp tmp-ra.17210 j.17161 h.17162 g.17163 f.17164 e.17165)) (r4.17173 (rsi rbp tmp-ra.17210 j.17161 h.17162 g.17163 f.17164)) (r5.17174 (rsi rbp tmp-ra.17210 j.17161 h.17162 g.17163)) (r6.17175 (rsi rbp tmp-ra.17210 j.17161 h.17162)) (r7.17176 (rsi rbp tmp-ra.17210 j.17161)) (rdi (r15 rbp rsi tmp-ra.17210)) (rsi (r7.17176 r6.17175 r5.17174 r4.17173 r3.17172 r2.17171 r1.17170 r15 rdi rbp a.17169 tmp-ra.17210)) (rdx (b.17168 a.17169 tmp-ra.17210)) (rcx (c.17167 b.17168 a.17169 tmp-ra.17210)) (r8 (d.17166 c.17167 b.17168 a.17169 tmp-ra.17210)) (r9 (e.17165 d.17166 c.17167 b.17168 a.17169 tmp-ra.17210)) (fv0 (f.17164 e.17165 d.17166 c.17167 b.17168 a.17169 tmp-ra.17210)) (fv1 (g.17163 f.17164 e.17165 d.17166 c.17167 b.17168 a.17169 tmp-ra.17210)) (fv2 (h.17162 g.17163 f.17164 e.17165 d.17166 c.17167 b.17168 a.17169 tmp-ra.17210)) (rbp (r7.17176 r6.17175 r5.17174 r4.17173 r3.17172 r2.17171 r1.17170 r15 rdi rsi j.17161 h.17162 g.17163 f.17164 e.17165 d.17166 c.17167 b.17168 a.17169 tmp-ra.17210)) (r15 (rbp rdi rsi))))) (begin (set! tmp-ra.17210 r15) (set! a.17169 rdi) (set! b.17168 rsi) (set! c.17167 rdx) (set! d.17166 rcx) (set! e.17165 r8) (set! f.17164 r9) (set! g.17163 fv0) (set! h.17162 fv1) (set! j.17161 fv2) (return-point L.rp.2233 (begin (set! rsi b.17168) (set! rdi a.17169) (set! r15 L.rp.2233) (jump L.+.2231 rbp r15 rdi rsi))) (set! r1.17170 rax) (return-point L.rp.2234 (begin (set! rsi c.17167) (set! rdi r1.17170) (set! r15 L.rp.2234) (jump L.+.2231 rbp r15 rdi rsi))) (set! r2.17171 rax) (return-point L.rp.2235 (begin (set! rsi d.17166) (set! rdi r2.17171) (set! r15 L.rp.2235) (jump L.+.2231 rbp r15 rdi rsi))) (set! r3.17172 rax) (return-point L.rp.2236 (begin (set! rsi e.17165) (set! rdi r3.17172) (set! r15 L.rp.2236) (jump L.+.2231 rbp r15 rdi rsi))) (set! r4.17173 rax) (return-point L.rp.2237 (begin (set! rsi f.17164) (set! rdi r4.17173) (set! r15 L.rp.2237) (jump L.+.2231 rbp r15 rdi rsi))) (set! r5.17174 rax) (return-point L.rp.2238 (begin (set! rsi g.17163) (set! rdi r5.17174) (set! r15 L.rp.2238) (jump L.+.2231 rbp r15 rdi rsi))) (set! r6.17175 rax) (return-point L.rp.2239 (begin (set! rsi h.17162) (set! rdi r6.17175) (set! r15 L.rp.2239) (jump L.+.2231 rbp r15 rdi rsi))) (set! r7.17176 rax) (set! rsi j.17161) (set! rdi r7.17176) (set! r15 tmp-ra.17210) (jump L.+.2231 rbp r15 rdi rsi))) (begin (set! tmp-ra.17211 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.17211) (jump L.F.2228 rbp r15 rdi rsi rdx rcx r8 r9 fv0))) (module ((new-frames ()) (locals (tmp-ra.17244)) (call-undead ()) (undead-out ((tmp-ra.17244 rbp) (tmp-ra.17244 rsi rbp) (tmp-ra.17244 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.17244 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.17244)) (rsi (r15 rdi rbp tmp-ra.17244)) (rdi (r15 rbp rsi tmp-ra.17244)) (r15 (rbp rdi rsi))))) (define L.<.2241 ((new-frames ()) (locals (tmp.17239 tmp.17220 tmp.17240 tmp-ra.17242 tmp.17238 tmp.17221 tmp.17237)) (undead-out ((rdi rsi tmp-ra.17242 rbp) (rsi tmp.17220 tmp-ra.17242 rbp) (tmp.17221 tmp.17220 tmp-ra.17242 rbp) ((((((tmp.17238 tmp.17221 tmp.17220 tmp-ra.17242 rbp) (tmp.17238 tmp.17221 tmp.17220 tmp-ra.17242 rbp)) (tmp.17221 tmp.17220 tmp-ra.17242 rbp)) (tmp.17237 tmp.17221 tmp.17220 tmp-ra.17242 rbp) (tmp.17237 tmp.17221 tmp.17220 tmp-ra.17242 rbp)) (tmp.17221 tmp.17220 tmp-ra.17242 rbp)) ((((((tmp.17240 tmp.17221 tmp.17220 tmp-ra.17242 rbp) (tmp.17240 tmp.17221 tmp.17220 tmp-ra.17242 rbp)) (tmp.17221 tmp.17220 tmp-ra.17242 rbp)) (tmp.17239 tmp.17221 tmp.17220 tmp-ra.17242 rbp) (tmp.17239 tmp.17221 tmp.17220 tmp-ra.17242 rbp)) (tmp.17221 tmp.17220 tmp-ra.17242 rbp)) ((tmp-ra.17242 rbp) ((tmp-ra.17242 rax rbp) (rax rbp)) ((tmp-ra.17242 rax rbp) (rax rbp))) ((tmp-ra.17242 rax rbp) (rax rbp))) ((tmp-ra.17242 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17237 (rbp tmp-ra.17242 tmp.17220 tmp.17221)) (tmp.17221 (rbp tmp-ra.17242 tmp.17220 tmp.17238 tmp.17237 tmp.17240 tmp.17239)) (tmp.17238 (rbp tmp-ra.17242 tmp.17220 tmp.17221)) (tmp-ra.17242 (tmp.17221 tmp.17220 rbp rsi rdi tmp.17238 tmp.17237 tmp.17240 tmp.17239 rax)) (tmp.17240 (rbp tmp-ra.17242 tmp.17220 tmp.17221)) (tmp.17220 (tmp.17221 rbp tmp-ra.17242 rsi tmp.17238 tmp.17237 tmp.17240 tmp.17239)) (tmp.17239 (rbp tmp-ra.17242 tmp.17220 tmp.17221)) (rax (rbp tmp-ra.17242)) (rbp (tmp.17221 tmp.17220 tmp-ra.17242 tmp.17238 tmp.17237 tmp.17240 tmp.17239 rax)) (rdi (tmp-ra.17242)) (rsi (tmp.17220 tmp-ra.17242))))) (begin (set! tmp-ra.17242 r15) (set! tmp.17220 rdi) (set! tmp.17221 rsi) (if (begin (if (begin (begin (set! tmp.17238 tmp.17221) (set! tmp.17238 (bitwise-and tmp.17238 7))) (= tmp.17238 0)) (set! tmp.17237 14) (set! tmp.17237 6)) (!= tmp.17237 6)) (if (begin (if (begin (begin (set! tmp.17240 tmp.17220) (set! tmp.17240 (bitwise-and tmp.17240 7))) (= tmp.17240 0)) (set! tmp.17239 14) (set! tmp.17239 6)) (!= tmp.17239 6)) (if (< tmp.17220 tmp.17221) (begin (set! rax 14) (jump tmp-ra.17242 rbp rax)) (begin (set! rax 6) (jump tmp-ra.17242 rbp rax))) (begin (set! rax 830) (jump tmp-ra.17242 rbp rax))) (begin (set! rax 830) (jump tmp-ra.17242 rbp rax))))) (define L.swap.2240 ((new-frames (())) (locals (tmp-ra.17243 x.17213 y.17212 tmp.17241)) (undead-out ((rdi rsi tmp-ra.17243 rbp) (rsi x.17213 tmp-ra.17243 rbp) (y.17212 x.17213 tmp-ra.17243 rbp) (((((rax y.17212 x.17213 tmp-ra.17243 rbp) ((y.17212 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17241 y.17212 x.17213 tmp-ra.17243 rbp)) (y.17212 x.17213 tmp-ra.17243 rbp)) ((tmp-ra.17243 rax rbp) (rax rbp)) ((y.17212 tmp-ra.17243 rsi rbp) (tmp-ra.17243 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (y.17212 x.17213 tmp-ra.17243)) (conflicts ((tmp.17241 (rbp tmp-ra.17243 x.17213 y.17212)) (y.17212 (rbp tmp-ra.17243 x.17213 tmp.17241 rsi)) (x.17213 (y.17212 rbp tmp-ra.17243 rsi tmp.17241)) (tmp-ra.17243 (y.17212 x.17213 rbp tmp.17241 rax rdi rsi)) (rsi (x.17213 r15 rdi rbp tmp-ra.17243 y.17212)) (rbp (y.17212 x.17213 tmp-ra.17243 tmp.17241 rax r15 rdi rsi)) (rdi (r15 rbp rsi tmp-ra.17243)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.17243))))) (begin (set! tmp-ra.17243 r15) (set! x.17213 rdi) (set! y.17212 rsi) (if (begin (begin (return-point L.rp.2242 (begin (set! rsi x.17213) (set! rdi y.17212) (set! r15 L.rp.2242) (jump L.<.2241 rbp r15 rdi rsi))) (set! tmp.17241 rax)) (!= tmp.17241 6)) (begin (set! rax x.17213) (jump tmp-ra.17243 rbp rax)) (begin (set! rsi x.17213) (set! rdi y.17212) (set! r15 tmp-ra.17243) (jump L.swap.2240 rbp r15 rdi rsi))))) (begin (set! tmp-ra.17244 r15) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.17244) (jump L.swap.2240 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.17285)) (call-undead ()) (undead-out ((tmp-ra.17285 rbp) (tmp-ra.17285 rsi rbp) (tmp-ra.17285 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.17285 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.17285)) (rsi (r15 rdi rbp tmp-ra.17285)) (rdi (r15 rbp rsi tmp-ra.17285)) (r15 (rbp rdi rsi))))) (define L.*.2245 ((new-frames ()) (locals (tmp.17272 tmp.17247 tmp.17273 tmp.17274 tmp-ra.17282 tmp.17271 tmp.17248 tmp.17270)) (undead-out ((rdi rsi tmp-ra.17282 rbp) (rsi tmp.17247 tmp-ra.17282 rbp) (tmp.17248 tmp.17247 tmp-ra.17282 rbp) ((((((tmp.17271 tmp.17248 tmp.17247 tmp-ra.17282 rbp) (tmp.17271 tmp.17248 tmp.17247 tmp-ra.17282 rbp)) (tmp.17248 tmp.17247 tmp-ra.17282 rbp)) (tmp.17270 tmp.17248 tmp.17247 tmp-ra.17282 rbp) (tmp.17270 tmp.17248 tmp.17247 tmp-ra.17282 rbp)) (tmp.17248 tmp.17247 tmp-ra.17282 rbp)) ((((((tmp.17273 tmp.17248 tmp.17247 tmp-ra.17282 rbp) (tmp.17273 tmp.17248 tmp.17247 tmp-ra.17282 rbp)) (tmp.17248 tmp.17247 tmp-ra.17282 rbp)) (tmp.17272 tmp.17248 tmp.17247 tmp-ra.17282 rbp) (tmp.17272 tmp.17248 tmp.17247 tmp-ra.17282 rbp)) (tmp.17248 tmp.17247 tmp-ra.17282 rbp)) ((tmp.17274 tmp.17247 tmp-ra.17282 rbp) (tmp.17247 tmp.17274 tmp-ra.17282 rbp) (tmp.17274 rax tmp-ra.17282 rbp) (tmp-ra.17282 rax rbp) (rax rbp)) ((tmp-ra.17282 rax rbp) (rax rbp))) ((tmp-ra.17282 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17270 (rbp tmp-ra.17282 tmp.17247 tmp.17248)) (tmp.17248 (rbp tmp-ra.17282 tmp.17247 tmp.17271 tmp.17270 tmp.17273 tmp.17272)) (tmp.17271 (rbp tmp-ra.17282 tmp.17247 tmp.17248)) (tmp-ra.17282 (tmp.17248 tmp.17247 rbp rsi rdi tmp.17271 tmp.17270 tmp.17273 tmp.17272 tmp.17274 rax)) (tmp.17274 (rax rbp tmp-ra.17282 tmp.17247)) (tmp.17273 (rbp tmp-ra.17282 tmp.17247 tmp.17248)) (tmp.17247 (tmp.17248 rbp tmp-ra.17282 rsi tmp.17271 tmp.17270 tmp.17273 tmp.17272 tmp.17274)) (tmp.17272 (rbp tmp-ra.17282 tmp.17247 tmp.17248)) (rax (tmp.17274 rbp tmp-ra.17282)) (rbp (tmp.17248 tmp.17247 tmp-ra.17282 tmp.17271 tmp.17270 tmp.17273 tmp.17272 tmp.17274 rax)) (rdi (tmp-ra.17282)) (rsi (tmp.17247 tmp-ra.17282))))) (begin (set! tmp-ra.17282 r15) (set! tmp.17247 rdi) (set! tmp.17248 rsi) (if (begin (if (begin (begin (set! tmp.17271 tmp.17248) (set! tmp.17271 (bitwise-and tmp.17271 7))) (= tmp.17271 0)) (set! tmp.17270 14) (set! tmp.17270 6)) (!= tmp.17270 6)) (if (begin (if (begin (begin (set! tmp.17273 tmp.17247) (set! tmp.17273 (bitwise-and tmp.17273 7))) (= tmp.17273 0)) (set! tmp.17272 14) (set! tmp.17272 6)) (!= tmp.17272 6)) (begin (set! tmp.17274 tmp.17248) (set! tmp.17274 (arithmetic-shift-right tmp.17274 3)) (set! rax tmp.17247) (set! rax (* rax tmp.17274)) (jump tmp-ra.17282 rbp rax)) (begin (set! rax 62) (jump tmp-ra.17282 rbp rax))) (begin (set! rax 62) (jump tmp-ra.17282 rbp rax))))) (define L.-.2244 ((new-frames ()) (locals (tmp.17277 tmp.17251 tmp.17278 tmp-ra.17283 tmp.17276 tmp.17252 tmp.17275)) (undead-out ((rdi rsi tmp-ra.17283 rbp) (rsi tmp.17251 tmp-ra.17283 rbp) (tmp.17251 tmp.17252 tmp-ra.17283 rbp) ((((((tmp.17276 tmp.17251 tmp.17252 tmp-ra.17283 rbp) (tmp.17276 tmp.17251 tmp.17252 tmp-ra.17283 rbp)) (tmp.17251 tmp.17252 tmp-ra.17283 rbp)) (tmp.17275 tmp.17251 tmp.17252 tmp-ra.17283 rbp) (tmp.17275 tmp.17251 tmp.17252 tmp-ra.17283 rbp)) (tmp.17251 tmp.17252 tmp-ra.17283 rbp)) ((((((tmp.17278 tmp.17251 tmp.17252 tmp-ra.17283 rbp) (tmp.17278 tmp.17251 tmp.17252 tmp-ra.17283 rbp)) (tmp.17251 tmp.17252 tmp-ra.17283 rbp)) (tmp.17277 tmp.17251 tmp.17252 tmp-ra.17283 rbp) (tmp.17277 tmp.17251 tmp.17252 tmp-ra.17283 rbp)) (tmp.17251 tmp.17252 tmp-ra.17283 rbp)) ((tmp.17252 rax tmp-ra.17283 rbp) (tmp-ra.17283 rax rbp) (rax rbp)) ((tmp-ra.17283 rax rbp) (rax rbp))) ((tmp-ra.17283 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17275 (rbp tmp-ra.17283 tmp.17252 tmp.17251)) (tmp.17252 (rbp tmp-ra.17283 tmp.17251 tmp.17276 tmp.17275 tmp.17278 tmp.17277 rax)) (tmp.17276 (rbp tmp-ra.17283 tmp.17252 tmp.17251)) (tmp-ra.17283 (tmp.17252 tmp.17251 rbp rsi rdi tmp.17276 tmp.17275 tmp.17278 tmp.17277 rax)) (tmp.17278 (rbp tmp-ra.17283 tmp.17252 tmp.17251)) (tmp.17251 (tmp.17252 rbp tmp-ra.17283 rsi tmp.17276 tmp.17275 tmp.17278 tmp.17277)) (tmp.17277 (rbp tmp-ra.17283 tmp.17252 tmp.17251)) (rax (tmp.17252 rbp tmp-ra.17283)) (rbp (tmp.17252 tmp.17251 tmp-ra.17283 tmp.17276 tmp.17275 tmp.17278 tmp.17277 rax)) (rdi (tmp-ra.17283)) (rsi (tmp.17251 tmp-ra.17283))))) (begin (set! tmp-ra.17283 r15) (set! tmp.17251 rdi) (set! tmp.17252 rsi) (if (begin (if (begin (begin (set! tmp.17276 tmp.17252) (set! tmp.17276 (bitwise-and tmp.17276 7))) (= tmp.17276 0)) (set! tmp.17275 14) (set! tmp.17275 6)) (!= tmp.17275 6)) (if (begin (if (begin (begin (set! tmp.17278 tmp.17251) (set! tmp.17278 (bitwise-and tmp.17278 7))) (= tmp.17278 0)) (set! tmp.17277 14) (set! tmp.17277 6)) (!= tmp.17277 6)) (begin (set! rax tmp.17251) (set! rax (- rax tmp.17252)) (jump tmp-ra.17283 rbp rax)) (begin (set! rax 574) (jump tmp-ra.17283 rbp rax))) (begin (set! rax 574) (jump tmp-ra.17283 rbp rax))))) (define L.fact_loop.2243 ((new-frames (() ())) (locals (tmp.17280 tmp.17281 tmp-ra.17284 acc.17245 n.17246 tmp.17279)) (undead-out ((rdi rsi tmp-ra.17284 rbp) (rsi n.17246 tmp-ra.17284 rbp) (n.17246 acc.17245 tmp-ra.17284 rbp) ((((n.17246 acc.17245 tmp-ra.17284 rbp) (tmp.17279 n.17246 acc.17245 tmp-ra.17284 rbp) (tmp.17279 n.17246 acc.17245 tmp-ra.17284 rbp)) (n.17246 acc.17245 tmp-ra.17284 rbp)) ((tmp-ra.17284 rax rbp) (rax rbp)) (((rax acc.17245 n.17246 tmp-ra.17284 rbp) ((n.17246 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc.17245 n.17246 tmp.17280 tmp-ra.17284 rbp) ((rax tmp.17280 tmp-ra.17284 rbp) ((acc.17245 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17281 tmp.17280 tmp-ra.17284 rbp) (tmp.17280 tmp-ra.17284 rsi rbp) (tmp-ra.17284 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (tmp.17280 acc.17245 n.17246 tmp-ra.17284)) (conflicts ((tmp.17279 (rbp tmp-ra.17284 acc.17245 n.17246)) (n.17246 (acc.17245 rbp tmp-ra.17284 tmp.17279 tmp.17280 rsi)) (acc.17245 (rbp tmp-ra.17284 n.17246 tmp.17279 rsi tmp.17280)) (tmp-ra.17284 (acc.17245 n.17246 rbp tmp.17279 rax rdi rsi tmp.17281 tmp.17280)) (tmp.17281 (rbp tmp-ra.17284 tmp.17280)) (tmp.17280 (rsi tmp.17281 rbp tmp-ra.17284 n.17246 acc.17245)) (rsi (tmp-ra.17284 tmp.17280 acc.17245 r15 rdi rbp n.17246)) (rbp (acc.17245 n.17246 tmp-ra.17284 tmp.17279 rax tmp.17281 tmp.17280 r15 rdi rsi)) (rdi (tmp-ra.17284 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.17284))))) (begin (set! tmp-ra.17284 r15) (set! n.17246 rdi) (set! acc.17245 rsi) (if (begin (if (= n.17246 0) (set! tmp.17279 14) (set! tmp.17279 6)) (!= tmp.17279 6)) (begin (set! rax acc.17245) (jump tmp-ra.17284 rbp rax)) (begin (return-point L.rp.2246 (begin (set! rsi 8) (set! rdi n.17246) (set! r15 L.rp.2246) (jump L.-.2244 rbp r15 rdi rsi))) (set! tmp.17280 rax) (return-point L.rp.2247 (begin (set! rsi n.17246) (set! rdi acc.17245) (set! r15 L.rp.2247) (jump L.*.2245 rbp r15 rdi rsi))) (set! tmp.17281 rax) (set! rsi tmp.17281) (set! rdi tmp.17280) (set! r15 tmp-ra.17284) (jump L.fact_loop.2243 rbp r15 rdi rsi))))) (begin (set! tmp-ra.17285 r15) (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.17285) (jump L.fact_loop.2243 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.17325)) (call-undead ()) (undead-out ((tmp-ra.17325 rbp) (tmp-ra.17325 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.17325 (rdi rbp)) (rbp (r15 rdi tmp-ra.17325)) (rdi (r15 rbp tmp-ra.17325)) (r15 (rbp rdi))))) (define L.*.2250 ((new-frames ()) (locals (tmp.17312 tmp.17287 tmp.17313 tmp.17314 tmp-ra.17322 tmp.17311 tmp.17288 tmp.17310)) (undead-out ((rdi rsi tmp-ra.17322 rbp) (rsi tmp.17287 tmp-ra.17322 rbp) (tmp.17288 tmp.17287 tmp-ra.17322 rbp) ((((((tmp.17311 tmp.17288 tmp.17287 tmp-ra.17322 rbp) (tmp.17311 tmp.17288 tmp.17287 tmp-ra.17322 rbp)) (tmp.17288 tmp.17287 tmp-ra.17322 rbp)) (tmp.17310 tmp.17288 tmp.17287 tmp-ra.17322 rbp) (tmp.17310 tmp.17288 tmp.17287 tmp-ra.17322 rbp)) (tmp.17288 tmp.17287 tmp-ra.17322 rbp)) ((((((tmp.17313 tmp.17288 tmp.17287 tmp-ra.17322 rbp) (tmp.17313 tmp.17288 tmp.17287 tmp-ra.17322 rbp)) (tmp.17288 tmp.17287 tmp-ra.17322 rbp)) (tmp.17312 tmp.17288 tmp.17287 tmp-ra.17322 rbp) (tmp.17312 tmp.17288 tmp.17287 tmp-ra.17322 rbp)) (tmp.17288 tmp.17287 tmp-ra.17322 rbp)) ((tmp.17314 tmp.17287 tmp-ra.17322 rbp) (tmp.17287 tmp.17314 tmp-ra.17322 rbp) (tmp.17314 rax tmp-ra.17322 rbp) (tmp-ra.17322 rax rbp) (rax rbp)) ((tmp-ra.17322 rax rbp) (rax rbp))) ((tmp-ra.17322 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17310 (rbp tmp-ra.17322 tmp.17287 tmp.17288)) (tmp.17288 (rbp tmp-ra.17322 tmp.17287 tmp.17311 tmp.17310 tmp.17313 tmp.17312)) (tmp.17311 (rbp tmp-ra.17322 tmp.17287 tmp.17288)) (tmp-ra.17322 (tmp.17288 tmp.17287 rbp rsi rdi tmp.17311 tmp.17310 tmp.17313 tmp.17312 tmp.17314 rax)) (tmp.17314 (rax rbp tmp-ra.17322 tmp.17287)) (tmp.17313 (rbp tmp-ra.17322 tmp.17287 tmp.17288)) (tmp.17287 (tmp.17288 rbp tmp-ra.17322 rsi tmp.17311 tmp.17310 tmp.17313 tmp.17312 tmp.17314)) (tmp.17312 (rbp tmp-ra.17322 tmp.17287 tmp.17288)) (rax (tmp.17314 rbp tmp-ra.17322)) (rbp (tmp.17288 tmp.17287 tmp-ra.17322 tmp.17311 tmp.17310 tmp.17313 tmp.17312 tmp.17314 rax)) (rdi (tmp-ra.17322)) (rsi (tmp.17287 tmp-ra.17322))))) (begin (set! tmp-ra.17322 r15) (set! tmp.17287 rdi) (set! tmp.17288 rsi) (if (begin (if (begin (begin (set! tmp.17311 tmp.17288) (set! tmp.17311 (bitwise-and tmp.17311 7))) (= tmp.17311 0)) (set! tmp.17310 14) (set! tmp.17310 6)) (!= tmp.17310 6)) (if (begin (if (begin (begin (set! tmp.17313 tmp.17287) (set! tmp.17313 (bitwise-and tmp.17313 7))) (= tmp.17313 0)) (set! tmp.17312 14) (set! tmp.17312 6)) (!= tmp.17312 6)) (begin (set! tmp.17314 tmp.17288) (set! tmp.17314 (arithmetic-shift-right tmp.17314 3)) (set! rax tmp.17287) (set! rax (* rax tmp.17314)) (jump tmp-ra.17322 rbp rax)) (begin (set! rax 62) (jump tmp-ra.17322 rbp rax))) (begin (set! rax 62) (jump tmp-ra.17322 rbp rax))))) (define L.-.2249 ((new-frames ()) (locals (tmp.17317 tmp.17291 tmp.17318 tmp-ra.17323 tmp.17316 tmp.17292 tmp.17315)) (undead-out ((rdi rsi tmp-ra.17323 rbp) (rsi tmp.17291 tmp-ra.17323 rbp) (tmp.17291 tmp.17292 tmp-ra.17323 rbp) ((((((tmp.17316 tmp.17291 tmp.17292 tmp-ra.17323 rbp) (tmp.17316 tmp.17291 tmp.17292 tmp-ra.17323 rbp)) (tmp.17291 tmp.17292 tmp-ra.17323 rbp)) (tmp.17315 tmp.17291 tmp.17292 tmp-ra.17323 rbp) (tmp.17315 tmp.17291 tmp.17292 tmp-ra.17323 rbp)) (tmp.17291 tmp.17292 tmp-ra.17323 rbp)) ((((((tmp.17318 tmp.17291 tmp.17292 tmp-ra.17323 rbp) (tmp.17318 tmp.17291 tmp.17292 tmp-ra.17323 rbp)) (tmp.17291 tmp.17292 tmp-ra.17323 rbp)) (tmp.17317 tmp.17291 tmp.17292 tmp-ra.17323 rbp) (tmp.17317 tmp.17291 tmp.17292 tmp-ra.17323 rbp)) (tmp.17291 tmp.17292 tmp-ra.17323 rbp)) ((tmp.17292 rax tmp-ra.17323 rbp) (tmp-ra.17323 rax rbp) (rax rbp)) ((tmp-ra.17323 rax rbp) (rax rbp))) ((tmp-ra.17323 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17315 (rbp tmp-ra.17323 tmp.17292 tmp.17291)) (tmp.17292 (rbp tmp-ra.17323 tmp.17291 tmp.17316 tmp.17315 tmp.17318 tmp.17317 rax)) (tmp.17316 (rbp tmp-ra.17323 tmp.17292 tmp.17291)) (tmp-ra.17323 (tmp.17292 tmp.17291 rbp rsi rdi tmp.17316 tmp.17315 tmp.17318 tmp.17317 rax)) (tmp.17318 (rbp tmp-ra.17323 tmp.17292 tmp.17291)) (tmp.17291 (tmp.17292 rbp tmp-ra.17323 rsi tmp.17316 tmp.17315 tmp.17318 tmp.17317)) (tmp.17317 (rbp tmp-ra.17323 tmp.17292 tmp.17291)) (rax (tmp.17292 rbp tmp-ra.17323)) (rbp (tmp.17292 tmp.17291 tmp-ra.17323 tmp.17316 tmp.17315 tmp.17318 tmp.17317 rax)) (rdi (tmp-ra.17323)) (rsi (tmp.17291 tmp-ra.17323))))) (begin (set! tmp-ra.17323 r15) (set! tmp.17291 rdi) (set! tmp.17292 rsi) (if (begin (if (begin (begin (set! tmp.17316 tmp.17292) (set! tmp.17316 (bitwise-and tmp.17316 7))) (= tmp.17316 0)) (set! tmp.17315 14) (set! tmp.17315 6)) (!= tmp.17315 6)) (if (begin (if (begin (begin (set! tmp.17318 tmp.17291) (set! tmp.17318 (bitwise-and tmp.17318 7))) (= tmp.17318 0)) (set! tmp.17317 14) (set! tmp.17317 6)) (!= tmp.17317 6)) (begin (set! rax tmp.17291) (set! rax (- rax tmp.17292)) (jump tmp-ra.17323 rbp rax)) (begin (set! rax 574) (jump tmp-ra.17323 rbp rax))) (begin (set! rax 574) (jump tmp-ra.17323 rbp rax))))) (define L.fact.2248 ((new-frames (() ())) (locals (tmp.17321 tmp.17320 tmp-ra.17324 x.17286 tmp.17319)) (undead-out ((rdi tmp-ra.17324 rbp) (x.17286 tmp-ra.17324 rbp) ((((x.17286 tmp-ra.17324 rbp) (tmp.17319 x.17286 tmp-ra.17324 rbp) (tmp.17319 x.17286 tmp-ra.17324 rbp)) (x.17286 tmp-ra.17324 rbp)) ((tmp-ra.17324 rax rbp) (rax rbp)) (((rax x.17286 tmp-ra.17324 rbp) ((x.17286 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17321 x.17286 tmp-ra.17324 rbp) ((rax x.17286 tmp-ra.17324 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (tmp.17320 x.17286 tmp-ra.17324 rbp) (x.17286 tmp-ra.17324 rsi rbp) (tmp-ra.17324 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (x.17286 tmp-ra.17324)) (conflicts ((tmp.17319 (rbp tmp-ra.17324 x.17286)) (x.17286 (rbp tmp-ra.17324 tmp.17319 tmp.17320 tmp.17321 rsi)) (tmp-ra.17324 (x.17286 rbp tmp.17319 rax rdi rsi tmp.17320 tmp.17321)) (tmp.17320 (rbp tmp-ra.17324 x.17286)) (tmp.17321 (rbp tmp-ra.17324 x.17286)) (rsi (tmp-ra.17324 r15 rdi rbp x.17286)) (rbp (x.17286 tmp-ra.17324 tmp.17319 rax tmp.17320 tmp.17321 r15 rdi rsi)) (rdi (tmp-ra.17324 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.17324))))) (begin (set! tmp-ra.17324 r15) (set! x.17286 rdi) (if (begin (if (= x.17286 0) (set! tmp.17319 14) (set! tmp.17319 6)) (!= tmp.17319 6)) (begin (set! rax 8) (jump tmp-ra.17324 rbp rax)) (begin (return-point L.rp.2251 (begin (set! rsi 8) (set! rdi x.17286) (set! r15 L.rp.2251) (jump L.-.2249 rbp r15 rdi rsi))) (set! tmp.17321 rax) (return-point L.rp.2252 (begin (set! rdi tmp.17321) (set! r15 L.rp.2252) (jump L.fact.2248 rbp r15 rdi))) (set! tmp.17320 rax) (set! rsi tmp.17320) (set! rdi x.17286) (set! r15 tmp-ra.17324) (jump L.*.2250 rbp r15 rdi rsi))))) (begin (set! tmp-ra.17325 r15) (set! rdi 40) (set! r15 tmp-ra.17325) (jump L.fact.2248 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp-ra.17362)) (call-undead ()) (undead-out ((tmp-ra.17362 rbp) (tmp-ra.17362 rdx rbp) (tmp-ra.17362 rdx rsi rbp) (tmp-ra.17362 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.17362 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.17362)) (rdx (r15 rdi rsi rbp tmp-ra.17362)) (rsi (r15 rdi rbp rdx tmp-ra.17362)) (rdi (r15 rbp rsi rdx tmp-ra.17362)) (r15 (rbp rdi rsi rdx))))) (define L.+.2254 ((new-frames ()) (locals (tmp.17356 tmp.17333 tmp.17357 tmp-ra.17360 tmp.17355 tmp.17334 tmp.17354)) (undead-out ((rdi rsi tmp-ra.17360 rbp) (rsi tmp.17333 tmp-ra.17360 rbp) (tmp.17333 tmp.17334 tmp-ra.17360 rbp) ((((((tmp.17355 tmp.17333 tmp.17334 tmp-ra.17360 rbp) (tmp.17355 tmp.17333 tmp.17334 tmp-ra.17360 rbp)) (tmp.17333 tmp.17334 tmp-ra.17360 rbp)) (tmp.17354 tmp.17333 tmp.17334 tmp-ra.17360 rbp) (tmp.17354 tmp.17333 tmp.17334 tmp-ra.17360 rbp)) (tmp.17333 tmp.17334 tmp-ra.17360 rbp)) ((((((tmp.17357 tmp.17333 tmp.17334 tmp-ra.17360 rbp) (tmp.17357 tmp.17333 tmp.17334 tmp-ra.17360 rbp)) (tmp.17333 tmp.17334 tmp-ra.17360 rbp)) (tmp.17356 tmp.17333 tmp.17334 tmp-ra.17360 rbp) (tmp.17356 tmp.17333 tmp.17334 tmp-ra.17360 rbp)) (tmp.17333 tmp.17334 tmp-ra.17360 rbp)) ((tmp.17334 rax tmp-ra.17360 rbp) (tmp-ra.17360 rax rbp) (rax rbp)) ((tmp-ra.17360 rax rbp) (rax rbp))) ((tmp-ra.17360 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17354 (rbp tmp-ra.17360 tmp.17334 tmp.17333)) (tmp.17334 (rbp tmp-ra.17360 tmp.17333 tmp.17355 tmp.17354 tmp.17357 tmp.17356 rax)) (tmp.17355 (rbp tmp-ra.17360 tmp.17334 tmp.17333)) (tmp-ra.17360 (tmp.17334 tmp.17333 rbp rsi rdi tmp.17355 tmp.17354 tmp.17357 tmp.17356 rax)) (tmp.17357 (rbp tmp-ra.17360 tmp.17334 tmp.17333)) (tmp.17333 (tmp.17334 rbp tmp-ra.17360 rsi tmp.17355 tmp.17354 tmp.17357 tmp.17356)) (tmp.17356 (rbp tmp-ra.17360 tmp.17334 tmp.17333)) (rax (tmp.17334 rbp tmp-ra.17360)) (rbp (tmp.17334 tmp.17333 tmp-ra.17360 tmp.17355 tmp.17354 tmp.17357 tmp.17356 rax)) (rdi (tmp-ra.17360)) (rsi (tmp.17333 tmp-ra.17360))))) (begin (set! tmp-ra.17360 r15) (set! tmp.17333 rdi) (set! tmp.17334 rsi) (if (begin (if (begin (begin (set! tmp.17355 tmp.17334) (set! tmp.17355 (bitwise-and tmp.17355 7))) (= tmp.17355 0)) (set! tmp.17354 14) (set! tmp.17354 6)) (!= tmp.17354 6)) (if (begin (if (begin (begin (set! tmp.17357 tmp.17333) (set! tmp.17357 (bitwise-and tmp.17357 7))) (= tmp.17357 0)) (set! tmp.17356 14) (set! tmp.17356 6)) (!= tmp.17356 6)) (begin (set! rax tmp.17333) (set! rax (+ rax tmp.17334)) (jump tmp-ra.17360 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17360 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17360 rbp rax))))) (define L.fib_loop.2253 ((new-frames (() ())) (locals (tmp.17359 acc2.17326 new-acc2.17330 new-n.17329 tmp-ra.17361 acc1.17327 n.17328 tmp.17358)) (undead-out ((rdi rsi rdx tmp-ra.17361 rbp) (rsi rdx n.17328 tmp-ra.17361 rbp) (rdx n.17328 acc1.17327 tmp-ra.17361 rbp) (acc2.17326 n.17328 acc1.17327 tmp-ra.17361 rbp) ((((acc2.17326 n.17328 acc1.17327 tmp-ra.17361 rbp) (tmp.17358 acc2.17326 n.17328 acc1.17327 tmp-ra.17361 rbp) (tmp.17358 acc2.17326 n.17328 acc1.17327 tmp-ra.17361 rbp)) (acc2.17326 n.17328 acc1.17327 tmp-ra.17361 rbp)) ((tmp-ra.17361 rax rbp) (rax rbp)) ((((acc1.17327 n.17328 acc2.17326 tmp-ra.17361 rbp) (tmp.17359 acc1.17327 n.17328 acc2.17326 tmp-ra.17361 rbp) (tmp.17359 acc1.17327 n.17328 acc2.17326 tmp-ra.17361 rbp)) (acc1.17327 n.17328 acc2.17326 tmp-ra.17361 rbp)) ((tmp-ra.17361 rax rbp) (rax rbp)) (((rax acc1.17327 acc2.17326 tmp-ra.17361 rbp) ((n.17328 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.17327 acc2.17326 new-n.17329 tmp-ra.17361 rbp) ((rax acc2.17326 new-n.17329 tmp-ra.17361 rbp) ((acc1.17327 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.17330 acc2.17326 new-n.17329 tmp-ra.17361 rbp) (acc2.17326 new-n.17329 tmp-ra.17361 rdx rbp) (new-n.17329 tmp-ra.17361 rdx rsi rbp) (tmp-ra.17361 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (call-undead (new-n.17329 acc1.17327 acc2.17326 tmp-ra.17361)) (conflicts ((tmp.17358 (rbp tmp-ra.17361 acc1.17327 n.17328 acc2.17326)) (n.17328 (acc2.17326 acc1.17327 rbp tmp-ra.17361 rdx tmp.17358 tmp.17359 rsi)) (acc1.17327 (acc2.17326 rbp tmp-ra.17361 n.17328 rdx tmp.17358 tmp.17359 rsi new-n.17329)) (tmp-ra.17361 (acc2.17326 acc1.17327 n.17328 rbp tmp.17358 tmp.17359 rax rdi rsi rdx new-acc2.17330 new-n.17329)) (new-n.17329 (rsi rdx new-acc2.17330 rbp tmp-ra.17361 acc2.17326 acc1.17327)) (new-acc2.17330 (rbp tmp-ra.17361 new-n.17329 acc2.17326)) (acc2.17326 (rbp tmp-ra.17361 acc1.17327 n.17328 tmp.17358 tmp.17359 rdx new-acc2.17330 new-n.17329)) (tmp.17359 (rbp tmp-ra.17361 acc2.17326 n.17328 acc1.17327)) (rsi (rdx tmp-ra.17361 new-n.17329 acc1.17327 r15 rdi rbp n.17328)) (rbp (acc2.17326 acc1.17327 n.17328 tmp-ra.17361 tmp.17358 tmp.17359 rax rdx new-acc2.17330 new-n.17329 r15 rdi rsi)) (rdi (rdx tmp-ra.17361 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.17327 n.17328 r15 rdi rsi rbp tmp-ra.17361 new-n.17329 acc2.17326)) (rax (rbp tmp-ra.17361))))) (begin (set! tmp-ra.17361 r15) (set! n.17328 rdi) (set! acc1.17327 rsi) (set! acc2.17326 rdx) (if (begin (if (= n.17328 0) (set! tmp.17358 14) (set! tmp.17358 6)) (!= tmp.17358 6)) (begin (set! rax acc1.17327) (jump tmp-ra.17361 rbp rax)) (if (begin (if (= n.17328 8) (set! tmp.17359 14) (set! tmp.17359 6)) (!= tmp.17359 6)) (begin (set! rax acc2.17326) (jump tmp-ra.17361 rbp rax)) (begin (return-point L.rp.2255 (begin (set! rsi -8) (set! rdi n.17328) (set! r15 L.rp.2255) (jump L.+.2254 rbp r15 rdi rsi))) (set! new-n.17329 rax) (return-point L.rp.2256 (begin (set! rsi acc2.17326) (set! rdi acc1.17327) (set! r15 L.rp.2256) (jump L.+.2254 rbp r15 rdi rsi))) (set! new-acc2.17330 rax) (set! rdx new-acc2.17330) (set! rsi acc2.17326) (set! rdi new-n.17329) (set! r15 tmp-ra.17361) (jump L.fib_loop.2253 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.17362 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.17362) (jump L.fib_loop.2253 rbp r15 rdi rsi rdx))) (module ((new-frames ()) (locals (tmp-ra.17399)) (call-undead ()) (undead-out ((tmp-ra.17399 rbp) (tmp-ra.17399 rdx rbp) (tmp-ra.17399 rdx rsi rbp) (tmp-ra.17399 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.17399 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.17399)) (rdx (r15 rdi rsi rbp tmp-ra.17399)) (rsi (r15 rdi rbp rdx tmp-ra.17399)) (rdi (r15 rbp rsi rdx tmp-ra.17399)) (r15 (rbp rdi rsi rdx))))) (define L.+.2258 ((new-frames ()) (locals (tmp.17393 tmp.17370 tmp.17394 tmp-ra.17397 tmp.17392 tmp.17371 tmp.17391)) (undead-out ((rdi rsi tmp-ra.17397 rbp) (rsi tmp.17370 tmp-ra.17397 rbp) (tmp.17370 tmp.17371 tmp-ra.17397 rbp) ((((((tmp.17392 tmp.17370 tmp.17371 tmp-ra.17397 rbp) (tmp.17392 tmp.17370 tmp.17371 tmp-ra.17397 rbp)) (tmp.17370 tmp.17371 tmp-ra.17397 rbp)) (tmp.17391 tmp.17370 tmp.17371 tmp-ra.17397 rbp) (tmp.17391 tmp.17370 tmp.17371 tmp-ra.17397 rbp)) (tmp.17370 tmp.17371 tmp-ra.17397 rbp)) ((((((tmp.17394 tmp.17370 tmp.17371 tmp-ra.17397 rbp) (tmp.17394 tmp.17370 tmp.17371 tmp-ra.17397 rbp)) (tmp.17370 tmp.17371 tmp-ra.17397 rbp)) (tmp.17393 tmp.17370 tmp.17371 tmp-ra.17397 rbp) (tmp.17393 tmp.17370 tmp.17371 tmp-ra.17397 rbp)) (tmp.17370 tmp.17371 tmp-ra.17397 rbp)) ((tmp.17371 rax tmp-ra.17397 rbp) (tmp-ra.17397 rax rbp) (rax rbp)) ((tmp-ra.17397 rax rbp) (rax rbp))) ((tmp-ra.17397 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17391 (rbp tmp-ra.17397 tmp.17371 tmp.17370)) (tmp.17371 (rbp tmp-ra.17397 tmp.17370 tmp.17392 tmp.17391 tmp.17394 tmp.17393 rax)) (tmp.17392 (rbp tmp-ra.17397 tmp.17371 tmp.17370)) (tmp-ra.17397 (tmp.17371 tmp.17370 rbp rsi rdi tmp.17392 tmp.17391 tmp.17394 tmp.17393 rax)) (tmp.17394 (rbp tmp-ra.17397 tmp.17371 tmp.17370)) (tmp.17370 (tmp.17371 rbp tmp-ra.17397 rsi tmp.17392 tmp.17391 tmp.17394 tmp.17393)) (tmp.17393 (rbp tmp-ra.17397 tmp.17371 tmp.17370)) (rax (tmp.17371 rbp tmp-ra.17397)) (rbp (tmp.17371 tmp.17370 tmp-ra.17397 tmp.17392 tmp.17391 tmp.17394 tmp.17393 rax)) (rdi (tmp-ra.17397)) (rsi (tmp.17370 tmp-ra.17397))))) (begin (set! tmp-ra.17397 r15) (set! tmp.17370 rdi) (set! tmp.17371 rsi) (if (begin (if (begin (begin (set! tmp.17392 tmp.17371) (set! tmp.17392 (bitwise-and tmp.17392 7))) (= tmp.17392 0)) (set! tmp.17391 14) (set! tmp.17391 6)) (!= tmp.17391 6)) (if (begin (if (begin (begin (set! tmp.17394 tmp.17370) (set! tmp.17394 (bitwise-and tmp.17394 7))) (= tmp.17394 0)) (set! tmp.17393 14) (set! tmp.17393 6)) (!= tmp.17393 6)) (begin (set! rax tmp.17370) (set! rax (+ rax tmp.17371)) (jump tmp-ra.17397 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17397 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17397 rbp rax))))) (define L.fib_loop.2257 ((new-frames (() ())) (locals (tmp.17396 acc2.17363 new-acc2.17367 new-n.17366 tmp-ra.17398 acc1.17364 n.17365 tmp.17395)) (undead-out ((rdi rsi rdx tmp-ra.17398 rbp) (rsi rdx n.17365 tmp-ra.17398 rbp) (rdx n.17365 acc1.17364 tmp-ra.17398 rbp) (acc2.17363 n.17365 acc1.17364 tmp-ra.17398 rbp) ((((acc2.17363 n.17365 acc1.17364 tmp-ra.17398 rbp) (tmp.17395 acc2.17363 n.17365 acc1.17364 tmp-ra.17398 rbp) (tmp.17395 acc2.17363 n.17365 acc1.17364 tmp-ra.17398 rbp)) (acc2.17363 n.17365 acc1.17364 tmp-ra.17398 rbp)) ((tmp-ra.17398 rax rbp) (rax rbp)) ((((acc1.17364 n.17365 acc2.17363 tmp-ra.17398 rbp) (tmp.17396 acc1.17364 n.17365 acc2.17363 tmp-ra.17398 rbp) (tmp.17396 acc1.17364 n.17365 acc2.17363 tmp-ra.17398 rbp)) (acc1.17364 n.17365 acc2.17363 tmp-ra.17398 rbp)) ((tmp-ra.17398 rax rbp) (rax rbp)) (((rax acc1.17364 acc2.17363 tmp-ra.17398 rbp) ((n.17365 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.17364 acc2.17363 new-n.17366 tmp-ra.17398 rbp) ((rax acc2.17363 new-n.17366 tmp-ra.17398 rbp) ((acc1.17364 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.17367 acc2.17363 new-n.17366 tmp-ra.17398 rbp) (acc2.17363 new-n.17366 tmp-ra.17398 rdx rbp) (new-n.17366 tmp-ra.17398 rdx rsi rbp) (tmp-ra.17398 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (call-undead (new-n.17366 acc1.17364 acc2.17363 tmp-ra.17398)) (conflicts ((tmp.17395 (rbp tmp-ra.17398 acc1.17364 n.17365 acc2.17363)) (n.17365 (acc2.17363 acc1.17364 rbp tmp-ra.17398 rdx tmp.17395 tmp.17396 rsi)) (acc1.17364 (acc2.17363 rbp tmp-ra.17398 n.17365 rdx tmp.17395 tmp.17396 rsi new-n.17366)) (tmp-ra.17398 (acc2.17363 acc1.17364 n.17365 rbp tmp.17395 tmp.17396 rax rdi rsi rdx new-acc2.17367 new-n.17366)) (new-n.17366 (rsi rdx new-acc2.17367 rbp tmp-ra.17398 acc2.17363 acc1.17364)) (new-acc2.17367 (rbp tmp-ra.17398 new-n.17366 acc2.17363)) (acc2.17363 (rbp tmp-ra.17398 acc1.17364 n.17365 tmp.17395 tmp.17396 rdx new-acc2.17367 new-n.17366)) (tmp.17396 (rbp tmp-ra.17398 acc2.17363 n.17365 acc1.17364)) (rsi (rdx tmp-ra.17398 new-n.17366 acc1.17364 r15 rdi rbp n.17365)) (rbp (acc2.17363 acc1.17364 n.17365 tmp-ra.17398 tmp.17395 tmp.17396 rax rdx new-acc2.17367 new-n.17366 r15 rdi rsi)) (rdi (rdx tmp-ra.17398 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.17364 n.17365 r15 rdi rsi rbp tmp-ra.17398 new-n.17366 acc2.17363)) (rax (rbp tmp-ra.17398))))) (begin (set! tmp-ra.17398 r15) (set! n.17365 rdi) (set! acc1.17364 rsi) (set! acc2.17363 rdx) (if (begin (if (= n.17365 0) (set! tmp.17395 14) (set! tmp.17395 6)) (!= tmp.17395 6)) (begin (set! rax acc1.17364) (jump tmp-ra.17398 rbp rax)) (if (begin (if (= n.17365 8) (set! tmp.17396 14) (set! tmp.17396 6)) (!= tmp.17396 6)) (begin (set! rax acc2.17363) (jump tmp-ra.17398 rbp rax)) (begin (return-point L.rp.2259 (begin (set! rsi -8) (set! rdi n.17365) (set! r15 L.rp.2259) (jump L.+.2258 rbp r15 rdi rsi))) (set! new-n.17366 rax) (return-point L.rp.2260 (begin (set! rsi acc2.17363) (set! rdi acc1.17364) (set! r15 L.rp.2260) (jump L.+.2258 rbp r15 rdi rsi))) (set! new-acc2.17367 rax) (set! rdx new-acc2.17367) (set! rsi acc2.17363) (set! rdi new-n.17366) (set! r15 tmp-ra.17398) (jump L.fib_loop.2257 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.17399 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.17399) (jump L.fib_loop.2257 rbp r15 rdi rsi rdx)))) ((module ((new-frames ()) (locals (tmp-ra.17425)) (call-undead ()) (undead-out ((tmp-ra.17425 rbp) (tmp-ra.17425 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.17425 (rdi rbp)) (rbp (r15 rdi tmp-ra.17425)) (rdi (r15 rbp tmp-ra.17425)) (r15 (rbp rdi)))) (assignment ())) (define L.id.2261 ((new-frames ()) (locals (tmp-ra.17424 x.17400)) (undead-out ((rdi tmp-ra.17424 rbp) (x.17400 tmp-ra.17424 rbp) (tmp-ra.17424 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.17424 (rax x.17400 rbp rdi)) (x.17400 (rbp tmp-ra.17424)) (rdi (tmp-ra.17424)) (rbp (rax x.17400 tmp-ra.17424)) (rax (rbp tmp-ra.17424)))) (assignment ())) (begin (set! tmp-ra.17424 r15) (set! x.17400 rdi) (set! rax x.17400) (jump tmp-ra.17424 rbp rax))) (begin (set! tmp-ra.17425 r15) (set! rdi 40) (set! r15 tmp-ra.17425) (jump L.id.2261 rbp r15 rdi))) (module ((new-frames (())) (locals (y.17427)) (call-undead (tmp-ra.17457)) (undead-out ((tmp-ra.17457 rbp) ((rax tmp-ra.17457 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (y.17427 tmp-ra.17457 rbp) (tmp-ra.17457 rsi rbp) (tmp-ra.17457 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.17457 (rdi rsi y.17427 rbp)) (y.17427 (rbp tmp-ra.17457)) (rbp (rsi y.17427 r15 rdi tmp-ra.17457)) (rdi (rsi tmp-ra.17457 r15 rbp)) (r15 (rsi rbp rdi)) (rsi (r15 rdi rbp tmp-ra.17457)))) (assignment ((tmp-ra.17457 fv0)))) (define L.+.2263 ((new-frames ()) (locals (tmp.17451 tmp.17431 tmp.17452 tmp-ra.17455 tmp.17454 tmp.17430 tmp.17453)) (undead-out ((rdi rsi tmp-ra.17455 rbp) (rsi tmp.17430 tmp-ra.17455 rbp) (tmp.17430 tmp.17431 tmp-ra.17455 rbp) ((((((tmp.17452 tmp.17430 tmp.17431 tmp-ra.17455 rbp) (tmp.17452 tmp.17430 tmp.17431 tmp-ra.17455 rbp)) (tmp.17430 tmp.17431 tmp-ra.17455 rbp)) (tmp.17451 tmp.17430 tmp.17431 tmp-ra.17455 rbp) (tmp.17451 tmp.17430 tmp.17431 tmp-ra.17455 rbp)) (tmp.17430 tmp.17431 tmp-ra.17455 rbp)) ((((((tmp.17454 tmp.17430 tmp.17431 tmp-ra.17455 rbp) (tmp.17454 tmp.17430 tmp.17431 tmp-ra.17455 rbp)) (tmp.17430 tmp.17431 tmp-ra.17455 rbp)) (tmp.17453 tmp.17430 tmp.17431 tmp-ra.17455 rbp) (tmp.17453 tmp.17430 tmp.17431 tmp-ra.17455 rbp)) (tmp.17430 tmp.17431 tmp-ra.17455 rbp)) ((tmp.17431 rax tmp-ra.17455 rbp) (tmp-ra.17455 rax rbp) (rax rbp)) ((tmp-ra.17455 rax rbp) (rax rbp))) ((tmp-ra.17455 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17451 (rbp tmp-ra.17455 tmp.17431 tmp.17430)) (tmp.17431 (rbp tmp-ra.17455 tmp.17430 tmp.17452 tmp.17451 tmp.17454 tmp.17453 rax)) (tmp.17452 (rbp tmp-ra.17455 tmp.17431 tmp.17430)) (tmp-ra.17455 (tmp.17431 tmp.17430 rbp rsi rdi tmp.17452 tmp.17451 tmp.17454 tmp.17453 rax)) (tmp.17454 (rbp tmp-ra.17455 tmp.17431 tmp.17430)) (tmp.17430 (tmp.17431 rbp tmp-ra.17455 rsi tmp.17452 tmp.17451 tmp.17454 tmp.17453)) (tmp.17453 (rbp tmp-ra.17455 tmp.17431 tmp.17430)) (rax (tmp.17431 rbp tmp-ra.17455)) (rbp (tmp.17431 tmp.17430 tmp-ra.17455 tmp.17452 tmp.17451 tmp.17454 tmp.17453 rax)) (rdi (tmp-ra.17455)) (rsi (tmp.17430 tmp-ra.17455)))) (assignment ())) (begin (set! tmp-ra.17455 r15) (set! tmp.17430 rdi) (set! tmp.17431 rsi) (if (begin (if (begin (begin (set! tmp.17452 tmp.17431) (set! tmp.17452 (bitwise-and tmp.17452 7))) (= tmp.17452 0)) (set! tmp.17451 14) (set! tmp.17451 6)) (!= tmp.17451 6)) (if (begin (if (begin (begin (set! tmp.17454 tmp.17430) (set! tmp.17454 (bitwise-and tmp.17454 7))) (= tmp.17454 0)) (set! tmp.17453 14) (set! tmp.17453 6)) (!= tmp.17453 6)) (begin (set! rax tmp.17430) (set! rax (+ rax tmp.17431)) (jump tmp-ra.17455 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17455 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17455 rbp rax))))) (define L.id.2262 ((new-frames ()) (locals (tmp-ra.17456 x.17426)) (undead-out ((rdi tmp-ra.17456 rbp) (x.17426 tmp-ra.17456 rbp) (tmp-ra.17456 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.17456 (rax x.17426 rbp rdi)) (x.17426 (rbp tmp-ra.17456)) (rdi (tmp-ra.17456)) (rbp (rax x.17426 tmp-ra.17456)) (rax (rbp tmp-ra.17456)))) (assignment ())) (begin (set! tmp-ra.17456 r15) (set! x.17426 rdi) (set! rax x.17426) (jump tmp-ra.17456 rbp rax))) (begin (set! tmp-ra.17457 r15) (return-point L.rp.2264 (begin (set! rdi 40) (set! r15 L.rp.2264) (jump L.id.2262 rbp r15 rdi))) (set! y.17427 rax) (set! rsi y.17427) (set! rdi 40) (set! r15 tmp-ra.17457) (jump L.+.2263 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.17494)) (call-undead ()) (undead-out ((tmp-ra.17494 rbp) (tmp-ra.17494 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.17494 (rdi rbp)) (rbp (r15 rdi tmp-ra.17494)) (rdi (r15 rbp tmp-ra.17494)) (r15 (rbp rdi)))) (assignment ())) (define L.+.2267 ((new-frames ()) (locals (tmp.17485 tmp.17465 tmp.17486 tmp-ra.17491 tmp.17488 tmp.17464 tmp.17487)) (undead-out ((rdi rsi tmp-ra.17491 rbp) (rsi tmp.17464 tmp-ra.17491 rbp) (tmp.17464 tmp.17465 tmp-ra.17491 rbp) ((((((tmp.17486 tmp.17464 tmp.17465 tmp-ra.17491 rbp) (tmp.17486 tmp.17464 tmp.17465 tmp-ra.17491 rbp)) (tmp.17464 tmp.17465 tmp-ra.17491 rbp)) (tmp.17485 tmp.17464 tmp.17465 tmp-ra.17491 rbp) (tmp.17485 tmp.17464 tmp.17465 tmp-ra.17491 rbp)) (tmp.17464 tmp.17465 tmp-ra.17491 rbp)) ((((((tmp.17488 tmp.17464 tmp.17465 tmp-ra.17491 rbp) (tmp.17488 tmp.17464 tmp.17465 tmp-ra.17491 rbp)) (tmp.17464 tmp.17465 tmp-ra.17491 rbp)) (tmp.17487 tmp.17464 tmp.17465 tmp-ra.17491 rbp) (tmp.17487 tmp.17464 tmp.17465 tmp-ra.17491 rbp)) (tmp.17464 tmp.17465 tmp-ra.17491 rbp)) ((tmp.17465 rax tmp-ra.17491 rbp) (tmp-ra.17491 rax rbp) (rax rbp)) ((tmp-ra.17491 rax rbp) (rax rbp))) ((tmp-ra.17491 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17485 (rbp tmp-ra.17491 tmp.17465 tmp.17464)) (tmp.17465 (rbp tmp-ra.17491 tmp.17464 tmp.17486 tmp.17485 tmp.17488 tmp.17487 rax)) (tmp.17486 (rbp tmp-ra.17491 tmp.17465 tmp.17464)) (tmp-ra.17491 (tmp.17465 tmp.17464 rbp rsi rdi tmp.17486 tmp.17485 tmp.17488 tmp.17487 rax)) (tmp.17488 (rbp tmp-ra.17491 tmp.17465 tmp.17464)) (tmp.17464 (tmp.17465 rbp tmp-ra.17491 rsi tmp.17486 tmp.17485 tmp.17488 tmp.17487)) (tmp.17487 (rbp tmp-ra.17491 tmp.17465 tmp.17464)) (rax (tmp.17465 rbp tmp-ra.17491)) (rbp (tmp.17465 tmp.17464 tmp-ra.17491 tmp.17486 tmp.17485 tmp.17488 tmp.17487 rax)) (rdi (tmp-ra.17491)) (rsi (tmp.17464 tmp-ra.17491)))) (assignment ())) (begin (set! tmp-ra.17491 r15) (set! tmp.17464 rdi) (set! tmp.17465 rsi) (if (begin (if (begin (begin (set! tmp.17486 tmp.17465) (set! tmp.17486 (bitwise-and tmp.17486 7))) (= tmp.17486 0)) (set! tmp.17485 14) (set! tmp.17485 6)) (!= tmp.17485 6)) (if (begin (if (begin (begin (set! tmp.17488 tmp.17464) (set! tmp.17488 (bitwise-and tmp.17488 7))) (= tmp.17488 0)) (set! tmp.17487 14) (set! tmp.17487 6)) (!= tmp.17487 6)) (begin (set! rax tmp.17464) (set! rax (+ rax tmp.17465)) (jump tmp-ra.17491 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17491 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17491 rbp rax))))) (define L.odd?.2265 ((new-frames (())) (locals (tmp.17489 x.17458 y.17459)) (undead-out ((rdi tmp-ra.17492 rbp) (x.17458 tmp-ra.17492 rbp) ((((x.17458 tmp-ra.17492 rbp) (tmp.17489 x.17458 tmp-ra.17492 rbp) (tmp.17489 x.17458 tmp-ra.17492 rbp)) (x.17458 tmp-ra.17492 rbp)) ((tmp-ra.17492 rax rbp) (rax rbp)) (((rax tmp-ra.17492 rbp) ((x.17458 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.17459 tmp-ra.17492 rbp) (tmp-ra.17492 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (call-undead (tmp-ra.17492)) (conflicts ((tmp.17489 (rbp tmp-ra.17492 x.17458)) (x.17458 (rbp tmp-ra.17492 tmp.17489 rsi)) (tmp-ra.17492 (x.17458 rbp tmp.17489 rax rdi y.17459)) (y.17459 (rbp tmp-ra.17492)) (rsi (r15 rdi rbp x.17458)) (rbp (x.17458 tmp-ra.17492 tmp.17489 rax y.17459 r15 rdi rsi)) (rdi (tmp-ra.17492 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.17492)))) (assignment ((tmp-ra.17492 fv0)))) (begin (set! tmp-ra.17492 r15) (set! x.17458 rdi) (if (begin (if (= x.17458 0) (set! tmp.17489 14) (set! tmp.17489 6)) (!= tmp.17489 6)) (begin (set! rax 0) (jump tmp-ra.17492 rbp rax)) (begin (return-point L.rp.2268 (begin (set! rsi -8) (set! rdi x.17458) (set! r15 L.rp.2268) (jump L.+.2267 rbp r15 rdi rsi))) (set! y.17459 rax) (set! rdi y.17459) (set! r15 tmp-ra.17492) (jump L.even?.2266 rbp r15 rdi))))) (define L.even?.2266 ((new-frames (())) (locals (tmp.17490 x.17460 y.17461)) (undead-out ((rdi tmp-ra.17493 rbp) (x.17460 tmp-ra.17493 rbp) ((((x.17460 tmp-ra.17493 rbp) (tmp.17490 x.17460 tmp-ra.17493 rbp) (tmp.17490 x.17460 tmp-ra.17493 rbp)) (x.17460 tmp-ra.17493 rbp)) ((tmp-ra.17493 rax rbp) (rax rbp)) (((rax tmp-ra.17493 rbp) ((x.17460 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.17461 tmp-ra.17493 rbp) (tmp-ra.17493 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (call-undead (tmp-ra.17493)) (conflicts ((tmp.17490 (rbp tmp-ra.17493 x.17460)) (x.17460 (rbp tmp-ra.17493 tmp.17490 rsi)) (tmp-ra.17493 (x.17460 rbp tmp.17490 rax rdi y.17461)) (y.17461 (rbp tmp-ra.17493)) (rsi (r15 rdi rbp x.17460)) (rbp (x.17460 tmp-ra.17493 tmp.17490 rax y.17461 r15 rdi rsi)) (rdi (tmp-ra.17493 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.17493)))) (assignment ((tmp-ra.17493 fv0)))) (begin (set! tmp-ra.17493 r15) (set! x.17460 rdi) (if (begin (if (= x.17460 0) (set! tmp.17490 14) (set! tmp.17490 6)) (!= tmp.17490 6)) (begin (set! rax 8) (jump tmp-ra.17493 rbp rax)) (begin (return-point L.rp.2269 (begin (set! rsi -8) (set! rdi x.17460) (set! r15 L.rp.2269) (jump L.+.2267 rbp r15 rdi rsi))) (set! y.17461 rax) (set! rdi y.17461) (set! r15 tmp-ra.17493) (jump L.odd?.2265 rbp r15 rdi))))) (begin (set! tmp-ra.17494 r15) (set! rdi 40) (set! r15 tmp-ra.17494) (jump L.even?.2266 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp-ra.17523)) (call-undead ()) (undead-out ((tmp-ra.17523 rbp) (tmp-ra.17523 rax rbp) (rax rbp))) (conflicts ((tmp-ra.17523 (rax rbp)) (rbp (rax tmp-ra.17523)) (rax (rbp tmp-ra.17523)))) (assignment ())) (define L.zero.2270 ((new-frames ()) (locals (tmp-ra.17522 v0.17498 v1.17497 v2.17496 v3.17495)) (undead-out ((rdi rsi rdx rcx tmp-ra.17522 rbp) (rsi rdx rcx tmp-ra.17522 rbp) (rdx rcx tmp-ra.17522 rbp) (rcx tmp-ra.17522 rbp) (tmp-ra.17522 rbp) (tmp-ra.17522 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.17522 (rax v3.17495 v2.17496 v1.17497 v0.17498 rbp rcx rdx rsi rdi)) (v0.17498 (rbp tmp-ra.17522 rcx rdx rsi)) (v1.17497 (rbp tmp-ra.17522 rcx rdx)) (v2.17496 (rbp tmp-ra.17522 rcx)) (v3.17495 (rbp tmp-ra.17522)) (rdi (tmp-ra.17522)) (rsi (v0.17498 tmp-ra.17522)) (rdx (v1.17497 v0.17498 tmp-ra.17522)) (rcx (v2.17496 v1.17497 v0.17498 tmp-ra.17522)) (rbp (rax v3.17495 v2.17496 v1.17497 v0.17498 tmp-ra.17522)) (rax (rbp tmp-ra.17522)))) (assignment ())) (begin (set! tmp-ra.17522 r15) (set! v0.17498 rdi) (set! v1.17497 rsi) (set! v2.17496 rdx) (set! v3.17495 rcx) (set! rax 0) (jump tmp-ra.17522 rbp rax))) (begin (set! tmp-ra.17523 r15) (set! rax 0) (jump tmp-ra.17523 rbp rax))) (module ((new-frames ()) (locals (y.17525 tmp-ra.17550)) (call-undead ()) (undead-out ((tmp-ra.17550 rbp) (tmp-ra.17550 y.17525 rbp) (tmp-ra.17550 y.17525 rdi rbp) (y.17525 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.17525 (r15 rdi rbp tmp-ra.17550)) (tmp-ra.17550 (rdi y.17525 rbp)) (rbp (r15 rdi y.17525 tmp-ra.17550)) (rdi (r15 rbp y.17525 tmp-ra.17550)) (r15 (rbp rdi y.17525)))) (assignment ())) (define L.id.2271 ((new-frames ()) (locals (tmp-ra.17549 x.17524)) (undead-out ((rdi tmp-ra.17549 rbp) (x.17524 tmp-ra.17549 rbp) (tmp-ra.17549 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.17549 (rax x.17524 rbp rdi)) (x.17524 (rbp tmp-ra.17549)) (rdi (tmp-ra.17549)) (rbp (rax x.17524 tmp-ra.17549)) (rax (rbp tmp-ra.17549)))) (assignment ())) (begin (set! tmp-ra.17549 r15) (set! x.17524 rdi) (set! rax x.17524) (jump tmp-ra.17549 rbp rax))) (begin (set! tmp-ra.17550 r15) (set! y.17525 L.id.2271) (set! rdi 40) (set! r15 tmp-ra.17550) (jump y.17525 rbp r15 rdi))) (module ((new-frames ()) (locals (y.17553 tmp-ra.17579 tmp.17580)) (call-undead ()) (undead-out ((tmp-ra.17579 rbp) (((tmp.17580 tmp-ra.17579 rbp) (tmp-ra.17579 rbp)) (tmp-ra.17579 y.17553 rbp) (tmp-ra.17579 y.17553 rbp)) (tmp-ra.17579 y.17553 rdi rbp) (y.17553 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.17553 (r15 rdi rbp tmp-ra.17579)) (tmp-ra.17579 (rdi tmp.17580 y.17553 rbp)) (tmp.17580 (rbp tmp-ra.17579)) (rbp (r15 rdi tmp.17580 y.17553 tmp-ra.17579)) (rdi (r15 rbp y.17553 tmp-ra.17579)) (r15 (rbp rdi y.17553)))) (assignment ())) (define L.id1.2272 ((new-frames ()) (locals (tmp-ra.17577 x.17551)) (undead-out ((rdi tmp-ra.17577 rbp) (x.17551 tmp-ra.17577 rbp) (tmp-ra.17577 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.17577 (rax x.17551 rbp rdi)) (x.17551 (rbp tmp-ra.17577)) (rdi (tmp-ra.17577)) (rbp (rax x.17551 tmp-ra.17577)) (rax (rbp tmp-ra.17577)))) (assignment ())) (begin (set! tmp-ra.17577 r15) (set! x.17551 rdi) (set! rax x.17551) (jump tmp-ra.17577 rbp rax))) (define L.id2.2273 ((new-frames ()) (locals (tmp-ra.17578 x.17552)) (undead-out ((rdi tmp-ra.17578 rbp) (x.17552 tmp-ra.17578 rbp) (tmp-ra.17578 rax rbp) (rax rbp))) (call-undead ()) (conflicts ((tmp-ra.17578 (rax x.17552 rbp rdi)) (x.17552 (rbp tmp-ra.17578)) (rdi (tmp-ra.17578)) (rbp (rax x.17552 tmp-ra.17578)) (rax (rbp tmp-ra.17578)))) (assignment ())) (begin (set! tmp-ra.17578 r15) (set! x.17552 rdi) (set! rax x.17552) (jump tmp-ra.17578 rbp rax))) (begin (set! tmp-ra.17579 r15) (if (begin (set! tmp.17580 14) (!= tmp.17580 6)) (set! y.17553 L.id1.2272) (set! y.17553 L.id2.2273)) (set! rdi 40) (set! r15 tmp-ra.17579) (jump y.17553 rbp r15 rdi))) (module ((new-frames (() ())) (locals (tmp.17614)) (call-undead (tmp.17613 tmp-ra.17617)) (undead-out ((tmp-ra.17617 rbp) ((rax tmp-ra.17617 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17613 tmp-ra.17617 rbp) ((rax tmp.17613 tmp-ra.17617 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17614 tmp.17613 tmp-ra.17617 rbp) (tmp.17613 tmp-ra.17617 rsi rbp) (tmp-ra.17617 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.17617 (rdi rsi tmp.17614 tmp.17613 rbp)) (tmp.17613 (rsi tmp.17614 rbp tmp-ra.17617)) (tmp.17614 (rbp tmp-ra.17617 tmp.17613)) (rbp (tmp.17614 tmp.17613 r15 rdi rsi tmp-ra.17617)) (rsi (tmp-ra.17617 tmp.17613 r15 rdi rbp)) (rdi (tmp-ra.17617 r15 rbp rsi)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.17617 fv0) (tmp.17613 fv1)))) (define L.*.2275 ((new-frames ()) (locals (tmp.17604 tmp.17582 tmp.17605 tmp-ra.17615 tmp.17608 tmp.17607 tmp.17581 tmp.17606)) (undead-out ((rdi rsi tmp-ra.17615 rbp) (rsi tmp.17581 tmp-ra.17615 rbp) (tmp.17582 tmp.17581 tmp-ra.17615 rbp) ((((((tmp.17605 tmp.17582 tmp.17581 tmp-ra.17615 rbp) (tmp.17605 tmp.17582 tmp.17581 tmp-ra.17615 rbp)) (tmp.17582 tmp.17581 tmp-ra.17615 rbp)) (tmp.17604 tmp.17582 tmp.17581 tmp-ra.17615 rbp) (tmp.17604 tmp.17582 tmp.17581 tmp-ra.17615 rbp)) (tmp.17582 tmp.17581 tmp-ra.17615 rbp)) ((((((tmp.17607 tmp.17582 tmp.17581 tmp-ra.17615 rbp) (tmp.17607 tmp.17582 tmp.17581 tmp-ra.17615 rbp)) (tmp.17582 tmp.17581 tmp-ra.17615 rbp)) (tmp.17606 tmp.17582 tmp.17581 tmp-ra.17615 rbp) (tmp.17606 tmp.17582 tmp.17581 tmp-ra.17615 rbp)) (tmp.17582 tmp.17581 tmp-ra.17615 rbp)) ((tmp.17608 tmp.17581 tmp-ra.17615 rbp) (tmp.17581 tmp.17608 tmp-ra.17615 rbp) (tmp.17608 rax tmp-ra.17615 rbp) (tmp-ra.17615 rax rbp) (rax rbp)) ((tmp-ra.17615 rax rbp) (rax rbp))) ((tmp-ra.17615 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17604 (rbp tmp-ra.17615 tmp.17581 tmp.17582)) (tmp.17582 (rbp tmp-ra.17615 tmp.17581 tmp.17605 tmp.17604 tmp.17607 tmp.17606)) (tmp.17605 (rbp tmp-ra.17615 tmp.17581 tmp.17582)) (tmp-ra.17615 (tmp.17582 tmp.17581 rbp rsi rdi tmp.17605 tmp.17604 tmp.17607 tmp.17606 tmp.17608 rax)) (tmp.17608 (rax rbp tmp-ra.17615 tmp.17581)) (tmp.17607 (rbp tmp-ra.17615 tmp.17581 tmp.17582)) (tmp.17581 (tmp.17582 rbp tmp-ra.17615 rsi tmp.17605 tmp.17604 tmp.17607 tmp.17606 tmp.17608)) (tmp.17606 (rbp tmp-ra.17615 tmp.17581 tmp.17582)) (rax (tmp.17608 rbp tmp-ra.17615)) (rbp (tmp.17582 tmp.17581 tmp-ra.17615 tmp.17605 tmp.17604 tmp.17607 tmp.17606 tmp.17608 rax)) (rdi (tmp-ra.17615)) (rsi (tmp.17581 tmp-ra.17615)))) (assignment ())) (begin (set! tmp-ra.17615 r15) (set! tmp.17581 rdi) (set! tmp.17582 rsi) (if (begin (if (begin (begin (set! tmp.17605 tmp.17582) (set! tmp.17605 (bitwise-and tmp.17605 7))) (= tmp.17605 0)) (set! tmp.17604 14) (set! tmp.17604 6)) (!= tmp.17604 6)) (if (begin (if (begin (begin (set! tmp.17607 tmp.17581) (set! tmp.17607 (bitwise-and tmp.17607 7))) (= tmp.17607 0)) (set! tmp.17606 14) (set! tmp.17606 6)) (!= tmp.17606 6)) (begin (set! tmp.17608 tmp.17582) (set! tmp.17608 (arithmetic-shift-right tmp.17608 3)) (set! rax tmp.17581) (set! rax (* rax tmp.17608)) (jump tmp-ra.17615 rbp rax)) (begin (set! rax 62) (jump tmp-ra.17615 rbp rax))) (begin (set! rax 62) (jump tmp-ra.17615 rbp rax))))) (define L.+.2274 ((new-frames ()) (locals (tmp.17609 tmp.17584 tmp.17610 tmp-ra.17616 tmp.17612 tmp.17583 tmp.17611)) (undead-out ((rdi rsi tmp-ra.17616 rbp) (rsi tmp.17583 tmp-ra.17616 rbp) (tmp.17583 tmp.17584 tmp-ra.17616 rbp) ((((((tmp.17610 tmp.17583 tmp.17584 tmp-ra.17616 rbp) (tmp.17610 tmp.17583 tmp.17584 tmp-ra.17616 rbp)) (tmp.17583 tmp.17584 tmp-ra.17616 rbp)) (tmp.17609 tmp.17583 tmp.17584 tmp-ra.17616 rbp) (tmp.17609 tmp.17583 tmp.17584 tmp-ra.17616 rbp)) (tmp.17583 tmp.17584 tmp-ra.17616 rbp)) ((((((tmp.17612 tmp.17583 tmp.17584 tmp-ra.17616 rbp) (tmp.17612 tmp.17583 tmp.17584 tmp-ra.17616 rbp)) (tmp.17583 tmp.17584 tmp-ra.17616 rbp)) (tmp.17611 tmp.17583 tmp.17584 tmp-ra.17616 rbp) (tmp.17611 tmp.17583 tmp.17584 tmp-ra.17616 rbp)) (tmp.17583 tmp.17584 tmp-ra.17616 rbp)) ((tmp.17584 rax tmp-ra.17616 rbp) (tmp-ra.17616 rax rbp) (rax rbp)) ((tmp-ra.17616 rax rbp) (rax rbp))) ((tmp-ra.17616 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17609 (rbp tmp-ra.17616 tmp.17584 tmp.17583)) (tmp.17584 (rbp tmp-ra.17616 tmp.17583 tmp.17610 tmp.17609 tmp.17612 tmp.17611 rax)) (tmp.17610 (rbp tmp-ra.17616 tmp.17584 tmp.17583)) (tmp-ra.17616 (tmp.17584 tmp.17583 rbp rsi rdi tmp.17610 tmp.17609 tmp.17612 tmp.17611 rax)) (tmp.17612 (rbp tmp-ra.17616 tmp.17584 tmp.17583)) (tmp.17583 (tmp.17584 rbp tmp-ra.17616 rsi tmp.17610 tmp.17609 tmp.17612 tmp.17611)) (tmp.17611 (rbp tmp-ra.17616 tmp.17584 tmp.17583)) (rax (tmp.17584 rbp tmp-ra.17616)) (rbp (tmp.17584 tmp.17583 tmp-ra.17616 tmp.17610 tmp.17609 tmp.17612 tmp.17611 rax)) (rdi (tmp-ra.17616)) (rsi (tmp.17583 tmp-ra.17616)))) (assignment ())) (begin (set! tmp-ra.17616 r15) (set! tmp.17583 rdi) (set! tmp.17584 rsi) (if (begin (if (begin (begin (set! tmp.17610 tmp.17584) (set! tmp.17610 (bitwise-and tmp.17610 7))) (= tmp.17610 0)) (set! tmp.17609 14) (set! tmp.17609 6)) (!= tmp.17609 6)) (if (begin (if (begin (begin (set! tmp.17612 tmp.17583) (set! tmp.17612 (bitwise-and tmp.17612 7))) (= tmp.17612 0)) (set! tmp.17611 14) (set! tmp.17611 6)) (!= tmp.17611 6)) (begin (set! rax tmp.17583) (set! rax (+ rax tmp.17584)) (jump tmp-ra.17616 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17616 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17616 rbp rax))))) (begin (set! tmp-ra.17617 r15) (return-point L.rp.2276 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2276) (jump L.+.2274 rbp r15 rdi rsi))) (set! tmp.17613 rax) (return-point L.rp.2277 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2277) (jump L.*.2275 rbp r15 rdi rsi))) (set! tmp.17614 rax) (set! rsi tmp.17614) (set! rdi tmp.17613) (set! r15 tmp-ra.17617) (jump L.+.2274 rbp r15 rdi rsi))) (module ((new-frames (())) (locals (tmp.17645 tmp.17646)) (call-undead (tmp-ra.17648)) (undead-out ((tmp-ra.17648 rbp) (((((((rax tmp-ra.17648 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17646 tmp-ra.17648 rbp)) (tmp-ra.17648 rbp)) (tmp.17645 tmp-ra.17648 rbp) (tmp.17645 tmp-ra.17648 rbp)) (tmp-ra.17648 rbp)) ((tmp-ra.17648 rax rbp) (rax rbp)) ((tmp-ra.17648 rax rbp) (rax rbp))))) (conflicts ((tmp.17645 (rbp tmp-ra.17648)) (tmp.17646 (rbp tmp-ra.17648)) (tmp-ra.17648 (rbp tmp.17646 tmp.17645 rax)) (rax (rbp tmp-ra.17648)) (rbp (tmp-ra.17648 r15 rdi rsi tmp.17646 tmp.17645 rax)) (rsi (r15 rdi rbp)) (rdi (r15 rbp rsi)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.17648 fv0)))) (define L.+.2278 ((new-frames ()) (locals (tmp.17641 tmp.17621 tmp.17642 tmp-ra.17647 tmp.17644 tmp.17620 tmp.17643)) (undead-out ((rdi rsi tmp-ra.17647 rbp) (rsi tmp.17620 tmp-ra.17647 rbp) (tmp.17620 tmp.17621 tmp-ra.17647 rbp) ((((((tmp.17642 tmp.17620 tmp.17621 tmp-ra.17647 rbp) (tmp.17642 tmp.17620 tmp.17621 tmp-ra.17647 rbp)) (tmp.17620 tmp.17621 tmp-ra.17647 rbp)) (tmp.17641 tmp.17620 tmp.17621 tmp-ra.17647 rbp) (tmp.17641 tmp.17620 tmp.17621 tmp-ra.17647 rbp)) (tmp.17620 tmp.17621 tmp-ra.17647 rbp)) ((((((tmp.17644 tmp.17620 tmp.17621 tmp-ra.17647 rbp) (tmp.17644 tmp.17620 tmp.17621 tmp-ra.17647 rbp)) (tmp.17620 tmp.17621 tmp-ra.17647 rbp)) (tmp.17643 tmp.17620 tmp.17621 tmp-ra.17647 rbp) (tmp.17643 tmp.17620 tmp.17621 tmp-ra.17647 rbp)) (tmp.17620 tmp.17621 tmp-ra.17647 rbp)) ((tmp.17621 rax tmp-ra.17647 rbp) (tmp-ra.17647 rax rbp) (rax rbp)) ((tmp-ra.17647 rax rbp) (rax rbp))) ((tmp-ra.17647 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17641 (rbp tmp-ra.17647 tmp.17621 tmp.17620)) (tmp.17621 (rbp tmp-ra.17647 tmp.17620 tmp.17642 tmp.17641 tmp.17644 tmp.17643 rax)) (tmp.17642 (rbp tmp-ra.17647 tmp.17621 tmp.17620)) (tmp-ra.17647 (tmp.17621 tmp.17620 rbp rsi rdi tmp.17642 tmp.17641 tmp.17644 tmp.17643 rax)) (tmp.17644 (rbp tmp-ra.17647 tmp.17621 tmp.17620)) (tmp.17620 (tmp.17621 rbp tmp-ra.17647 rsi tmp.17642 tmp.17641 tmp.17644 tmp.17643)) (tmp.17643 (rbp tmp-ra.17647 tmp.17621 tmp.17620)) (rax (tmp.17621 rbp tmp-ra.17647)) (rbp (tmp.17621 tmp.17620 tmp-ra.17647 tmp.17642 tmp.17641 tmp.17644 tmp.17643 rax)) (rdi (tmp-ra.17647)) (rsi (tmp.17620 tmp-ra.17647)))) (assignment ())) (begin (set! tmp-ra.17647 r15) (set! tmp.17620 rdi) (set! tmp.17621 rsi) (if (begin (if (begin (begin (set! tmp.17642 tmp.17621) (set! tmp.17642 (bitwise-and tmp.17642 7))) (= tmp.17642 0)) (set! tmp.17641 14) (set! tmp.17641 6)) (!= tmp.17641 6)) (if (begin (if (begin (begin (set! tmp.17644 tmp.17620) (set! tmp.17644 (bitwise-and tmp.17644 7))) (= tmp.17644 0)) (set! tmp.17643 14) (set! tmp.17643 6)) (!= tmp.17643 6)) (begin (set! rax tmp.17620) (set! rax (+ rax tmp.17621)) (jump tmp-ra.17647 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17647 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17647 rbp rax))))) (begin (set! tmp-ra.17648 r15) (if (begin (if (begin (begin (return-point L.rp.2279 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2279) (jump L.+.2278 rbp r15 rdi rsi))) (set! tmp.17646 rax)) (= tmp.17646 88)) (set! tmp.17645 14) (set! tmp.17645 6)) (!= tmp.17645 6)) (begin (set! rax 32) (jump tmp-ra.17648 rbp rax)) (begin (set! rax 48) (jump tmp-ra.17648 rbp rax))))) (module ((new-frames ()) (locals (tmp-ra.17672)) (call-undead ()) (undead-out ((tmp-ra.17672 rbp) (tmp-ra.17672 rax rbp) (rax rbp))) (conflicts ((tmp-ra.17672 (rax rbp)) (rbp (rax tmp-ra.17672)) (rax (rbp tmp-ra.17672)))) (assignment ())) (begin (set! tmp-ra.17672 r15) (set! rax 14) (jump tmp-ra.17672 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.17696)) (call-undead ()) (undead-out ((tmp-ra.17696 rbp) (tmp-ra.17696 rax rbp) (rax rbp))) (conflicts ((tmp-ra.17696 (rax rbp)) (rbp (rax tmp-ra.17696)) (rax (rbp tmp-ra.17696)))) (assignment ())) (begin (set! tmp-ra.17696 r15) (set! rax 6) (jump tmp-ra.17696 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.17720)) (call-undead ()) (undead-out ((tmp-ra.17720 rbp) (tmp-ra.17720 rax rbp) (rax rbp))) (conflicts ((tmp-ra.17720 (rax rbp)) (rbp (rax tmp-ra.17720)) (rax (rbp tmp-ra.17720)))) (assignment ())) (begin (set! tmp-ra.17720 r15) (set! rax 22) (jump tmp-ra.17720 rbp rax))) (module ((new-frames ()) (locals (tmp-ra.17786)) (call-undead ()) (undead-out ((tmp-ra.17786 rbp) (tmp-ra.17786 fv0 rbp) (tmp-ra.17786 fv0 r9 rbp) (tmp-ra.17786 fv0 r9 r8 rbp) (tmp-ra.17786 fv0 r9 r8 rcx rbp) (tmp-ra.17786 fv0 r9 r8 rcx rdx rbp) (tmp-ra.17786 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.17786 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.17786 (rdi rsi rdx rcx r8 r9 fv0 rbp)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 tmp-ra.17786)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp tmp-ra.17786)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 tmp-ra.17786)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 tmp-ra.17786)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 tmp-ra.17786)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 tmp-ra.17786)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 tmp-ra.17786)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 tmp-ra.17786)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0)))) (assignment ())) (define L.+.2283 ((new-frames ()) (locals (tmp.17775 tmp.17755 tmp.17776 tmp-ra.17780 tmp.17778 tmp.17754 tmp.17777)) (undead-out ((rdi rsi tmp-ra.17780 rbp) (rsi tmp.17754 tmp-ra.17780 rbp) (tmp.17754 tmp.17755 tmp-ra.17780 rbp) ((((((tmp.17776 tmp.17754 tmp.17755 tmp-ra.17780 rbp) (tmp.17776 tmp.17754 tmp.17755 tmp-ra.17780 rbp)) (tmp.17754 tmp.17755 tmp-ra.17780 rbp)) (tmp.17775 tmp.17754 tmp.17755 tmp-ra.17780 rbp) (tmp.17775 tmp.17754 tmp.17755 tmp-ra.17780 rbp)) (tmp.17754 tmp.17755 tmp-ra.17780 rbp)) ((((((tmp.17778 tmp.17754 tmp.17755 tmp-ra.17780 rbp) (tmp.17778 tmp.17754 tmp.17755 tmp-ra.17780 rbp)) (tmp.17754 tmp.17755 tmp-ra.17780 rbp)) (tmp.17777 tmp.17754 tmp.17755 tmp-ra.17780 rbp) (tmp.17777 tmp.17754 tmp.17755 tmp-ra.17780 rbp)) (tmp.17754 tmp.17755 tmp-ra.17780 rbp)) ((tmp.17755 rax tmp-ra.17780 rbp) (tmp-ra.17780 rax rbp) (rax rbp)) ((tmp-ra.17780 rax rbp) (rax rbp))) ((tmp-ra.17780 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17775 (rbp tmp-ra.17780 tmp.17755 tmp.17754)) (tmp.17755 (rbp tmp-ra.17780 tmp.17754 tmp.17776 tmp.17775 tmp.17778 tmp.17777 rax)) (tmp.17776 (rbp tmp-ra.17780 tmp.17755 tmp.17754)) (tmp-ra.17780 (tmp.17755 tmp.17754 rbp rsi rdi tmp.17776 tmp.17775 tmp.17778 tmp.17777 rax)) (tmp.17778 (rbp tmp-ra.17780 tmp.17755 tmp.17754)) (tmp.17754 (tmp.17755 rbp tmp-ra.17780 rsi tmp.17776 tmp.17775 tmp.17778 tmp.17777)) (tmp.17777 (rbp tmp-ra.17780 tmp.17755 tmp.17754)) (rax (tmp.17755 rbp tmp-ra.17780)) (rbp (tmp.17755 tmp.17754 tmp-ra.17780 tmp.17776 tmp.17775 tmp.17778 tmp.17777 rax)) (rdi (tmp-ra.17780)) (rsi (tmp.17754 tmp-ra.17780)))) (assignment ())) (begin (set! tmp-ra.17780 r15) (set! tmp.17754 rdi) (set! tmp.17755 rsi) (if (begin (if (begin (begin (set! tmp.17776 tmp.17755) (set! tmp.17776 (bitwise-and tmp.17776 7))) (= tmp.17776 0)) (set! tmp.17775 14) (set! tmp.17775 6)) (!= tmp.17775 6)) (if (begin (if (begin (begin (set! tmp.17778 tmp.17754) (set! tmp.17778 (bitwise-and tmp.17778 7))) (= tmp.17778 0)) (set! tmp.17777 14) (set! tmp.17777 6)) (!= tmp.17777 6)) (begin (set! rax tmp.17754) (set! rax (+ rax tmp.17755)) (jump tmp-ra.17780 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17780 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17780 rbp rax))))) (define L.F.2280 ((new-frames ((nfv.17782 nfv.17783))) (locals (a.17727 b.17726 c.17725 d.17724 e.17723 f.17722 g.17721 nfv.17782 nfv.17783 tmp.17779)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 tmp-ra.17781 rbp) (rsi rdx rcx r8 r9 fv0 a.17727 tmp-ra.17781 rbp) (rdx rcx r8 r9 fv0 a.17727 b.17726 tmp-ra.17781 rbp) (rcx r8 r9 fv0 a.17727 b.17726 c.17725 tmp-ra.17781 rbp) (r8 r9 fv0 a.17727 b.17726 c.17725 d.17724 tmp-ra.17781 rbp) (r9 fv0 a.17727 b.17726 c.17725 d.17724 e.17723 tmp-ra.17781 rbp) (fv0 a.17727 b.17726 c.17725 d.17724 e.17723 f.17722 tmp-ra.17781 rbp) (a.17727 b.17726 c.17725 d.17724 e.17723 f.17722 g.17721 tmp-ra.17781 rbp) ((rax tmp-ra.17781 rbp) ((g.17721 f.17722 e.17723 d.17724 c.17725 b.17726 a.17727 nfv.17783 rbp) (f.17722 e.17723 d.17724 c.17725 b.17726 a.17727 nfv.17783 nfv.17782 rbp) (e.17723 d.17724 c.17725 b.17726 a.17727 nfv.17783 nfv.17782 r9 rbp) (d.17724 c.17725 b.17726 a.17727 nfv.17783 nfv.17782 r9 r8 rbp) (c.17725 b.17726 a.17727 nfv.17783 nfv.17782 r9 r8 rcx rbp) (b.17726 a.17727 nfv.17783 nfv.17782 r9 r8 rcx rdx rbp) (a.17727 nfv.17783 nfv.17782 r9 r8 rcx rdx rsi rbp) (nfv.17783 nfv.17782 r9 r8 rcx rdx rsi rdi rbp) (nfv.17783 nfv.17782 r9 r8 rcx rdx rsi rdi r15 rbp) (nfv.17783 nfv.17782 r9 r8 rcx rdx rsi rdi r15 rbp))) (tmp.17779 tmp-ra.17781 rbp) (tmp-ra.17781 rsi rbp) (tmp-ra.17781 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (call-undead (tmp-ra.17781)) (conflicts ((tmp-ra.17781 (tmp.17779 g.17721 f.17722 e.17723 d.17724 c.17725 b.17726 a.17727 rbp fv0 r9 r8 rcx rdx rsi rdi)) (a.17727 (nfv.17782 nfv.17783 g.17721 f.17722 e.17723 d.17724 c.17725 b.17726 rbp tmp-ra.17781 fv0 r9 r8 rcx rdx rsi)) (b.17726 (nfv.17782 nfv.17783 g.17721 f.17722 e.17723 d.17724 c.17725 rbp tmp-ra.17781 a.17727 fv0 r9 r8 rcx rdx)) (c.17725 (nfv.17782 nfv.17783 g.17721 f.17722 e.17723 d.17724 rbp tmp-ra.17781 b.17726 a.17727 fv0 r9 r8 rcx)) (d.17724 (nfv.17782 nfv.17783 g.17721 f.17722 e.17723 rbp tmp-ra.17781 c.17725 b.17726 a.17727 fv0 r9 r8)) (e.17723 (nfv.17782 nfv.17783 g.17721 f.17722 rbp tmp-ra.17781 d.17724 c.17725 b.17726 a.17727 fv0 r9)) (f.17722 (nfv.17782 nfv.17783 g.17721 rbp tmp-ra.17781 e.17723 d.17724 c.17725 b.17726 a.17727 fv0)) (g.17721 (nfv.17783 rbp tmp-ra.17781 f.17722 e.17723 d.17724 c.17725 b.17726 a.17727)) (nfv.17782 (r15 rdi rsi rdx rcx r8 r9 rbp nfv.17783 a.17727 b.17726 c.17725 d.17724 e.17723 f.17722)) (nfv.17783 (r15 rdi rsi rdx rcx r8 r9 nfv.17782 rbp a.17727 b.17726 c.17725 d.17724 e.17723 f.17722 g.17721)) (tmp.17779 (rbp tmp-ra.17781)) (rdi (r15 rbp rsi rdx rcx r8 r9 nfv.17782 nfv.17783 tmp-ra.17781)) (rsi (r15 rdi rbp rdx rcx r8 r9 nfv.17782 nfv.17783 a.17727 tmp-ra.17781)) (rdx (r15 rdi rsi rbp rcx r8 r9 nfv.17782 nfv.17783 b.17726 a.17727 tmp-ra.17781)) (rcx (r15 rdi rsi rdx rbp r8 r9 nfv.17782 nfv.17783 c.17725 b.17726 a.17727 tmp-ra.17781)) (r8 (r15 rdi rsi rdx rcx rbp r9 nfv.17782 nfv.17783 d.17724 c.17725 b.17726 a.17727 tmp-ra.17781)) (r9 (r15 rdi rsi rdx rcx r8 rbp nfv.17782 nfv.17783 e.17723 d.17724 c.17725 b.17726 a.17727 tmp-ra.17781)) (fv0 (f.17722 e.17723 d.17724 c.17725 b.17726 a.17727 tmp-ra.17781)) (rbp (tmp.17779 r15 rdi rsi rdx rcx r8 r9 nfv.17782 nfv.17783 g.17721 f.17722 e.17723 d.17724 c.17725 b.17726 a.17727 tmp-ra.17781)) (r15 (rbp rdi rsi rdx rcx r8 r9 nfv.17782 nfv.17783)))) (assignment ((tmp-ra.17781 fv1)))) (begin (set! tmp-ra.17781 r15) (set! a.17727 rdi) (set! b.17726 rsi) (set! c.17725 rdx) (set! d.17724 rcx) (set! e.17723 r8) (set! f.17722 r9) (set! g.17721 fv0) (return-point L.rp.2284 (begin (set! nfv.17783 64) (set! nfv.17782 g.17721) (set! r9 f.17722) (set! r8 e.17723) (set! rcx d.17724) (set! rdx c.17725) (set! rsi b.17726) (set! rdi a.17727) (set! r15 L.rp.2284) (jump L.G.2281 rbp r15 rdi rsi rdx rcx r8 r9 nfv.17782 nfv.17783))) (set! tmp.17779 rax) (set! rsi tmp.17779) (set! rdi 80) (set! r15 tmp-ra.17781) (jump L.+.2283 rbp r15 rdi rsi))) (define L.G.2281 ((new-frames ()) (locals (tmp-ra.17784 a.17735 b.17734 c.17733 d.17732 e.17731 f.17730 g.17729 h.17728)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 tmp-ra.17784 rbp) (rsi rdx rcx r8 r9 fv0 fv1 a.17735 tmp-ra.17784 rbp) (rdx rcx r8 r9 fv0 fv1 b.17734 a.17735 tmp-ra.17784 rbp) (rcx r8 r9 fv0 fv1 c.17733 b.17734 a.17735 tmp-ra.17784 rbp) (r8 r9 fv0 fv1 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 rbp) (r9 fv0 fv1 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 rbp) (fv0 fv1 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 rbp) (fv1 g.17729 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 rbp) (h.17728 g.17729 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 rbp) (h.17728 g.17729 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 fv2 rbp) (g.17729 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 fv2 fv1 rbp) (f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 fv2 fv1 fv0 rbp) (e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 fv2 fv1 fv0 r9 rbp) (d.17732 c.17733 b.17734 a.17735 tmp-ra.17784 fv2 fv1 fv0 r9 r8 rbp) (c.17733 b.17734 a.17735 tmp-ra.17784 fv2 fv1 fv0 r9 r8 rcx rbp) (b.17734 a.17735 tmp-ra.17784 fv2 fv1 fv0 r9 r8 rcx rdx rbp) (a.17735 tmp-ra.17784 fv2 fv1 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.17784 fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (call-undead ()) (conflicts ((tmp-ra.17784 (fv2 h.17728 g.17729 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 rbp fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.17735 (fv2 h.17728 g.17729 f.17730 e.17731 d.17732 c.17733 b.17734 rbp tmp-ra.17784 fv1 fv0 r9 r8 rcx rdx rsi)) (b.17734 (fv2 h.17728 g.17729 f.17730 e.17731 d.17732 c.17733 rbp tmp-ra.17784 a.17735 fv1 fv0 r9 r8 rcx rdx)) (c.17733 (fv2 h.17728 g.17729 f.17730 e.17731 d.17732 rbp tmp-ra.17784 a.17735 b.17734 fv1 fv0 r9 r8 rcx)) (d.17732 (fv2 h.17728 g.17729 f.17730 e.17731 rbp tmp-ra.17784 a.17735 b.17734 c.17733 fv1 fv0 r9 r8)) (e.17731 (fv2 h.17728 g.17729 f.17730 rbp tmp-ra.17784 a.17735 b.17734 c.17733 d.17732 fv1 fv0 r9)) (f.17730 (fv2 h.17728 g.17729 rbp tmp-ra.17784 a.17735 b.17734 c.17733 d.17732 e.17731 fv1 fv0)) (g.17729 (fv2 h.17728 rbp tmp-ra.17784 a.17735 b.17734 c.17733 d.17732 e.17731 f.17730 fv1)) (h.17728 (fv2 rbp tmp-ra.17784 a.17735 b.17734 c.17733 d.17732 e.17731 f.17730 g.17729)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.17784)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 fv1 fv2 a.17735 tmp-ra.17784)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 fv1 fv2 b.17734 a.17735 tmp-ra.17784)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 fv1 fv2 c.17733 b.17734 a.17735 tmp-ra.17784)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 fv1 fv2 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 fv1 fv2 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp fv1 fv2 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784)) (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 rbp fv2 g.17729 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 h.17728 g.17729 f.17730 e.17731 d.17732 c.17733 b.17734 a.17735 tmp-ra.17784)) (fv2 (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 rbp tmp-ra.17784 a.17735 b.17734 c.17733 d.17732 e.17731 f.17730 g.17729 h.17728)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0 fv1 fv2)))) (assignment ())) (begin (set! tmp-ra.17784 r15) (set! a.17735 rdi) (set! b.17734 rsi) (set! c.17733 rdx) (set! d.17732 rcx) (set! e.17731 r8) (set! f.17730 r9) (set! g.17729 fv0) (set! h.17728 fv1) (set! fv2 72) (set! fv1 h.17728) (set! fv0 g.17729) (set! r9 f.17730) (set! r8 e.17731) (set! rcx d.17732) (set! rdx c.17733) (set! rsi b.17734) (set! rdi a.17735) (set! r15 tmp-ra.17784) (jump L.H.2282 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))) (define L.H.2282 ((new-frames (() () () () () () ())) (locals (a.17744 b.17743 r1.17745 r2.17746 r3.17747 r4.17748 r5.17749 r6.17750 r7.17751)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.17785 rbp) (rsi rdx rcx r8 r9 fv0 fv1 fv2 a.17744 tmp-ra.17785 rbp) (rdx rcx r8 r9 fv0 fv1 fv2 a.17744 b.17743 tmp-ra.17785 rbp) (rcx r8 r9 fv0 fv1 fv2 a.17744 b.17743 c.17742 tmp-ra.17785 rbp) (r8 r9 fv0 fv1 fv2 a.17744 b.17743 c.17742 d.17741 tmp-ra.17785 rbp) (r9 fv0 fv1 fv2 a.17744 b.17743 c.17742 d.17741 e.17740 tmp-ra.17785 rbp) (fv0 fv1 fv2 a.17744 b.17743 c.17742 d.17741 e.17740 f.17739 tmp-ra.17785 rbp) (fv1 fv2 a.17744 b.17743 c.17742 d.17741 e.17740 f.17739 g.17738 tmp-ra.17785 rbp) (fv2 a.17744 b.17743 c.17742 d.17741 e.17740 f.17739 g.17738 h.17737 tmp-ra.17785 rbp) (a.17744 b.17743 c.17742 d.17741 e.17740 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((rax c.17742 d.17741 e.17740 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((a.17744 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r1.17745 c.17742 d.17741 e.17740 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((rax d.17741 e.17740 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((r1.17745 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r2.17746 d.17741 e.17740 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((rax e.17740 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((r2.17746 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r3.17747 e.17740 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((rax f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((r3.17747 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r4.17748 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((rax g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((r4.17748 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r5.17749 g.17738 h.17737 j.17736 tmp-ra.17785 rbp) ((rax h.17737 j.17736 tmp-ra.17785 rbp) ((r5.17749 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r6.17750 h.17737 j.17736 tmp-ra.17785 rbp) ((rax j.17736 tmp-ra.17785 rbp) ((r6.17750 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (j.17736 r7.17751 tmp-ra.17785 rbp) (r7.17751 tmp-ra.17785 rsi rbp) (tmp-ra.17785 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (call-undead (c.17742 d.17741 e.17740 f.17739 g.17738 h.17737 j.17736 tmp-ra.17785)) (conflicts ((tmp-ra.17785 (r7.17751 r6.17750 r5.17749 r4.17748 r3.17747 r2.17746 r1.17745 j.17736 h.17737 g.17738 f.17739 e.17740 d.17741 c.17742 b.17743 a.17744 rbp fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.17744 (j.17736 h.17737 g.17738 f.17739 e.17740 d.17741 c.17742 b.17743 rbp tmp-ra.17785 fv2 fv1 fv0 r9 r8 rcx rdx rsi)) (b.17743 (j.17736 h.17737 g.17738 f.17739 e.17740 d.17741 c.17742 rbp tmp-ra.17785 a.17744 fv2 fv1 fv0 r9 r8 rcx rdx)) (c.17742 (r1.17745 j.17736 h.17737 g.17738 f.17739 e.17740 d.17741 rbp tmp-ra.17785 b.17743 a.17744 fv2 fv1 fv0 r9 r8 rcx)) (d.17741 (r2.17746 r1.17745 j.17736 h.17737 g.17738 f.17739 e.17740 rbp tmp-ra.17785 c.17742 b.17743 a.17744 fv2 fv1 fv0 r9 r8)) (e.17740 (r3.17747 r2.17746 r1.17745 j.17736 h.17737 g.17738 f.17739 rbp tmp-ra.17785 d.17741 c.17742 b.17743 a.17744 fv2 fv1 fv0 r9)) (f.17739 (r4.17748 r3.17747 r2.17746 r1.17745 j.17736 h.17737 g.17738 rbp tmp-ra.17785 e.17740 d.17741 c.17742 b.17743 a.17744 fv2 fv1 fv0)) (g.17738 (r5.17749 r4.17748 r3.17747 r2.17746 r1.17745 j.17736 h.17737 rbp tmp-ra.17785 f.17739 e.17740 d.17741 c.17742 b.17743 a.17744 fv2 fv1)) (h.17737 (r6.17750 r5.17749 r4.17748 r3.17747 r2.17746 r1.17745 j.17736 rbp tmp-ra.17785 g.17738 f.17739 e.17740 d.17741 c.17742 b.17743 a.17744 fv2)) (j.17736 (r7.17751 r6.17750 r5.17749 r4.17748 r3.17747 r2.17746 r1.17745 rbp tmp-ra.17785 h.17737 g.17738 f.17739 e.17740 d.17741 c.17742 b.17743 a.17744)) (r1.17745 (rsi rbp tmp-ra.17785 j.17736 h.17737 g.17738 f.17739 e.17740 d.17741 c.17742)) (r2.17746 (rsi rbp tmp-ra.17785 j.17736 h.17737 g.17738 f.17739 e.17740 d.17741)) (r3.17747 (rsi rbp tmp-ra.17785 j.17736 h.17737 g.17738 f.17739 e.17740)) (r4.17748 (rsi rbp tmp-ra.17785 j.17736 h.17737 g.17738 f.17739)) (r5.17749 (rsi rbp tmp-ra.17785 j.17736 h.17737 g.17738)) (r6.17750 (rsi rbp tmp-ra.17785 j.17736 h.17737)) (r7.17751 (rsi rbp tmp-ra.17785 j.17736)) (rdi (r15 rbp rsi tmp-ra.17785)) (rsi (r7.17751 r6.17750 r5.17749 r4.17748 r3.17747 r2.17746 r1.17745 r15 rdi rbp a.17744 tmp-ra.17785)) (rdx (b.17743 a.17744 tmp-ra.17785)) (rcx (c.17742 b.17743 a.17744 tmp-ra.17785)) (r8 (d.17741 c.17742 b.17743 a.17744 tmp-ra.17785)) (r9 (e.17740 d.17741 c.17742 b.17743 a.17744 tmp-ra.17785)) (fv0 (f.17739 e.17740 d.17741 c.17742 b.17743 a.17744 tmp-ra.17785)) (fv1 (g.17738 f.17739 e.17740 d.17741 c.17742 b.17743 a.17744 tmp-ra.17785)) (fv2 (h.17737 g.17738 f.17739 e.17740 d.17741 c.17742 b.17743 a.17744 tmp-ra.17785)) (rbp (r7.17751 r6.17750 r5.17749 r4.17748 r3.17747 r2.17746 r1.17745 r15 rdi rsi j.17736 h.17737 g.17738 f.17739 e.17740 d.17741 c.17742 b.17743 a.17744 tmp-ra.17785)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.17785 fv3) (j.17736 fv0) (h.17737 fv1) (g.17738 fv4) (f.17739 fv5) (e.17740 fv6) (d.17741 fv7) (c.17742 fv8)))) (begin (set! tmp-ra.17785 r15) (set! a.17744 rdi) (set! b.17743 rsi) (set! c.17742 rdx) (set! d.17741 rcx) (set! e.17740 r8) (set! f.17739 r9) (set! g.17738 fv0) (set! h.17737 fv1) (set! j.17736 fv2) (return-point L.rp.2285 (begin (set! rsi b.17743) (set! rdi a.17744) (set! r15 L.rp.2285) (jump L.+.2283 rbp r15 rdi rsi))) (set! r1.17745 rax) (return-point L.rp.2286 (begin (set! rsi c.17742) (set! rdi r1.17745) (set! r15 L.rp.2286) (jump L.+.2283 rbp r15 rdi rsi))) (set! r2.17746 rax) (return-point L.rp.2287 (begin (set! rsi d.17741) (set! rdi r2.17746) (set! r15 L.rp.2287) (jump L.+.2283 rbp r15 rdi rsi))) (set! r3.17747 rax) (return-point L.rp.2288 (begin (set! rsi e.17740) (set! rdi r3.17747) (set! r15 L.rp.2288) (jump L.+.2283 rbp r15 rdi rsi))) (set! r4.17748 rax) (return-point L.rp.2289 (begin (set! rsi f.17739) (set! rdi r4.17748) (set! r15 L.rp.2289) (jump L.+.2283 rbp r15 rdi rsi))) (set! r5.17749 rax) (return-point L.rp.2290 (begin (set! rsi g.17738) (set! rdi r5.17749) (set! r15 L.rp.2290) (jump L.+.2283 rbp r15 rdi rsi))) (set! r6.17750 rax) (return-point L.rp.2291 (begin (set! rsi h.17737) (set! rdi r6.17750) (set! r15 L.rp.2291) (jump L.+.2283 rbp r15 rdi rsi))) (set! r7.17751 rax) (set! rsi j.17736) (set! rdi r7.17751) (set! r15 tmp-ra.17785) (jump L.+.2283 rbp r15 rdi rsi))) (begin (set! tmp-ra.17786 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.17786) (jump L.F.2280 rbp r15 rdi rsi rdx rcx r8 r9 fv0))) (module ((new-frames ()) (locals (tmp-ra.17819)) (call-undead ()) (undead-out ((tmp-ra.17819 rbp) (tmp-ra.17819 rsi rbp) (tmp-ra.17819 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.17819 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.17819)) (rsi (r15 rdi rbp tmp-ra.17819)) (rdi (r15 rbp rsi tmp-ra.17819)) (r15 (rbp rdi rsi)))) (assignment ())) (define L.<.2293 ((new-frames ()) (locals (tmp.17812 tmp.17796 tmp.17813 tmp-ra.17817 tmp.17815 tmp.17795 tmp.17814)) (undead-out ((rdi rsi tmp-ra.17817 rbp) (rsi tmp.17795 tmp-ra.17817 rbp) (tmp.17796 tmp.17795 tmp-ra.17817 rbp) ((((((tmp.17813 tmp.17796 tmp.17795 tmp-ra.17817 rbp) (tmp.17813 tmp.17796 tmp.17795 tmp-ra.17817 rbp)) (tmp.17796 tmp.17795 tmp-ra.17817 rbp)) (tmp.17812 tmp.17796 tmp.17795 tmp-ra.17817 rbp) (tmp.17812 tmp.17796 tmp.17795 tmp-ra.17817 rbp)) (tmp.17796 tmp.17795 tmp-ra.17817 rbp)) ((((((tmp.17815 tmp.17796 tmp.17795 tmp-ra.17817 rbp) (tmp.17815 tmp.17796 tmp.17795 tmp-ra.17817 rbp)) (tmp.17796 tmp.17795 tmp-ra.17817 rbp)) (tmp.17814 tmp.17796 tmp.17795 tmp-ra.17817 rbp) (tmp.17814 tmp.17796 tmp.17795 tmp-ra.17817 rbp)) (tmp.17796 tmp.17795 tmp-ra.17817 rbp)) ((tmp-ra.17817 rbp) ((tmp-ra.17817 rax rbp) (rax rbp)) ((tmp-ra.17817 rax rbp) (rax rbp))) ((tmp-ra.17817 rax rbp) (rax rbp))) ((tmp-ra.17817 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17812 (rbp tmp-ra.17817 tmp.17795 tmp.17796)) (tmp.17796 (rbp tmp-ra.17817 tmp.17795 tmp.17813 tmp.17812 tmp.17815 tmp.17814)) (tmp.17813 (rbp tmp-ra.17817 tmp.17795 tmp.17796)) (tmp-ra.17817 (tmp.17796 tmp.17795 rbp rsi rdi tmp.17813 tmp.17812 tmp.17815 tmp.17814 rax)) (tmp.17815 (rbp tmp-ra.17817 tmp.17795 tmp.17796)) (tmp.17795 (tmp.17796 rbp tmp-ra.17817 rsi tmp.17813 tmp.17812 tmp.17815 tmp.17814)) (tmp.17814 (rbp tmp-ra.17817 tmp.17795 tmp.17796)) (rax (rbp tmp-ra.17817)) (rbp (tmp.17796 tmp.17795 tmp-ra.17817 tmp.17813 tmp.17812 tmp.17815 tmp.17814 rax)) (rdi (tmp-ra.17817)) (rsi (tmp.17795 tmp-ra.17817)))) (assignment ())) (begin (set! tmp-ra.17817 r15) (set! tmp.17795 rdi) (set! tmp.17796 rsi) (if (begin (if (begin (begin (set! tmp.17813 tmp.17796) (set! tmp.17813 (bitwise-and tmp.17813 7))) (= tmp.17813 0)) (set! tmp.17812 14) (set! tmp.17812 6)) (!= tmp.17812 6)) (if (begin (if (begin (begin (set! tmp.17815 tmp.17795) (set! tmp.17815 (bitwise-and tmp.17815 7))) (= tmp.17815 0)) (set! tmp.17814 14) (set! tmp.17814 6)) (!= tmp.17814 6)) (if (< tmp.17795 tmp.17796) (begin (set! rax 14) (jump tmp-ra.17817 rbp rax)) (begin (set! rax 6) (jump tmp-ra.17817 rbp rax))) (begin (set! rax 830) (jump tmp-ra.17817 rbp rax))) (begin (set! rax 830) (jump tmp-ra.17817 rbp rax))))) (define L.swap.2292 ((new-frames (())) (locals (tmp.17816)) (undead-out ((rdi rsi tmp-ra.17818 rbp) (rsi x.17788 tmp-ra.17818 rbp) (y.17787 x.17788 tmp-ra.17818 rbp) (((((rax y.17787 x.17788 tmp-ra.17818 rbp) ((y.17787 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17816 y.17787 x.17788 tmp-ra.17818 rbp)) (y.17787 x.17788 tmp-ra.17818 rbp)) ((tmp-ra.17818 rax rbp) (rax rbp)) ((y.17787 tmp-ra.17818 rsi rbp) (tmp-ra.17818 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (y.17787 x.17788 tmp-ra.17818)) (conflicts ((tmp.17816 (rbp tmp-ra.17818 x.17788 y.17787)) (y.17787 (rbp tmp-ra.17818 x.17788 tmp.17816 rsi)) (x.17788 (y.17787 rbp tmp-ra.17818 rsi tmp.17816)) (tmp-ra.17818 (y.17787 x.17788 rbp tmp.17816 rax rdi rsi)) (rsi (x.17788 r15 rdi rbp tmp-ra.17818 y.17787)) (rbp (y.17787 x.17788 tmp-ra.17818 tmp.17816 rax r15 rdi rsi)) (rdi (r15 rbp rsi tmp-ra.17818)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.17818)))) (assignment ((tmp-ra.17818 fv0) (x.17788 fv1) (y.17787 fv2)))) (begin (set! tmp-ra.17818 r15) (set! x.17788 rdi) (set! y.17787 rsi) (if (begin (begin (return-point L.rp.2294 (begin (set! rsi x.17788) (set! rdi y.17787) (set! r15 L.rp.2294) (jump L.<.2293 rbp r15 rdi rsi))) (set! tmp.17816 rax)) (!= tmp.17816 6)) (begin (set! rax x.17788) (jump tmp-ra.17818 rbp rax)) (begin (set! rsi x.17788) (set! rdi y.17787) (set! r15 tmp-ra.17818) (jump L.swap.2292 rbp r15 rdi rsi))))) (begin (set! tmp-ra.17819 r15) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.17819) (jump L.swap.2292 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.17860)) (call-undead ()) (undead-out ((tmp-ra.17860 rbp) (tmp-ra.17860 rsi rbp) (tmp-ra.17860 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.17860 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.17860)) (rsi (r15 rdi rbp tmp-ra.17860)) (rdi (r15 rbp rsi tmp-ra.17860)) (r15 (rbp rdi rsi)))) (assignment ())) (define L.*.2297 ((new-frames ()) (locals (tmp.17845 tmp.17823 tmp.17846 tmp-ra.17857 tmp.17849 tmp.17848 tmp.17822 tmp.17847)) (undead-out ((rdi rsi tmp-ra.17857 rbp) (rsi tmp.17822 tmp-ra.17857 rbp) (tmp.17823 tmp.17822 tmp-ra.17857 rbp) ((((((tmp.17846 tmp.17823 tmp.17822 tmp-ra.17857 rbp) (tmp.17846 tmp.17823 tmp.17822 tmp-ra.17857 rbp)) (tmp.17823 tmp.17822 tmp-ra.17857 rbp)) (tmp.17845 tmp.17823 tmp.17822 tmp-ra.17857 rbp) (tmp.17845 tmp.17823 tmp.17822 tmp-ra.17857 rbp)) (tmp.17823 tmp.17822 tmp-ra.17857 rbp)) ((((((tmp.17848 tmp.17823 tmp.17822 tmp-ra.17857 rbp) (tmp.17848 tmp.17823 tmp.17822 tmp-ra.17857 rbp)) (tmp.17823 tmp.17822 tmp-ra.17857 rbp)) (tmp.17847 tmp.17823 tmp.17822 tmp-ra.17857 rbp) (tmp.17847 tmp.17823 tmp.17822 tmp-ra.17857 rbp)) (tmp.17823 tmp.17822 tmp-ra.17857 rbp)) ((tmp.17849 tmp.17822 tmp-ra.17857 rbp) (tmp.17822 tmp.17849 tmp-ra.17857 rbp) (tmp.17849 rax tmp-ra.17857 rbp) (tmp-ra.17857 rax rbp) (rax rbp)) ((tmp-ra.17857 rax rbp) (rax rbp))) ((tmp-ra.17857 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17845 (rbp tmp-ra.17857 tmp.17822 tmp.17823)) (tmp.17823 (rbp tmp-ra.17857 tmp.17822 tmp.17846 tmp.17845 tmp.17848 tmp.17847)) (tmp.17846 (rbp tmp-ra.17857 tmp.17822 tmp.17823)) (tmp-ra.17857 (tmp.17823 tmp.17822 rbp rsi rdi tmp.17846 tmp.17845 tmp.17848 tmp.17847 tmp.17849 rax)) (tmp.17849 (rax rbp tmp-ra.17857 tmp.17822)) (tmp.17848 (rbp tmp-ra.17857 tmp.17822 tmp.17823)) (tmp.17822 (tmp.17823 rbp tmp-ra.17857 rsi tmp.17846 tmp.17845 tmp.17848 tmp.17847 tmp.17849)) (tmp.17847 (rbp tmp-ra.17857 tmp.17822 tmp.17823)) (rax (tmp.17849 rbp tmp-ra.17857)) (rbp (tmp.17823 tmp.17822 tmp-ra.17857 tmp.17846 tmp.17845 tmp.17848 tmp.17847 tmp.17849 rax)) (rdi (tmp-ra.17857)) (rsi (tmp.17822 tmp-ra.17857)))) (assignment ())) (begin (set! tmp-ra.17857 r15) (set! tmp.17822 rdi) (set! tmp.17823 rsi) (if (begin (if (begin (begin (set! tmp.17846 tmp.17823) (set! tmp.17846 (bitwise-and tmp.17846 7))) (= tmp.17846 0)) (set! tmp.17845 14) (set! tmp.17845 6)) (!= tmp.17845 6)) (if (begin (if (begin (begin (set! tmp.17848 tmp.17822) (set! tmp.17848 (bitwise-and tmp.17848 7))) (= tmp.17848 0)) (set! tmp.17847 14) (set! tmp.17847 6)) (!= tmp.17847 6)) (begin (set! tmp.17849 tmp.17823) (set! tmp.17849 (arithmetic-shift-right tmp.17849 3)) (set! rax tmp.17822) (set! rax (* rax tmp.17849)) (jump tmp-ra.17857 rbp rax)) (begin (set! rax 62) (jump tmp-ra.17857 rbp rax))) (begin (set! rax 62) (jump tmp-ra.17857 rbp rax))))) (define L.-.2296 ((new-frames ()) (locals (tmp.17850 tmp.17827 tmp.17851 tmp-ra.17858 tmp.17853 tmp.17826 tmp.17852)) (undead-out ((rdi rsi tmp-ra.17858 rbp) (rsi tmp.17826 tmp-ra.17858 rbp) (tmp.17826 tmp.17827 tmp-ra.17858 rbp) ((((((tmp.17851 tmp.17826 tmp.17827 tmp-ra.17858 rbp) (tmp.17851 tmp.17826 tmp.17827 tmp-ra.17858 rbp)) (tmp.17826 tmp.17827 tmp-ra.17858 rbp)) (tmp.17850 tmp.17826 tmp.17827 tmp-ra.17858 rbp) (tmp.17850 tmp.17826 tmp.17827 tmp-ra.17858 rbp)) (tmp.17826 tmp.17827 tmp-ra.17858 rbp)) ((((((tmp.17853 tmp.17826 tmp.17827 tmp-ra.17858 rbp) (tmp.17853 tmp.17826 tmp.17827 tmp-ra.17858 rbp)) (tmp.17826 tmp.17827 tmp-ra.17858 rbp)) (tmp.17852 tmp.17826 tmp.17827 tmp-ra.17858 rbp) (tmp.17852 tmp.17826 tmp.17827 tmp-ra.17858 rbp)) (tmp.17826 tmp.17827 tmp-ra.17858 rbp)) ((tmp.17827 rax tmp-ra.17858 rbp) (tmp-ra.17858 rax rbp) (rax rbp)) ((tmp-ra.17858 rax rbp) (rax rbp))) ((tmp-ra.17858 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17850 (rbp tmp-ra.17858 tmp.17827 tmp.17826)) (tmp.17827 (rbp tmp-ra.17858 tmp.17826 tmp.17851 tmp.17850 tmp.17853 tmp.17852 rax)) (tmp.17851 (rbp tmp-ra.17858 tmp.17827 tmp.17826)) (tmp-ra.17858 (tmp.17827 tmp.17826 rbp rsi rdi tmp.17851 tmp.17850 tmp.17853 tmp.17852 rax)) (tmp.17853 (rbp tmp-ra.17858 tmp.17827 tmp.17826)) (tmp.17826 (tmp.17827 rbp tmp-ra.17858 rsi tmp.17851 tmp.17850 tmp.17853 tmp.17852)) (tmp.17852 (rbp tmp-ra.17858 tmp.17827 tmp.17826)) (rax (tmp.17827 rbp tmp-ra.17858)) (rbp (tmp.17827 tmp.17826 tmp-ra.17858 tmp.17851 tmp.17850 tmp.17853 tmp.17852 rax)) (rdi (tmp-ra.17858)) (rsi (tmp.17826 tmp-ra.17858)))) (assignment ())) (begin (set! tmp-ra.17858 r15) (set! tmp.17826 rdi) (set! tmp.17827 rsi) (if (begin (if (begin (begin (set! tmp.17851 tmp.17827) (set! tmp.17851 (bitwise-and tmp.17851 7))) (= tmp.17851 0)) (set! tmp.17850 14) (set! tmp.17850 6)) (!= tmp.17850 6)) (if (begin (if (begin (begin (set! tmp.17853 tmp.17826) (set! tmp.17853 (bitwise-and tmp.17853 7))) (= tmp.17853 0)) (set! tmp.17852 14) (set! tmp.17852 6)) (!= tmp.17852 6)) (begin (set! rax tmp.17826) (set! rax (- rax tmp.17827)) (jump tmp-ra.17858 rbp rax)) (begin (set! rax 574) (jump tmp-ra.17858 rbp rax))) (begin (set! rax 574) (jump tmp-ra.17858 rbp rax))))) (define L.fact_loop.2295 ((new-frames (() ())) (locals (tmp.17854 tmp.17856)) (undead-out ((rdi rsi tmp-ra.17859 rbp) (rsi n.17821 tmp-ra.17859 rbp) (n.17821 acc.17820 tmp-ra.17859 rbp) ((((n.17821 acc.17820 tmp-ra.17859 rbp) (tmp.17854 n.17821 acc.17820 tmp-ra.17859 rbp) (tmp.17854 n.17821 acc.17820 tmp-ra.17859 rbp)) (n.17821 acc.17820 tmp-ra.17859 rbp)) ((tmp-ra.17859 rax rbp) (rax rbp)) (((rax acc.17820 n.17821 tmp-ra.17859 rbp) ((n.17821 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc.17820 n.17821 tmp.17855 tmp-ra.17859 rbp) ((rax tmp.17855 tmp-ra.17859 rbp) ((acc.17820 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17856 tmp.17855 tmp-ra.17859 rbp) (tmp.17855 tmp-ra.17859 rsi rbp) (tmp-ra.17859 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (tmp.17855 acc.17820 n.17821 tmp-ra.17859)) (conflicts ((tmp.17854 (rbp tmp-ra.17859 acc.17820 n.17821)) (n.17821 (acc.17820 rbp tmp-ra.17859 tmp.17854 tmp.17855 rsi)) (acc.17820 (rbp tmp-ra.17859 n.17821 tmp.17854 rsi tmp.17855)) (tmp-ra.17859 (acc.17820 n.17821 rbp tmp.17854 rax rdi rsi tmp.17856 tmp.17855)) (tmp.17856 (rbp tmp-ra.17859 tmp.17855)) (tmp.17855 (rsi tmp.17856 rbp tmp-ra.17859 n.17821 acc.17820)) (rsi (tmp-ra.17859 tmp.17855 acc.17820 r15 rdi rbp n.17821)) (rbp (acc.17820 n.17821 tmp-ra.17859 tmp.17854 rax tmp.17856 tmp.17855 r15 rdi rsi)) (rdi (tmp-ra.17859 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.17859)))) (assignment ((tmp-ra.17859 fv0) (n.17821 fv1) (acc.17820 fv2) (tmp.17855 fv3)))) (begin (set! tmp-ra.17859 r15) (set! n.17821 rdi) (set! acc.17820 rsi) (if (begin (if (= n.17821 0) (set! tmp.17854 14) (set! tmp.17854 6)) (!= tmp.17854 6)) (begin (set! rax acc.17820) (jump tmp-ra.17859 rbp rax)) (begin (return-point L.rp.2298 (begin (set! rsi 8) (set! rdi n.17821) (set! r15 L.rp.2298) (jump L.-.2296 rbp r15 rdi rsi))) (set! tmp.17855 rax) (return-point L.rp.2299 (begin (set! rsi n.17821) (set! rdi acc.17820) (set! r15 L.rp.2299) (jump L.*.2297 rbp r15 rdi rsi))) (set! tmp.17856 rax) (set! rsi tmp.17856) (set! rdi tmp.17855) (set! r15 tmp-ra.17859) (jump L.fact_loop.2295 rbp r15 rdi rsi))))) (begin (set! tmp-ra.17860 r15) (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.17860) (jump L.fact_loop.2295 rbp r15 rdi rsi))) (module ((new-frames ()) (locals (tmp-ra.17900)) (call-undead ()) (undead-out ((tmp-ra.17900 rbp) (tmp-ra.17900 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.17900 (rdi rbp)) (rbp (r15 rdi tmp-ra.17900)) (rdi (r15 rbp tmp-ra.17900)) (r15 (rbp rdi)))) (assignment ())) (define L.*.2302 ((new-frames ()) (locals (tmp.17885 tmp.17863 tmp.17886 tmp-ra.17897 tmp.17889 tmp.17888 tmp.17862 tmp.17887)) (undead-out ((rdi rsi tmp-ra.17897 rbp) (rsi tmp.17862 tmp-ra.17897 rbp) (tmp.17863 tmp.17862 tmp-ra.17897 rbp) ((((((tmp.17886 tmp.17863 tmp.17862 tmp-ra.17897 rbp) (tmp.17886 tmp.17863 tmp.17862 tmp-ra.17897 rbp)) (tmp.17863 tmp.17862 tmp-ra.17897 rbp)) (tmp.17885 tmp.17863 tmp.17862 tmp-ra.17897 rbp) (tmp.17885 tmp.17863 tmp.17862 tmp-ra.17897 rbp)) (tmp.17863 tmp.17862 tmp-ra.17897 rbp)) ((((((tmp.17888 tmp.17863 tmp.17862 tmp-ra.17897 rbp) (tmp.17888 tmp.17863 tmp.17862 tmp-ra.17897 rbp)) (tmp.17863 tmp.17862 tmp-ra.17897 rbp)) (tmp.17887 tmp.17863 tmp.17862 tmp-ra.17897 rbp) (tmp.17887 tmp.17863 tmp.17862 tmp-ra.17897 rbp)) (tmp.17863 tmp.17862 tmp-ra.17897 rbp)) ((tmp.17889 tmp.17862 tmp-ra.17897 rbp) (tmp.17862 tmp.17889 tmp-ra.17897 rbp) (tmp.17889 rax tmp-ra.17897 rbp) (tmp-ra.17897 rax rbp) (rax rbp)) ((tmp-ra.17897 rax rbp) (rax rbp))) ((tmp-ra.17897 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17885 (rbp tmp-ra.17897 tmp.17862 tmp.17863)) (tmp.17863 (rbp tmp-ra.17897 tmp.17862 tmp.17886 tmp.17885 tmp.17888 tmp.17887)) (tmp.17886 (rbp tmp-ra.17897 tmp.17862 tmp.17863)) (tmp-ra.17897 (tmp.17863 tmp.17862 rbp rsi rdi tmp.17886 tmp.17885 tmp.17888 tmp.17887 tmp.17889 rax)) (tmp.17889 (rax rbp tmp-ra.17897 tmp.17862)) (tmp.17888 (rbp tmp-ra.17897 tmp.17862 tmp.17863)) (tmp.17862 (tmp.17863 rbp tmp-ra.17897 rsi tmp.17886 tmp.17885 tmp.17888 tmp.17887 tmp.17889)) (tmp.17887 (rbp tmp-ra.17897 tmp.17862 tmp.17863)) (rax (tmp.17889 rbp tmp-ra.17897)) (rbp (tmp.17863 tmp.17862 tmp-ra.17897 tmp.17886 tmp.17885 tmp.17888 tmp.17887 tmp.17889 rax)) (rdi (tmp-ra.17897)) (rsi (tmp.17862 tmp-ra.17897)))) (assignment ())) (begin (set! tmp-ra.17897 r15) (set! tmp.17862 rdi) (set! tmp.17863 rsi) (if (begin (if (begin (begin (set! tmp.17886 tmp.17863) (set! tmp.17886 (bitwise-and tmp.17886 7))) (= tmp.17886 0)) (set! tmp.17885 14) (set! tmp.17885 6)) (!= tmp.17885 6)) (if (begin (if (begin (begin (set! tmp.17888 tmp.17862) (set! tmp.17888 (bitwise-and tmp.17888 7))) (= tmp.17888 0)) (set! tmp.17887 14) (set! tmp.17887 6)) (!= tmp.17887 6)) (begin (set! tmp.17889 tmp.17863) (set! tmp.17889 (arithmetic-shift-right tmp.17889 3)) (set! rax tmp.17862) (set! rax (* rax tmp.17889)) (jump tmp-ra.17897 rbp rax)) (begin (set! rax 62) (jump tmp-ra.17897 rbp rax))) (begin (set! rax 62) (jump tmp-ra.17897 rbp rax))))) (define L.-.2301 ((new-frames ()) (locals (tmp.17890 tmp.17867 tmp.17891 tmp-ra.17898 tmp.17893 tmp.17866 tmp.17892)) (undead-out ((rdi rsi tmp-ra.17898 rbp) (rsi tmp.17866 tmp-ra.17898 rbp) (tmp.17866 tmp.17867 tmp-ra.17898 rbp) ((((((tmp.17891 tmp.17866 tmp.17867 tmp-ra.17898 rbp) (tmp.17891 tmp.17866 tmp.17867 tmp-ra.17898 rbp)) (tmp.17866 tmp.17867 tmp-ra.17898 rbp)) (tmp.17890 tmp.17866 tmp.17867 tmp-ra.17898 rbp) (tmp.17890 tmp.17866 tmp.17867 tmp-ra.17898 rbp)) (tmp.17866 tmp.17867 tmp-ra.17898 rbp)) ((((((tmp.17893 tmp.17866 tmp.17867 tmp-ra.17898 rbp) (tmp.17893 tmp.17866 tmp.17867 tmp-ra.17898 rbp)) (tmp.17866 tmp.17867 tmp-ra.17898 rbp)) (tmp.17892 tmp.17866 tmp.17867 tmp-ra.17898 rbp) (tmp.17892 tmp.17866 tmp.17867 tmp-ra.17898 rbp)) (tmp.17866 tmp.17867 tmp-ra.17898 rbp)) ((tmp.17867 rax tmp-ra.17898 rbp) (tmp-ra.17898 rax rbp) (rax rbp)) ((tmp-ra.17898 rax rbp) (rax rbp))) ((tmp-ra.17898 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17890 (rbp tmp-ra.17898 tmp.17867 tmp.17866)) (tmp.17867 (rbp tmp-ra.17898 tmp.17866 tmp.17891 tmp.17890 tmp.17893 tmp.17892 rax)) (tmp.17891 (rbp tmp-ra.17898 tmp.17867 tmp.17866)) (tmp-ra.17898 (tmp.17867 tmp.17866 rbp rsi rdi tmp.17891 tmp.17890 tmp.17893 tmp.17892 rax)) (tmp.17893 (rbp tmp-ra.17898 tmp.17867 tmp.17866)) (tmp.17866 (tmp.17867 rbp tmp-ra.17898 rsi tmp.17891 tmp.17890 tmp.17893 tmp.17892)) (tmp.17892 (rbp tmp-ra.17898 tmp.17867 tmp.17866)) (rax (tmp.17867 rbp tmp-ra.17898)) (rbp (tmp.17867 tmp.17866 tmp-ra.17898 tmp.17891 tmp.17890 tmp.17893 tmp.17892 rax)) (rdi (tmp-ra.17898)) (rsi (tmp.17866 tmp-ra.17898)))) (assignment ())) (begin (set! tmp-ra.17898 r15) (set! tmp.17866 rdi) (set! tmp.17867 rsi) (if (begin (if (begin (begin (set! tmp.17891 tmp.17867) (set! tmp.17891 (bitwise-and tmp.17891 7))) (= tmp.17891 0)) (set! tmp.17890 14) (set! tmp.17890 6)) (!= tmp.17890 6)) (if (begin (if (begin (begin (set! tmp.17893 tmp.17866) (set! tmp.17893 (bitwise-and tmp.17893 7))) (= tmp.17893 0)) (set! tmp.17892 14) (set! tmp.17892 6)) (!= tmp.17892 6)) (begin (set! rax tmp.17866) (set! rax (- rax tmp.17867)) (jump tmp-ra.17898 rbp rax)) (begin (set! rax 574) (jump tmp-ra.17898 rbp rax))) (begin (set! rax 574) (jump tmp-ra.17898 rbp rax))))) (define L.fact.2300 ((new-frames (() ())) (locals (tmp.17894 tmp.17895 tmp.17896)) (undead-out ((rdi tmp-ra.17899 rbp) (x.17861 tmp-ra.17899 rbp) ((((x.17861 tmp-ra.17899 rbp) (tmp.17894 x.17861 tmp-ra.17899 rbp) (tmp.17894 x.17861 tmp-ra.17899 rbp)) (x.17861 tmp-ra.17899 rbp)) ((tmp-ra.17899 rax rbp) (rax rbp)) (((rax x.17861 tmp-ra.17899 rbp) ((x.17861 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.17896 x.17861 tmp-ra.17899 rbp) ((rax x.17861 tmp-ra.17899 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (tmp.17895 x.17861 tmp-ra.17899 rbp) (x.17861 tmp-ra.17899 rsi rbp) (tmp-ra.17899 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (call-undead (x.17861 tmp-ra.17899)) (conflicts ((tmp.17894 (rbp tmp-ra.17899 x.17861)) (x.17861 (rbp tmp-ra.17899 tmp.17894 tmp.17895 tmp.17896 rsi)) (tmp-ra.17899 (x.17861 rbp tmp.17894 rax rdi rsi tmp.17895 tmp.17896)) (tmp.17895 (rbp tmp-ra.17899 x.17861)) (tmp.17896 (rbp tmp-ra.17899 x.17861)) (rsi (tmp-ra.17899 r15 rdi rbp x.17861)) (rbp (x.17861 tmp-ra.17899 tmp.17894 rax tmp.17895 tmp.17896 r15 rdi rsi)) (rdi (tmp-ra.17899 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.17899)))) (assignment ((tmp-ra.17899 fv0) (x.17861 fv1)))) (begin (set! tmp-ra.17899 r15) (set! x.17861 rdi) (if (begin (if (= x.17861 0) (set! tmp.17894 14) (set! tmp.17894 6)) (!= tmp.17894 6)) (begin (set! rax 8) (jump tmp-ra.17899 rbp rax)) (begin (return-point L.rp.2303 (begin (set! rsi 8) (set! rdi x.17861) (set! r15 L.rp.2303) (jump L.-.2301 rbp r15 rdi rsi))) (set! tmp.17896 rax) (return-point L.rp.2304 (begin (set! rdi tmp.17896) (set! r15 L.rp.2304) (jump L.fact.2300 rbp r15 rdi))) (set! tmp.17895 rax) (set! rsi tmp.17895) (set! rdi x.17861) (set! r15 tmp-ra.17899) (jump L.*.2302 rbp r15 rdi rsi))))) (begin (set! tmp-ra.17900 r15) (set! rdi 40) (set! r15 tmp-ra.17900) (jump L.fact.2300 rbp r15 rdi))) (module ((new-frames ()) (locals (tmp-ra.17937)) (call-undead ()) (undead-out ((tmp-ra.17937 rbp) (tmp-ra.17937 rdx rbp) (tmp-ra.17937 rdx rsi rbp) (tmp-ra.17937 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.17937 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.17937)) (rdx (r15 rdi rsi rbp tmp-ra.17937)) (rsi (r15 rdi rbp rdx tmp-ra.17937)) (rdi (r15 rbp rsi rdx tmp-ra.17937)) (r15 (rbp rdi rsi rdx)))) (assignment ())) (define L.+.2306 ((new-frames ()) (locals (tmp.17929 tmp.17909 tmp.17930 tmp-ra.17935 tmp.17932 tmp.17908 tmp.17931)) (undead-out ((rdi rsi tmp-ra.17935 rbp) (rsi tmp.17908 tmp-ra.17935 rbp) (tmp.17908 tmp.17909 tmp-ra.17935 rbp) ((((((tmp.17930 tmp.17908 tmp.17909 tmp-ra.17935 rbp) (tmp.17930 tmp.17908 tmp.17909 tmp-ra.17935 rbp)) (tmp.17908 tmp.17909 tmp-ra.17935 rbp)) (tmp.17929 tmp.17908 tmp.17909 tmp-ra.17935 rbp) (tmp.17929 tmp.17908 tmp.17909 tmp-ra.17935 rbp)) (tmp.17908 tmp.17909 tmp-ra.17935 rbp)) ((((((tmp.17932 tmp.17908 tmp.17909 tmp-ra.17935 rbp) (tmp.17932 tmp.17908 tmp.17909 tmp-ra.17935 rbp)) (tmp.17908 tmp.17909 tmp-ra.17935 rbp)) (tmp.17931 tmp.17908 tmp.17909 tmp-ra.17935 rbp) (tmp.17931 tmp.17908 tmp.17909 tmp-ra.17935 rbp)) (tmp.17908 tmp.17909 tmp-ra.17935 rbp)) ((tmp.17909 rax tmp-ra.17935 rbp) (tmp-ra.17935 rax rbp) (rax rbp)) ((tmp-ra.17935 rax rbp) (rax rbp))) ((tmp-ra.17935 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17929 (rbp tmp-ra.17935 tmp.17909 tmp.17908)) (tmp.17909 (rbp tmp-ra.17935 tmp.17908 tmp.17930 tmp.17929 tmp.17932 tmp.17931 rax)) (tmp.17930 (rbp tmp-ra.17935 tmp.17909 tmp.17908)) (tmp-ra.17935 (tmp.17909 tmp.17908 rbp rsi rdi tmp.17930 tmp.17929 tmp.17932 tmp.17931 rax)) (tmp.17932 (rbp tmp-ra.17935 tmp.17909 tmp.17908)) (tmp.17908 (tmp.17909 rbp tmp-ra.17935 rsi tmp.17930 tmp.17929 tmp.17932 tmp.17931)) (tmp.17931 (rbp tmp-ra.17935 tmp.17909 tmp.17908)) (rax (tmp.17909 rbp tmp-ra.17935)) (rbp (tmp.17909 tmp.17908 tmp-ra.17935 tmp.17930 tmp.17929 tmp.17932 tmp.17931 rax)) (rdi (tmp-ra.17935)) (rsi (tmp.17908 tmp-ra.17935)))) (assignment ())) (begin (set! tmp-ra.17935 r15) (set! tmp.17908 rdi) (set! tmp.17909 rsi) (if (begin (if (begin (begin (set! tmp.17930 tmp.17909) (set! tmp.17930 (bitwise-and tmp.17930 7))) (= tmp.17930 0)) (set! tmp.17929 14) (set! tmp.17929 6)) (!= tmp.17929 6)) (if (begin (if (begin (begin (set! tmp.17932 tmp.17908) (set! tmp.17932 (bitwise-and tmp.17932 7))) (= tmp.17932 0)) (set! tmp.17931 14) (set! tmp.17931 6)) (!= tmp.17931 6)) (begin (set! rax tmp.17908) (set! rax (+ rax tmp.17909)) (jump tmp-ra.17935 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17935 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17935 rbp rax))))) (define L.fib_loop.2305 ((new-frames (() ())) (locals (tmp.17933 n.17903 new-acc2.17905 tmp.17934)) (undead-out ((rdi rsi rdx tmp-ra.17936 rbp) (rsi rdx n.17903 tmp-ra.17936 rbp) (rdx n.17903 acc1.17902 tmp-ra.17936 rbp) (acc2.17901 n.17903 acc1.17902 tmp-ra.17936 rbp) ((((acc2.17901 n.17903 acc1.17902 tmp-ra.17936 rbp) (tmp.17933 acc2.17901 n.17903 acc1.17902 tmp-ra.17936 rbp) (tmp.17933 acc2.17901 n.17903 acc1.17902 tmp-ra.17936 rbp)) (acc2.17901 n.17903 acc1.17902 tmp-ra.17936 rbp)) ((tmp-ra.17936 rax rbp) (rax rbp)) ((((acc1.17902 n.17903 acc2.17901 tmp-ra.17936 rbp) (tmp.17934 acc1.17902 n.17903 acc2.17901 tmp-ra.17936 rbp) (tmp.17934 acc1.17902 n.17903 acc2.17901 tmp-ra.17936 rbp)) (acc1.17902 n.17903 acc2.17901 tmp-ra.17936 rbp)) ((tmp-ra.17936 rax rbp) (rax rbp)) (((rax acc1.17902 acc2.17901 tmp-ra.17936 rbp) ((n.17903 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.17902 acc2.17901 new-n.17904 tmp-ra.17936 rbp) ((rax acc2.17901 new-n.17904 tmp-ra.17936 rbp) ((acc1.17902 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.17905 acc2.17901 new-n.17904 tmp-ra.17936 rbp) (acc2.17901 new-n.17904 tmp-ra.17936 rdx rbp) (new-n.17904 tmp-ra.17936 rdx rsi rbp) (tmp-ra.17936 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (call-undead (new-n.17904 acc1.17902 acc2.17901 tmp-ra.17936)) (conflicts ((tmp.17933 (rbp tmp-ra.17936 acc1.17902 n.17903 acc2.17901)) (n.17903 (acc2.17901 acc1.17902 rbp tmp-ra.17936 rdx tmp.17933 tmp.17934 rsi)) (acc1.17902 (acc2.17901 rbp tmp-ra.17936 n.17903 rdx tmp.17933 tmp.17934 rsi new-n.17904)) (tmp-ra.17936 (acc2.17901 acc1.17902 n.17903 rbp tmp.17933 tmp.17934 rax rdi rsi rdx new-acc2.17905 new-n.17904)) (new-n.17904 (rsi rdx new-acc2.17905 rbp tmp-ra.17936 acc2.17901 acc1.17902)) (new-acc2.17905 (rbp tmp-ra.17936 new-n.17904 acc2.17901)) (acc2.17901 (rbp tmp-ra.17936 acc1.17902 n.17903 tmp.17933 tmp.17934 rdx new-acc2.17905 new-n.17904)) (tmp.17934 (rbp tmp-ra.17936 acc2.17901 n.17903 acc1.17902)) (rsi (rdx tmp-ra.17936 new-n.17904 acc1.17902 r15 rdi rbp n.17903)) (rbp (acc2.17901 acc1.17902 n.17903 tmp-ra.17936 tmp.17933 tmp.17934 rax rdx new-acc2.17905 new-n.17904 r15 rdi rsi)) (rdi (rdx tmp-ra.17936 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.17902 n.17903 r15 rdi rsi rbp tmp-ra.17936 new-n.17904 acc2.17901)) (rax (rbp tmp-ra.17936)))) (assignment ((tmp-ra.17936 fv0) (acc2.17901 fv1) (acc1.17902 fv2) (new-n.17904 fv3)))) (begin (set! tmp-ra.17936 r15) (set! n.17903 rdi) (set! acc1.17902 rsi) (set! acc2.17901 rdx) (if (begin (if (= n.17903 0) (set! tmp.17933 14) (set! tmp.17933 6)) (!= tmp.17933 6)) (begin (set! rax acc1.17902) (jump tmp-ra.17936 rbp rax)) (if (begin (if (= n.17903 8) (set! tmp.17934 14) (set! tmp.17934 6)) (!= tmp.17934 6)) (begin (set! rax acc2.17901) (jump tmp-ra.17936 rbp rax)) (begin (return-point L.rp.2307 (begin (set! rsi -8) (set! rdi n.17903) (set! r15 L.rp.2307) (jump L.+.2306 rbp r15 rdi rsi))) (set! new-n.17904 rax) (return-point L.rp.2308 (begin (set! rsi acc2.17901) (set! rdi acc1.17902) (set! r15 L.rp.2308) (jump L.+.2306 rbp r15 rdi rsi))) (set! new-acc2.17905 rax) (set! rdx new-acc2.17905) (set! rsi acc2.17901) (set! rdi new-n.17904) (set! r15 tmp-ra.17936) (jump L.fib_loop.2305 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.17937 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.17937) (jump L.fib_loop.2305 rbp r15 rdi rsi rdx))) (module ((new-frames ()) (locals (tmp-ra.17974)) (call-undead ()) (undead-out ((tmp-ra.17974 rbp) (tmp-ra.17974 rdx rbp) (tmp-ra.17974 rdx rsi rbp) (tmp-ra.17974 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.17974 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.17974)) (rdx (r15 rdi rsi rbp tmp-ra.17974)) (rsi (r15 rdi rbp rdx tmp-ra.17974)) (rdi (r15 rbp rsi rdx tmp-ra.17974)) (r15 (rbp rdi rsi rdx)))) (assignment ())) (define L.+.2310 ((new-frames ()) (locals (tmp.17966 tmp.17946 tmp.17967 tmp-ra.17972 tmp.17969 tmp.17945 tmp.17968)) (undead-out ((rdi rsi tmp-ra.17972 rbp) (rsi tmp.17945 tmp-ra.17972 rbp) (tmp.17945 tmp.17946 tmp-ra.17972 rbp) ((((((tmp.17967 tmp.17945 tmp.17946 tmp-ra.17972 rbp) (tmp.17967 tmp.17945 tmp.17946 tmp-ra.17972 rbp)) (tmp.17945 tmp.17946 tmp-ra.17972 rbp)) (tmp.17966 tmp.17945 tmp.17946 tmp-ra.17972 rbp) (tmp.17966 tmp.17945 tmp.17946 tmp-ra.17972 rbp)) (tmp.17945 tmp.17946 tmp-ra.17972 rbp)) ((((((tmp.17969 tmp.17945 tmp.17946 tmp-ra.17972 rbp) (tmp.17969 tmp.17945 tmp.17946 tmp-ra.17972 rbp)) (tmp.17945 tmp.17946 tmp-ra.17972 rbp)) (tmp.17968 tmp.17945 tmp.17946 tmp-ra.17972 rbp) (tmp.17968 tmp.17945 tmp.17946 tmp-ra.17972 rbp)) (tmp.17945 tmp.17946 tmp-ra.17972 rbp)) ((tmp.17946 rax tmp-ra.17972 rbp) (tmp-ra.17972 rax rbp) (rax rbp)) ((tmp-ra.17972 rax rbp) (rax rbp))) ((tmp-ra.17972 rax rbp) (rax rbp))))) (call-undead ()) (conflicts ((tmp.17966 (rbp tmp-ra.17972 tmp.17946 tmp.17945)) (tmp.17946 (rbp tmp-ra.17972 tmp.17945 tmp.17967 tmp.17966 tmp.17969 tmp.17968 rax)) (tmp.17967 (rbp tmp-ra.17972 tmp.17946 tmp.17945)) (tmp-ra.17972 (tmp.17946 tmp.17945 rbp rsi rdi tmp.17967 tmp.17966 tmp.17969 tmp.17968 rax)) (tmp.17969 (rbp tmp-ra.17972 tmp.17946 tmp.17945)) (tmp.17945 (tmp.17946 rbp tmp-ra.17972 rsi tmp.17967 tmp.17966 tmp.17969 tmp.17968)) (tmp.17968 (rbp tmp-ra.17972 tmp.17946 tmp.17945)) (rax (tmp.17946 rbp tmp-ra.17972)) (rbp (tmp.17946 tmp.17945 tmp-ra.17972 tmp.17967 tmp.17966 tmp.17969 tmp.17968 rax)) (rdi (tmp-ra.17972)) (rsi (tmp.17945 tmp-ra.17972)))) (assignment ())) (begin (set! tmp-ra.17972 r15) (set! tmp.17945 rdi) (set! tmp.17946 rsi) (if (begin (if (begin (begin (set! tmp.17967 tmp.17946) (set! tmp.17967 (bitwise-and tmp.17967 7))) (= tmp.17967 0)) (set! tmp.17966 14) (set! tmp.17966 6)) (!= tmp.17966 6)) (if (begin (if (begin (begin (set! tmp.17969 tmp.17945) (set! tmp.17969 (bitwise-and tmp.17969 7))) (= tmp.17969 0)) (set! tmp.17968 14) (set! tmp.17968 6)) (!= tmp.17968 6)) (begin (set! rax tmp.17945) (set! rax (+ rax tmp.17946)) (jump tmp-ra.17972 rbp rax)) (begin (set! rax 318) (jump tmp-ra.17972 rbp rax))) (begin (set! rax 318) (jump tmp-ra.17972 rbp rax))))) (define L.fib_loop.2309 ((new-frames (() ())) (locals (tmp.17970 n.17940 new-acc2.17942 tmp.17971)) (undead-out ((rdi rsi rdx tmp-ra.17973 rbp) (rsi rdx n.17940 tmp-ra.17973 rbp) (rdx n.17940 acc1.17939 tmp-ra.17973 rbp) (acc2.17938 n.17940 acc1.17939 tmp-ra.17973 rbp) ((((acc2.17938 n.17940 acc1.17939 tmp-ra.17973 rbp) (tmp.17970 acc2.17938 n.17940 acc1.17939 tmp-ra.17973 rbp) (tmp.17970 acc2.17938 n.17940 acc1.17939 tmp-ra.17973 rbp)) (acc2.17938 n.17940 acc1.17939 tmp-ra.17973 rbp)) ((tmp-ra.17973 rax rbp) (rax rbp)) ((((acc1.17939 n.17940 acc2.17938 tmp-ra.17973 rbp) (tmp.17971 acc1.17939 n.17940 acc2.17938 tmp-ra.17973 rbp) (tmp.17971 acc1.17939 n.17940 acc2.17938 tmp-ra.17973 rbp)) (acc1.17939 n.17940 acc2.17938 tmp-ra.17973 rbp)) ((tmp-ra.17973 rax rbp) (rax rbp)) (((rax acc1.17939 acc2.17938 tmp-ra.17973 rbp) ((n.17940 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.17939 acc2.17938 new-n.17941 tmp-ra.17973 rbp) ((rax acc2.17938 new-n.17941 tmp-ra.17973 rbp) ((acc1.17939 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.17942 acc2.17938 new-n.17941 tmp-ra.17973 rbp) (acc2.17938 new-n.17941 tmp-ra.17973 rdx rbp) (new-n.17941 tmp-ra.17973 rdx rsi rbp) (tmp-ra.17973 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (call-undead (new-n.17941 acc1.17939 acc2.17938 tmp-ra.17973)) (conflicts ((tmp.17970 (rbp tmp-ra.17973 acc1.17939 n.17940 acc2.17938)) (n.17940 (acc2.17938 acc1.17939 rbp tmp-ra.17973 rdx tmp.17970 tmp.17971 rsi)) (acc1.17939 (acc2.17938 rbp tmp-ra.17973 n.17940 rdx tmp.17970 tmp.17971 rsi new-n.17941)) (tmp-ra.17973 (acc2.17938 acc1.17939 n.17940 rbp tmp.17970 tmp.17971 rax rdi rsi rdx new-acc2.17942 new-n.17941)) (new-n.17941 (rsi rdx new-acc2.17942 rbp tmp-ra.17973 acc2.17938 acc1.17939)) (new-acc2.17942 (rbp tmp-ra.17973 new-n.17941 acc2.17938)) (acc2.17938 (rbp tmp-ra.17973 acc1.17939 n.17940 tmp.17970 tmp.17971 rdx new-acc2.17942 new-n.17941)) (tmp.17971 (rbp tmp-ra.17973 acc2.17938 n.17940 acc1.17939)) (rsi (rdx tmp-ra.17973 new-n.17941 acc1.17939 r15 rdi rbp n.17940)) (rbp (acc2.17938 acc1.17939 n.17940 tmp-ra.17973 tmp.17970 tmp.17971 rax rdx new-acc2.17942 new-n.17941 r15 rdi rsi)) (rdi (rdx tmp-ra.17973 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.17939 n.17940 r15 rdi rsi rbp tmp-ra.17973 new-n.17941 acc2.17938)) (rax (rbp tmp-ra.17973)))) (assignment ((tmp-ra.17973 fv0) (acc2.17938 fv1) (acc1.17939 fv2) (new-n.17941 fv3)))) (begin (set! tmp-ra.17973 r15) (set! n.17940 rdi) (set! acc1.17939 rsi) (set! acc2.17938 rdx) (if (begin (if (= n.17940 0) (set! tmp.17970 14) (set! tmp.17970 6)) (!= tmp.17970 6)) (begin (set! rax acc1.17939) (jump tmp-ra.17973 rbp rax)) (if (begin (if (= n.17940 8) (set! tmp.17971 14) (set! tmp.17971 6)) (!= tmp.17971 6)) (begin (set! rax acc2.17938) (jump tmp-ra.17973 rbp rax)) (begin (return-point L.rp.2311 (begin (set! rsi -8) (set! rdi n.17940) (set! r15 L.rp.2311) (jump L.+.2310 rbp r15 rdi rsi))) (set! new-n.17941 rax) (return-point L.rp.2312 (begin (set! rsi acc2.17938) (set! rdi acc1.17939) (set! r15 L.rp.2312) (jump L.+.2310 rbp r15 rdi rsi))) (set! new-acc2.17942 rax) (set! rdx new-acc2.17942) (set! rsi acc2.17938) (set! rdi new-n.17941) (set! r15 tmp-ra.17973) (jump L.fib_loop.2309 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.17974 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.17974) (jump L.fib_loop.2309 rbp r15 rdi rsi rdx)))) ((module ((locals (tmp-ra.18000)) (undead-out ((tmp-ra.18000 rbp) (tmp-ra.18000 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.18000 (rdi rbp)) (rbp (r15 rdi tmp-ra.18000)) (rdi (r15 rbp tmp-ra.18000)) (r15 (rbp rdi)))) (assignment ())) (define L.id.2313 ((locals (x.17975 tmp-ra.17999)) (undead-out ((rdi tmp-ra.17999 rbp) (x.17975 tmp-ra.17999 rbp) (tmp-ra.17999 rax rbp) (rax rbp))) (conflicts ((tmp-ra.17999 (rax x.17975 rbp rdi)) (x.17975 (rbp tmp-ra.17999)) (rdi (tmp-ra.17999)) (rbp (rax x.17975 tmp-ra.17999)) (rax (rbp tmp-ra.17999)))) (assignment ())) (begin (set! tmp-ra.17999 r15) (set! x.17975 rdi) (set! rax x.17975) (jump tmp-ra.17999 rbp rax))) (begin (set! tmp-ra.18000 r15) (set! rdi 40) (set! r15 tmp-ra.18000) (jump L.id.2313 rbp r15 rdi))) (module ((locals (y.18002)) (undead-out ((tmp-ra.18032 rbp) ((rax tmp-ra.18032 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (y.18002 tmp-ra.18032 rbp) (tmp-ra.18032 rsi rbp) (tmp-ra.18032 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18032 (rdi rsi y.18002 rbp)) (y.18002 (rbp tmp-ra.18032)) (rbp (rsi y.18002 r15 rdi tmp-ra.18032)) (rdi (rsi tmp-ra.18032 r15 rbp)) (r15 (rsi rbp rdi)) (rsi (r15 rdi rbp tmp-ra.18032)))) (assignment ((tmp-ra.18032 fv0)))) (define L.+.2315 ((locals (tmp.18028 tmp.18005 tmp.18029 tmp-ra.18030 tmp.18027 tmp.18006 tmp.18026)) (undead-out ((rdi rsi tmp-ra.18030 rbp) (rsi tmp.18005 tmp-ra.18030 rbp) (tmp.18005 tmp.18006 tmp-ra.18030 rbp) ((((((tmp.18027 tmp.18005 tmp.18006 tmp-ra.18030 rbp) (tmp.18027 tmp.18005 tmp.18006 tmp-ra.18030 rbp)) (tmp.18005 tmp.18006 tmp-ra.18030 rbp)) (tmp.18026 tmp.18005 tmp.18006 tmp-ra.18030 rbp) (tmp.18026 tmp.18005 tmp.18006 tmp-ra.18030 rbp)) (tmp.18005 tmp.18006 tmp-ra.18030 rbp)) ((((((tmp.18029 tmp.18005 tmp.18006 tmp-ra.18030 rbp) (tmp.18029 tmp.18005 tmp.18006 tmp-ra.18030 rbp)) (tmp.18005 tmp.18006 tmp-ra.18030 rbp)) (tmp.18028 tmp.18005 tmp.18006 tmp-ra.18030 rbp) (tmp.18028 tmp.18005 tmp.18006 tmp-ra.18030 rbp)) (tmp.18005 tmp.18006 tmp-ra.18030 rbp)) ((tmp.18006 rax tmp-ra.18030 rbp) (tmp-ra.18030 rax rbp) (rax rbp)) ((tmp-ra.18030 rax rbp) (rax rbp))) ((tmp-ra.18030 rax rbp) (rax rbp))))) (conflicts ((tmp.18026 (rbp tmp-ra.18030 tmp.18006 tmp.18005)) (tmp.18006 (rbp tmp-ra.18030 tmp.18005 tmp.18027 tmp.18026 tmp.18029 tmp.18028 rax)) (tmp.18027 (rbp tmp-ra.18030 tmp.18006 tmp.18005)) (tmp-ra.18030 (tmp.18006 tmp.18005 rbp rsi rdi tmp.18027 tmp.18026 tmp.18029 tmp.18028 rax)) (tmp.18029 (rbp tmp-ra.18030 tmp.18006 tmp.18005)) (tmp.18005 (tmp.18006 rbp tmp-ra.18030 rsi tmp.18027 tmp.18026 tmp.18029 tmp.18028)) (tmp.18028 (rbp tmp-ra.18030 tmp.18006 tmp.18005)) (rax (tmp.18006 rbp tmp-ra.18030)) (rbp (tmp.18006 tmp.18005 tmp-ra.18030 tmp.18027 tmp.18026 tmp.18029 tmp.18028 rax)) (rdi (tmp-ra.18030)) (rsi (tmp.18005 tmp-ra.18030)))) (assignment ())) (begin (set! tmp-ra.18030 r15) (set! tmp.18005 rdi) (set! tmp.18006 rsi) (if (begin (if (begin (begin (set! tmp.18027 tmp.18006) (set! tmp.18027 (bitwise-and tmp.18027 7))) (= tmp.18027 0)) (set! tmp.18026 14) (set! tmp.18026 6)) (!= tmp.18026 6)) (if (begin (if (begin (begin (set! tmp.18029 tmp.18005) (set! tmp.18029 (bitwise-and tmp.18029 7))) (= tmp.18029 0)) (set! tmp.18028 14) (set! tmp.18028 6)) (!= tmp.18028 6)) (begin (set! rax tmp.18005) (set! rax (+ rax tmp.18006)) (jump tmp-ra.18030 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18030 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18030 rbp rax))))) (define L.id.2314 ((locals (x.18001 tmp-ra.18031)) (undead-out ((rdi tmp-ra.18031 rbp) (x.18001 tmp-ra.18031 rbp) (tmp-ra.18031 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18031 (rax x.18001 rbp rdi)) (x.18001 (rbp tmp-ra.18031)) (rdi (tmp-ra.18031)) (rbp (rax x.18001 tmp-ra.18031)) (rax (rbp tmp-ra.18031)))) (assignment ())) (begin (set! tmp-ra.18031 r15) (set! x.18001 rdi) (set! rax x.18001) (jump tmp-ra.18031 rbp rax))) (begin (set! tmp-ra.18032 r15) (begin (set! rbp (- rbp 8)) (return-point L.rp.2316 (begin (set! rdi 40) (set! r15 L.rp.2316) (jump L.id.2314 rbp r15 rdi))) (set! rbp (+ rbp 8))) (set! y.18002 rax) (set! rsi y.18002) (set! rdi 40) (set! r15 tmp-ra.18032) (jump L.+.2315 rbp r15 rdi rsi))) (module ((locals (tmp-ra.18069)) (undead-out ((tmp-ra.18069 rbp) (tmp-ra.18069 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.18069 (rdi rbp)) (rbp (r15 rdi tmp-ra.18069)) (rdi (r15 rbp tmp-ra.18069)) (r15 (rbp rdi)))) (assignment ())) (define L.+.2319 ((locals (tmp.18062 tmp.18039 tmp.18063 tmp-ra.18066 tmp.18061 tmp.18040 tmp.18060)) (undead-out ((rdi rsi tmp-ra.18066 rbp) (rsi tmp.18039 tmp-ra.18066 rbp) (tmp.18039 tmp.18040 tmp-ra.18066 rbp) ((((((tmp.18061 tmp.18039 tmp.18040 tmp-ra.18066 rbp) (tmp.18061 tmp.18039 tmp.18040 tmp-ra.18066 rbp)) (tmp.18039 tmp.18040 tmp-ra.18066 rbp)) (tmp.18060 tmp.18039 tmp.18040 tmp-ra.18066 rbp) (tmp.18060 tmp.18039 tmp.18040 tmp-ra.18066 rbp)) (tmp.18039 tmp.18040 tmp-ra.18066 rbp)) ((((((tmp.18063 tmp.18039 tmp.18040 tmp-ra.18066 rbp) (tmp.18063 tmp.18039 tmp.18040 tmp-ra.18066 rbp)) (tmp.18039 tmp.18040 tmp-ra.18066 rbp)) (tmp.18062 tmp.18039 tmp.18040 tmp-ra.18066 rbp) (tmp.18062 tmp.18039 tmp.18040 tmp-ra.18066 rbp)) (tmp.18039 tmp.18040 tmp-ra.18066 rbp)) ((tmp.18040 rax tmp-ra.18066 rbp) (tmp-ra.18066 rax rbp) (rax rbp)) ((tmp-ra.18066 rax rbp) (rax rbp))) ((tmp-ra.18066 rax rbp) (rax rbp))))) (conflicts ((tmp.18060 (rbp tmp-ra.18066 tmp.18040 tmp.18039)) (tmp.18040 (rbp tmp-ra.18066 tmp.18039 tmp.18061 tmp.18060 tmp.18063 tmp.18062 rax)) (tmp.18061 (rbp tmp-ra.18066 tmp.18040 tmp.18039)) (tmp-ra.18066 (tmp.18040 tmp.18039 rbp rsi rdi tmp.18061 tmp.18060 tmp.18063 tmp.18062 rax)) (tmp.18063 (rbp tmp-ra.18066 tmp.18040 tmp.18039)) (tmp.18039 (tmp.18040 rbp tmp-ra.18066 rsi tmp.18061 tmp.18060 tmp.18063 tmp.18062)) (tmp.18062 (rbp tmp-ra.18066 tmp.18040 tmp.18039)) (rax (tmp.18040 rbp tmp-ra.18066)) (rbp (tmp.18040 tmp.18039 tmp-ra.18066 tmp.18061 tmp.18060 tmp.18063 tmp.18062 rax)) (rdi (tmp-ra.18066)) (rsi (tmp.18039 tmp-ra.18066)))) (assignment ())) (begin (set! tmp-ra.18066 r15) (set! tmp.18039 rdi) (set! tmp.18040 rsi) (if (begin (if (begin (begin (set! tmp.18061 tmp.18040) (set! tmp.18061 (bitwise-and tmp.18061 7))) (= tmp.18061 0)) (set! tmp.18060 14) (set! tmp.18060 6)) (!= tmp.18060 6)) (if (begin (if (begin (begin (set! tmp.18063 tmp.18039) (set! tmp.18063 (bitwise-and tmp.18063 7))) (= tmp.18063 0)) (set! tmp.18062 14) (set! tmp.18062 6)) (!= tmp.18062 6)) (begin (set! rax tmp.18039) (set! rax (+ rax tmp.18040)) (jump tmp-ra.18066 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18066 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18066 rbp rax))))) (define L.odd?.2317 ((locals (y.18034 x.18033 tmp.18064)) (undead-out ((rdi tmp-ra.18067 rbp) (x.18033 tmp-ra.18067 rbp) ((((x.18033 tmp-ra.18067 rbp) (tmp.18064 x.18033 tmp-ra.18067 rbp) (tmp.18064 x.18033 tmp-ra.18067 rbp)) (x.18033 tmp-ra.18067 rbp)) ((tmp-ra.18067 rax rbp) (rax rbp)) (((rax tmp-ra.18067 rbp) ((x.18033 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.18034 tmp-ra.18067 rbp) (tmp-ra.18067 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (conflicts ((tmp.18064 (rbp tmp-ra.18067 x.18033)) (x.18033 (rbp tmp-ra.18067 tmp.18064 rsi)) (tmp-ra.18067 (x.18033 rbp tmp.18064 rax rdi y.18034)) (y.18034 (rbp tmp-ra.18067)) (rsi (r15 rdi rbp x.18033)) (rbp (x.18033 tmp-ra.18067 tmp.18064 rax y.18034 r15 rdi rsi)) (rdi (tmp-ra.18067 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.18067)))) (assignment ((tmp-ra.18067 fv0)))) (begin (set! tmp-ra.18067 r15) (set! x.18033 rdi) (if (begin (if (= x.18033 0) (set! tmp.18064 14) (set! tmp.18064 6)) (!= tmp.18064 6)) (begin (set! rax 0) (jump tmp-ra.18067 rbp rax)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2320 (begin (set! rsi -8) (set! rdi x.18033) (set! r15 L.rp.2320) (jump L.+.2319 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! y.18034 rax) (set! rdi y.18034) (set! r15 tmp-ra.18067) (jump L.even?.2318 rbp r15 rdi))))) (define L.even?.2318 ((locals (y.18036 x.18035 tmp.18065)) (undead-out ((rdi tmp-ra.18068 rbp) (x.18035 tmp-ra.18068 rbp) ((((x.18035 tmp-ra.18068 rbp) (tmp.18065 x.18035 tmp-ra.18068 rbp) (tmp.18065 x.18035 tmp-ra.18068 rbp)) (x.18035 tmp-ra.18068 rbp)) ((tmp-ra.18068 rax rbp) (rax rbp)) (((rax tmp-ra.18068 rbp) ((x.18035 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.18036 tmp-ra.18068 rbp) (tmp-ra.18068 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (conflicts ((tmp.18065 (rbp tmp-ra.18068 x.18035)) (x.18035 (rbp tmp-ra.18068 tmp.18065 rsi)) (tmp-ra.18068 (x.18035 rbp tmp.18065 rax rdi y.18036)) (y.18036 (rbp tmp-ra.18068)) (rsi (r15 rdi rbp x.18035)) (rbp (x.18035 tmp-ra.18068 tmp.18065 rax y.18036 r15 rdi rsi)) (rdi (tmp-ra.18068 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.18068)))) (assignment ((tmp-ra.18068 fv0)))) (begin (set! tmp-ra.18068 r15) (set! x.18035 rdi) (if (begin (if (= x.18035 0) (set! tmp.18065 14) (set! tmp.18065 6)) (!= tmp.18065 6)) (begin (set! rax 8) (jump tmp-ra.18068 rbp rax)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2321 (begin (set! rsi -8) (set! rdi x.18035) (set! r15 L.rp.2321) (jump L.+.2319 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! y.18036 rax) (set! rdi y.18036) (set! r15 tmp-ra.18068) (jump L.odd?.2317 rbp r15 rdi))))) (begin (set! tmp-ra.18069 r15) (set! rdi 40) (set! r15 tmp-ra.18069) (jump L.even?.2318 rbp r15 rdi))) (module ((locals (tmp-ra.18098)) (undead-out ((tmp-ra.18098 rbp) (tmp-ra.18098 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18098 (rax rbp)) (rbp (rax tmp-ra.18098)) (rax (rbp tmp-ra.18098)))) (assignment ())) (define L.zero.2322 ((locals (v3.18070 v2.18071 v1.18072 v0.18073 tmp-ra.18097)) (undead-out ((rdi rsi rdx rcx tmp-ra.18097 rbp) (rsi rdx rcx tmp-ra.18097 rbp) (rdx rcx tmp-ra.18097 rbp) (rcx tmp-ra.18097 rbp) (tmp-ra.18097 rbp) (tmp-ra.18097 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18097 (rax v3.18070 v2.18071 v1.18072 v0.18073 rbp rcx rdx rsi rdi)) (v0.18073 (rbp tmp-ra.18097 rcx rdx rsi)) (v1.18072 (rbp tmp-ra.18097 rcx rdx)) (v2.18071 (rbp tmp-ra.18097 rcx)) (v3.18070 (rbp tmp-ra.18097)) (rdi (tmp-ra.18097)) (rsi (v0.18073 tmp-ra.18097)) (rdx (v1.18072 v0.18073 tmp-ra.18097)) (rcx (v2.18071 v1.18072 v0.18073 tmp-ra.18097)) (rbp (rax v3.18070 v2.18071 v1.18072 v0.18073 tmp-ra.18097)) (rax (rbp tmp-ra.18097)))) (assignment ())) (begin (set! tmp-ra.18097 r15) (set! v0.18073 rdi) (set! v1.18072 rsi) (set! v2.18071 rdx) (set! v3.18070 rcx) (set! rax 0) (jump tmp-ra.18097 rbp rax))) (begin (set! tmp-ra.18098 r15) (set! rax 0) (jump tmp-ra.18098 rbp rax))) (module ((locals (tmp-ra.18125 y.18100)) (undead-out ((tmp-ra.18125 rbp) (tmp-ra.18125 y.18100 rbp) (tmp-ra.18125 y.18100 rdi rbp) (y.18100 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.18100 (r15 rdi rbp tmp-ra.18125)) (tmp-ra.18125 (rdi y.18100 rbp)) (rbp (r15 rdi y.18100 tmp-ra.18125)) (rdi (r15 rbp y.18100 tmp-ra.18125)) (r15 (rbp rdi y.18100)))) (assignment ())) (define L.id.2323 ((locals (x.18099 tmp-ra.18124)) (undead-out ((rdi tmp-ra.18124 rbp) (x.18099 tmp-ra.18124 rbp) (tmp-ra.18124 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18124 (rax x.18099 rbp rdi)) (x.18099 (rbp tmp-ra.18124)) (rdi (tmp-ra.18124)) (rbp (rax x.18099 tmp-ra.18124)) (rax (rbp tmp-ra.18124)))) (assignment ())) (begin (set! tmp-ra.18124 r15) (set! x.18099 rdi) (set! rax x.18099) (jump tmp-ra.18124 rbp rax))) (begin (set! tmp-ra.18125 r15) (set! y.18100 L.id.2323) (set! rdi 40) (set! r15 tmp-ra.18125) (jump y.18100 rbp r15 rdi))) (module ((locals (tmp.18155 tmp-ra.18154 y.18128)) (undead-out ((tmp-ra.18154 rbp) (((tmp.18155 tmp-ra.18154 rbp) (tmp-ra.18154 rbp)) (tmp-ra.18154 y.18128 rbp) (tmp-ra.18154 y.18128 rbp)) (tmp-ra.18154 y.18128 rdi rbp) (y.18128 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.18128 (r15 rdi rbp tmp-ra.18154)) (tmp-ra.18154 (rdi tmp.18155 y.18128 rbp)) (tmp.18155 (rbp tmp-ra.18154)) (rbp (r15 rdi tmp.18155 y.18128 tmp-ra.18154)) (rdi (r15 rbp y.18128 tmp-ra.18154)) (r15 (rbp rdi y.18128)))) (assignment ())) (define L.id1.2324 ((locals (x.18126 tmp-ra.18152)) (undead-out ((rdi tmp-ra.18152 rbp) (x.18126 tmp-ra.18152 rbp) (tmp-ra.18152 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18152 (rax x.18126 rbp rdi)) (x.18126 (rbp tmp-ra.18152)) (rdi (tmp-ra.18152)) (rbp (rax x.18126 tmp-ra.18152)) (rax (rbp tmp-ra.18152)))) (assignment ())) (begin (set! tmp-ra.18152 r15) (set! x.18126 rdi) (set! rax x.18126) (jump tmp-ra.18152 rbp rax))) (define L.id2.2325 ((locals (x.18127 tmp-ra.18153)) (undead-out ((rdi tmp-ra.18153 rbp) (x.18127 tmp-ra.18153 rbp) (tmp-ra.18153 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18153 (rax x.18127 rbp rdi)) (x.18127 (rbp tmp-ra.18153)) (rdi (tmp-ra.18153)) (rbp (rax x.18127 tmp-ra.18153)) (rax (rbp tmp-ra.18153)))) (assignment ())) (begin (set! tmp-ra.18153 r15) (set! x.18127 rdi) (set! rax x.18127) (jump tmp-ra.18153 rbp rax))) (begin (set! tmp-ra.18154 r15) (if (begin (set! tmp.18155 14) (!= tmp.18155 6)) (set! y.18128 L.id1.2324) (set! y.18128 L.id2.2325)) (set! rdi 40) (set! r15 tmp-ra.18154) (jump y.18128 rbp r15 rdi))) (module ((locals (tmp.18189)) (undead-out ((tmp-ra.18192 rbp) ((rax tmp-ra.18192 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18188 tmp-ra.18192 rbp) ((rax tmp.18188 tmp-ra.18192 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18189 tmp.18188 tmp-ra.18192 rbp) (tmp.18188 tmp-ra.18192 rsi rbp) (tmp-ra.18192 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18192 (rdi rsi tmp.18189 tmp.18188 rbp)) (tmp.18188 (rsi tmp.18189 rbp tmp-ra.18192)) (tmp.18189 (rbp tmp-ra.18192 tmp.18188)) (rbp (tmp.18189 tmp.18188 r15 rdi rsi tmp-ra.18192)) (rsi (tmp-ra.18192 tmp.18188 r15 rdi rbp)) (rdi (tmp-ra.18192 r15 rbp rsi)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.18192 fv0) (tmp.18188 fv1)))) (define L.*.2327 ((locals (tmp.18181 tmp.18156 tmp.18182 tmp.18183 tmp-ra.18190 tmp.18180 tmp.18157 tmp.18179)) (undead-out ((rdi rsi tmp-ra.18190 rbp) (rsi tmp.18156 tmp-ra.18190 rbp) (tmp.18157 tmp.18156 tmp-ra.18190 rbp) ((((((tmp.18180 tmp.18157 tmp.18156 tmp-ra.18190 rbp) (tmp.18180 tmp.18157 tmp.18156 tmp-ra.18190 rbp)) (tmp.18157 tmp.18156 tmp-ra.18190 rbp)) (tmp.18179 tmp.18157 tmp.18156 tmp-ra.18190 rbp) (tmp.18179 tmp.18157 tmp.18156 tmp-ra.18190 rbp)) (tmp.18157 tmp.18156 tmp-ra.18190 rbp)) ((((((tmp.18182 tmp.18157 tmp.18156 tmp-ra.18190 rbp) (tmp.18182 tmp.18157 tmp.18156 tmp-ra.18190 rbp)) (tmp.18157 tmp.18156 tmp-ra.18190 rbp)) (tmp.18181 tmp.18157 tmp.18156 tmp-ra.18190 rbp) (tmp.18181 tmp.18157 tmp.18156 tmp-ra.18190 rbp)) (tmp.18157 tmp.18156 tmp-ra.18190 rbp)) ((tmp.18183 tmp.18156 tmp-ra.18190 rbp) (tmp.18156 tmp.18183 tmp-ra.18190 rbp) (tmp.18183 rax tmp-ra.18190 rbp) (tmp-ra.18190 rax rbp) (rax rbp)) ((tmp-ra.18190 rax rbp) (rax rbp))) ((tmp-ra.18190 rax rbp) (rax rbp))))) (conflicts ((tmp.18179 (rbp tmp-ra.18190 tmp.18156 tmp.18157)) (tmp.18157 (rbp tmp-ra.18190 tmp.18156 tmp.18180 tmp.18179 tmp.18182 tmp.18181)) (tmp.18180 (rbp tmp-ra.18190 tmp.18156 tmp.18157)) (tmp-ra.18190 (tmp.18157 tmp.18156 rbp rsi rdi tmp.18180 tmp.18179 tmp.18182 tmp.18181 tmp.18183 rax)) (tmp.18183 (rax rbp tmp-ra.18190 tmp.18156)) (tmp.18182 (rbp tmp-ra.18190 tmp.18156 tmp.18157)) (tmp.18156 (tmp.18157 rbp tmp-ra.18190 rsi tmp.18180 tmp.18179 tmp.18182 tmp.18181 tmp.18183)) (tmp.18181 (rbp tmp-ra.18190 tmp.18156 tmp.18157)) (rax (tmp.18183 rbp tmp-ra.18190)) (rbp (tmp.18157 tmp.18156 tmp-ra.18190 tmp.18180 tmp.18179 tmp.18182 tmp.18181 tmp.18183 rax)) (rdi (tmp-ra.18190)) (rsi (tmp.18156 tmp-ra.18190)))) (assignment ())) (begin (set! tmp-ra.18190 r15) (set! tmp.18156 rdi) (set! tmp.18157 rsi) (if (begin (if (begin (begin (set! tmp.18180 tmp.18157) (set! tmp.18180 (bitwise-and tmp.18180 7))) (= tmp.18180 0)) (set! tmp.18179 14) (set! tmp.18179 6)) (!= tmp.18179 6)) (if (begin (if (begin (begin (set! tmp.18182 tmp.18156) (set! tmp.18182 (bitwise-and tmp.18182 7))) (= tmp.18182 0)) (set! tmp.18181 14) (set! tmp.18181 6)) (!= tmp.18181 6)) (begin (set! tmp.18183 tmp.18157) (set! tmp.18183 (arithmetic-shift-right tmp.18183 3)) (set! rax tmp.18156) (set! rax (* rax tmp.18183)) (jump tmp-ra.18190 rbp rax)) (begin (set! rax 62) (jump tmp-ra.18190 rbp rax))) (begin (set! rax 62) (jump tmp-ra.18190 rbp rax))))) (define L.+.2326 ((locals (tmp.18186 tmp.18158 tmp.18187 tmp-ra.18191 tmp.18185 tmp.18159 tmp.18184)) (undead-out ((rdi rsi tmp-ra.18191 rbp) (rsi tmp.18158 tmp-ra.18191 rbp) (tmp.18158 tmp.18159 tmp-ra.18191 rbp) ((((((tmp.18185 tmp.18158 tmp.18159 tmp-ra.18191 rbp) (tmp.18185 tmp.18158 tmp.18159 tmp-ra.18191 rbp)) (tmp.18158 tmp.18159 tmp-ra.18191 rbp)) (tmp.18184 tmp.18158 tmp.18159 tmp-ra.18191 rbp) (tmp.18184 tmp.18158 tmp.18159 tmp-ra.18191 rbp)) (tmp.18158 tmp.18159 tmp-ra.18191 rbp)) ((((((tmp.18187 tmp.18158 tmp.18159 tmp-ra.18191 rbp) (tmp.18187 tmp.18158 tmp.18159 tmp-ra.18191 rbp)) (tmp.18158 tmp.18159 tmp-ra.18191 rbp)) (tmp.18186 tmp.18158 tmp.18159 tmp-ra.18191 rbp) (tmp.18186 tmp.18158 tmp.18159 tmp-ra.18191 rbp)) (tmp.18158 tmp.18159 tmp-ra.18191 rbp)) ((tmp.18159 rax tmp-ra.18191 rbp) (tmp-ra.18191 rax rbp) (rax rbp)) ((tmp-ra.18191 rax rbp) (rax rbp))) ((tmp-ra.18191 rax rbp) (rax rbp))))) (conflicts ((tmp.18184 (rbp tmp-ra.18191 tmp.18159 tmp.18158)) (tmp.18159 (rbp tmp-ra.18191 tmp.18158 tmp.18185 tmp.18184 tmp.18187 tmp.18186 rax)) (tmp.18185 (rbp tmp-ra.18191 tmp.18159 tmp.18158)) (tmp-ra.18191 (tmp.18159 tmp.18158 rbp rsi rdi tmp.18185 tmp.18184 tmp.18187 tmp.18186 rax)) (tmp.18187 (rbp tmp-ra.18191 tmp.18159 tmp.18158)) (tmp.18158 (tmp.18159 rbp tmp-ra.18191 rsi tmp.18185 tmp.18184 tmp.18187 tmp.18186)) (tmp.18186 (rbp tmp-ra.18191 tmp.18159 tmp.18158)) (rax (tmp.18159 rbp tmp-ra.18191)) (rbp (tmp.18159 tmp.18158 tmp-ra.18191 tmp.18185 tmp.18184 tmp.18187 tmp.18186 rax)) (rdi (tmp-ra.18191)) (rsi (tmp.18158 tmp-ra.18191)))) (assignment ())) (begin (set! tmp-ra.18191 r15) (set! tmp.18158 rdi) (set! tmp.18159 rsi) (if (begin (if (begin (begin (set! tmp.18185 tmp.18159) (set! tmp.18185 (bitwise-and tmp.18185 7))) (= tmp.18185 0)) (set! tmp.18184 14) (set! tmp.18184 6)) (!= tmp.18184 6)) (if (begin (if (begin (begin (set! tmp.18187 tmp.18158) (set! tmp.18187 (bitwise-and tmp.18187 7))) (= tmp.18187 0)) (set! tmp.18186 14) (set! tmp.18186 6)) (!= tmp.18186 6)) (begin (set! rax tmp.18158) (set! rax (+ rax tmp.18159)) (jump tmp-ra.18191 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18191 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18191 rbp rax))))) (begin (set! tmp-ra.18192 r15) (begin (set! rbp (- rbp 16)) (return-point L.rp.2328 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2328) (jump L.+.2326 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.18188 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2329 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2329) (jump L.*.2327 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.18189 rax) (set! rsi tmp.18189) (set! rdi tmp.18188) (set! r15 tmp-ra.18192) (jump L.+.2326 rbp r15 rdi rsi))) (module ((locals (tmp.18221 tmp.18220)) (undead-out ((tmp-ra.18223 rbp) (((((((rax tmp-ra.18223 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18221 tmp-ra.18223 rbp)) (tmp-ra.18223 rbp)) (tmp.18220 tmp-ra.18223 rbp) (tmp.18220 tmp-ra.18223 rbp)) (tmp-ra.18223 rbp)) ((tmp-ra.18223 rax rbp) (rax rbp)) ((tmp-ra.18223 rax rbp) (rax rbp))))) (conflicts ((tmp.18220 (rbp tmp-ra.18223)) (tmp.18221 (rbp tmp-ra.18223)) (tmp-ra.18223 (rbp tmp.18221 tmp.18220 rax)) (rax (rbp tmp-ra.18223)) (rbp (tmp-ra.18223 r15 rdi rsi tmp.18221 tmp.18220 rax)) (rsi (r15 rdi rbp)) (rdi (r15 rbp rsi)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.18223 fv0)))) (define L.+.2330 ((locals (tmp.18218 tmp.18195 tmp.18219 tmp-ra.18222 tmp.18217 tmp.18196 tmp.18216)) (undead-out ((rdi rsi tmp-ra.18222 rbp) (rsi tmp.18195 tmp-ra.18222 rbp) (tmp.18195 tmp.18196 tmp-ra.18222 rbp) ((((((tmp.18217 tmp.18195 tmp.18196 tmp-ra.18222 rbp) (tmp.18217 tmp.18195 tmp.18196 tmp-ra.18222 rbp)) (tmp.18195 tmp.18196 tmp-ra.18222 rbp)) (tmp.18216 tmp.18195 tmp.18196 tmp-ra.18222 rbp) (tmp.18216 tmp.18195 tmp.18196 tmp-ra.18222 rbp)) (tmp.18195 tmp.18196 tmp-ra.18222 rbp)) ((((((tmp.18219 tmp.18195 tmp.18196 tmp-ra.18222 rbp) (tmp.18219 tmp.18195 tmp.18196 tmp-ra.18222 rbp)) (tmp.18195 tmp.18196 tmp-ra.18222 rbp)) (tmp.18218 tmp.18195 tmp.18196 tmp-ra.18222 rbp) (tmp.18218 tmp.18195 tmp.18196 tmp-ra.18222 rbp)) (tmp.18195 tmp.18196 tmp-ra.18222 rbp)) ((tmp.18196 rax tmp-ra.18222 rbp) (tmp-ra.18222 rax rbp) (rax rbp)) ((tmp-ra.18222 rax rbp) (rax rbp))) ((tmp-ra.18222 rax rbp) (rax rbp))))) (conflicts ((tmp.18216 (rbp tmp-ra.18222 tmp.18196 tmp.18195)) (tmp.18196 (rbp tmp-ra.18222 tmp.18195 tmp.18217 tmp.18216 tmp.18219 tmp.18218 rax)) (tmp.18217 (rbp tmp-ra.18222 tmp.18196 tmp.18195)) (tmp-ra.18222 (tmp.18196 tmp.18195 rbp rsi rdi tmp.18217 tmp.18216 tmp.18219 tmp.18218 rax)) (tmp.18219 (rbp tmp-ra.18222 tmp.18196 tmp.18195)) (tmp.18195 (tmp.18196 rbp tmp-ra.18222 rsi tmp.18217 tmp.18216 tmp.18219 tmp.18218)) (tmp.18218 (rbp tmp-ra.18222 tmp.18196 tmp.18195)) (rax (tmp.18196 rbp tmp-ra.18222)) (rbp (tmp.18196 tmp.18195 tmp-ra.18222 tmp.18217 tmp.18216 tmp.18219 tmp.18218 rax)) (rdi (tmp-ra.18222)) (rsi (tmp.18195 tmp-ra.18222)))) (assignment ())) (begin (set! tmp-ra.18222 r15) (set! tmp.18195 rdi) (set! tmp.18196 rsi) (if (begin (if (begin (begin (set! tmp.18217 tmp.18196) (set! tmp.18217 (bitwise-and tmp.18217 7))) (= tmp.18217 0)) (set! tmp.18216 14) (set! tmp.18216 6)) (!= tmp.18216 6)) (if (begin (if (begin (begin (set! tmp.18219 tmp.18195) (set! tmp.18219 (bitwise-and tmp.18219 7))) (= tmp.18219 0)) (set! tmp.18218 14) (set! tmp.18218 6)) (!= tmp.18218 6)) (begin (set! rax tmp.18195) (set! rax (+ rax tmp.18196)) (jump tmp-ra.18222 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18222 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18222 rbp rax))))) (begin (set! tmp-ra.18223 r15) (if (begin (if (begin (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2331 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2331) (jump L.+.2330 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! tmp.18221 rax)) (= tmp.18221 88)) (set! tmp.18220 14) (set! tmp.18220 6)) (!= tmp.18220 6)) (begin (set! rax 32) (jump tmp-ra.18223 rbp rax)) (begin (set! rax 48) (jump tmp-ra.18223 rbp rax))))) (module ((locals (tmp-ra.18247)) (undead-out ((tmp-ra.18247 rbp) (tmp-ra.18247 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18247 (rax rbp)) (rbp (rax tmp-ra.18247)) (rax (rbp tmp-ra.18247)))) (assignment ())) (begin (set! tmp-ra.18247 r15) (set! rax 14) (jump tmp-ra.18247 rbp rax))) (module ((locals (tmp-ra.18271)) (undead-out ((tmp-ra.18271 rbp) (tmp-ra.18271 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18271 (rax rbp)) (rbp (rax tmp-ra.18271)) (rax (rbp tmp-ra.18271)))) (assignment ())) (begin (set! tmp-ra.18271 r15) (set! rax 6) (jump tmp-ra.18271 rbp rax))) (module ((locals (tmp-ra.18295)) (undead-out ((tmp-ra.18295 rbp) (tmp-ra.18295 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18295 (rax rbp)) (rbp (rax tmp-ra.18295)) (rax (rbp tmp-ra.18295)))) (assignment ())) (begin (set! tmp-ra.18295 r15) (set! rax 22) (jump tmp-ra.18295 rbp rax))) (module ((locals (tmp-ra.18361)) (undead-out ((tmp-ra.18361 rbp) (tmp-ra.18361 fv0 rbp) (tmp-ra.18361 fv0 r9 rbp) (tmp-ra.18361 fv0 r9 r8 rbp) (tmp-ra.18361 fv0 r9 r8 rcx rbp) (tmp-ra.18361 fv0 r9 r8 rcx rdx rbp) (tmp-ra.18361 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.18361 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.18361 (rdi rsi rdx rcx r8 r9 fv0 rbp)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 tmp-ra.18361)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp tmp-ra.18361)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 tmp-ra.18361)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 tmp-ra.18361)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 tmp-ra.18361)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 tmp-ra.18361)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 tmp-ra.18361)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 tmp-ra.18361)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0)))) (assignment ())) (define L.+.2335 ((locals (tmp.18352 tmp.18329 tmp.18353 tmp-ra.18355 tmp.18351 tmp.18330 tmp.18350)) (undead-out ((rdi rsi tmp-ra.18355 rbp) (rsi tmp.18329 tmp-ra.18355 rbp) (tmp.18329 tmp.18330 tmp-ra.18355 rbp) ((((((tmp.18351 tmp.18329 tmp.18330 tmp-ra.18355 rbp) (tmp.18351 tmp.18329 tmp.18330 tmp-ra.18355 rbp)) (tmp.18329 tmp.18330 tmp-ra.18355 rbp)) (tmp.18350 tmp.18329 tmp.18330 tmp-ra.18355 rbp) (tmp.18350 tmp.18329 tmp.18330 tmp-ra.18355 rbp)) (tmp.18329 tmp.18330 tmp-ra.18355 rbp)) ((((((tmp.18353 tmp.18329 tmp.18330 tmp-ra.18355 rbp) (tmp.18353 tmp.18329 tmp.18330 tmp-ra.18355 rbp)) (tmp.18329 tmp.18330 tmp-ra.18355 rbp)) (tmp.18352 tmp.18329 tmp.18330 tmp-ra.18355 rbp) (tmp.18352 tmp.18329 tmp.18330 tmp-ra.18355 rbp)) (tmp.18329 tmp.18330 tmp-ra.18355 rbp)) ((tmp.18330 rax tmp-ra.18355 rbp) (tmp-ra.18355 rax rbp) (rax rbp)) ((tmp-ra.18355 rax rbp) (rax rbp))) ((tmp-ra.18355 rax rbp) (rax rbp))))) (conflicts ((tmp.18350 (rbp tmp-ra.18355 tmp.18330 tmp.18329)) (tmp.18330 (rbp tmp-ra.18355 tmp.18329 tmp.18351 tmp.18350 tmp.18353 tmp.18352 rax)) (tmp.18351 (rbp tmp-ra.18355 tmp.18330 tmp.18329)) (tmp-ra.18355 (tmp.18330 tmp.18329 rbp rsi rdi tmp.18351 tmp.18350 tmp.18353 tmp.18352 rax)) (tmp.18353 (rbp tmp-ra.18355 tmp.18330 tmp.18329)) (tmp.18329 (tmp.18330 rbp tmp-ra.18355 rsi tmp.18351 tmp.18350 tmp.18353 tmp.18352)) (tmp.18352 (rbp tmp-ra.18355 tmp.18330 tmp.18329)) (rax (tmp.18330 rbp tmp-ra.18355)) (rbp (tmp.18330 tmp.18329 tmp-ra.18355 tmp.18351 tmp.18350 tmp.18353 tmp.18352 rax)) (rdi (tmp-ra.18355)) (rsi (tmp.18329 tmp-ra.18355)))) (assignment ())) (begin (set! tmp-ra.18355 r15) (set! tmp.18329 rdi) (set! tmp.18330 rsi) (if (begin (if (begin (begin (set! tmp.18351 tmp.18330) (set! tmp.18351 (bitwise-and tmp.18351 7))) (= tmp.18351 0)) (set! tmp.18350 14) (set! tmp.18350 6)) (!= tmp.18350 6)) (if (begin (if (begin (begin (set! tmp.18353 tmp.18329) (set! tmp.18353 (bitwise-and tmp.18353 7))) (= tmp.18353 0)) (set! tmp.18352 14) (set! tmp.18352 6)) (!= tmp.18352 6)) (begin (set! rax tmp.18329) (set! rax (+ rax tmp.18330)) (jump tmp-ra.18355 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18355 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18355 rbp rax))))) (define L.F.2332 ((locals (tmp.18354 g.18296 f.18297 e.18298 d.18299 c.18300 b.18301 a.18302)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 tmp-ra.18356 rbp) (rsi rdx rcx r8 r9 fv0 a.18302 tmp-ra.18356 rbp) (rdx rcx r8 r9 fv0 a.18302 b.18301 tmp-ra.18356 rbp) (rcx r8 r9 fv0 a.18302 b.18301 c.18300 tmp-ra.18356 rbp) (r8 r9 fv0 a.18302 b.18301 c.18300 d.18299 tmp-ra.18356 rbp) (r9 fv0 a.18302 b.18301 c.18300 d.18299 e.18298 tmp-ra.18356 rbp) (fv0 a.18302 b.18301 c.18300 d.18299 e.18298 f.18297 tmp-ra.18356 rbp) (a.18302 b.18301 c.18300 d.18299 e.18298 f.18297 g.18296 tmp-ra.18356 rbp) ((rax tmp-ra.18356 rbp) ((g.18296 f.18297 e.18298 d.18299 c.18300 b.18301 a.18302 nfv.18358 rbp) (f.18297 e.18298 d.18299 c.18300 b.18301 a.18302 nfv.18358 nfv.18357 rbp) (e.18298 d.18299 c.18300 b.18301 a.18302 nfv.18358 nfv.18357 r9 rbp) (d.18299 c.18300 b.18301 a.18302 nfv.18358 nfv.18357 r9 r8 rbp) (c.18300 b.18301 a.18302 nfv.18358 nfv.18357 r9 r8 rcx rbp) (b.18301 a.18302 nfv.18358 nfv.18357 r9 r8 rcx rdx rbp) (a.18302 nfv.18358 nfv.18357 r9 r8 rcx rdx rsi rbp) (nfv.18358 nfv.18357 r9 r8 rcx rdx rsi rdi rbp) (nfv.18358 nfv.18357 r9 r8 rcx rdx rsi rdi r15 rbp) (nfv.18358 nfv.18357 r9 r8 rcx rdx rsi rdi r15 rbp))) (tmp.18354 tmp-ra.18356 rbp) (tmp-ra.18356 rsi rbp) (tmp-ra.18356 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18356 (tmp.18354 g.18296 f.18297 e.18298 d.18299 c.18300 b.18301 a.18302 rbp fv0 r9 r8 rcx rdx rsi rdi)) (a.18302 (nfv.18357 nfv.18358 g.18296 f.18297 e.18298 d.18299 c.18300 b.18301 rbp tmp-ra.18356 fv0 r9 r8 rcx rdx rsi)) (b.18301 (nfv.18357 nfv.18358 g.18296 f.18297 e.18298 d.18299 c.18300 rbp tmp-ra.18356 a.18302 fv0 r9 r8 rcx rdx)) (c.18300 (nfv.18357 nfv.18358 g.18296 f.18297 e.18298 d.18299 rbp tmp-ra.18356 b.18301 a.18302 fv0 r9 r8 rcx)) (d.18299 (nfv.18357 nfv.18358 g.18296 f.18297 e.18298 rbp tmp-ra.18356 c.18300 b.18301 a.18302 fv0 r9 r8)) (e.18298 (nfv.18357 nfv.18358 g.18296 f.18297 rbp tmp-ra.18356 d.18299 c.18300 b.18301 a.18302 fv0 r9)) (f.18297 (nfv.18357 nfv.18358 g.18296 rbp tmp-ra.18356 e.18298 d.18299 c.18300 b.18301 a.18302 fv0)) (g.18296 (nfv.18358 rbp tmp-ra.18356 f.18297 e.18298 d.18299 c.18300 b.18301 a.18302)) (nfv.18357 (r15 rdi rsi rdx rcx r8 r9 rbp nfv.18358 a.18302 b.18301 c.18300 d.18299 e.18298 f.18297)) (nfv.18358 (r15 rdi rsi rdx rcx r8 r9 nfv.18357 rbp a.18302 b.18301 c.18300 d.18299 e.18298 f.18297 g.18296)) (tmp.18354 (rbp tmp-ra.18356)) (rdi (r15 rbp rsi rdx rcx r8 r9 nfv.18357 nfv.18358 tmp-ra.18356)) (rsi (r15 rdi rbp rdx rcx r8 r9 nfv.18357 nfv.18358 a.18302 tmp-ra.18356)) (rdx (r15 rdi rsi rbp rcx r8 r9 nfv.18357 nfv.18358 b.18301 a.18302 tmp-ra.18356)) (rcx (r15 rdi rsi rdx rbp r8 r9 nfv.18357 nfv.18358 c.18300 b.18301 a.18302 tmp-ra.18356)) (r8 (r15 rdi rsi rdx rcx rbp r9 nfv.18357 nfv.18358 d.18299 c.18300 b.18301 a.18302 tmp-ra.18356)) (r9 (r15 rdi rsi rdx rcx r8 rbp nfv.18357 nfv.18358 e.18298 d.18299 c.18300 b.18301 a.18302 tmp-ra.18356)) (fv0 (f.18297 e.18298 d.18299 c.18300 b.18301 a.18302 tmp-ra.18356)) (rbp (tmp.18354 r15 rdi rsi rdx rcx r8 r9 nfv.18357 nfv.18358 g.18296 f.18297 e.18298 d.18299 c.18300 b.18301 a.18302 tmp-ra.18356)) (r15 (rbp rdi rsi rdx rcx r8 r9 nfv.18357 nfv.18358)))) (assignment ((tmp-ra.18356 fv1) (nfv.18357 fv2) (nfv.18358 fv3)))) (begin (set! tmp-ra.18356 r15) (set! a.18302 rdi) (set! b.18301 rsi) (set! c.18300 rdx) (set! d.18299 rcx) (set! e.18298 r8) (set! f.18297 r9) (set! g.18296 fv0) (begin (set! rbp (- rbp 16)) (return-point L.rp.2336 (begin (set! nfv.18358 64) (set! nfv.18357 g.18296) (set! r9 f.18297) (set! r8 e.18298) (set! rcx d.18299) (set! rdx c.18300) (set! rsi b.18301) (set! rdi a.18302) (set! r15 L.rp.2336) (jump L.G.2333 rbp r15 rdi rsi rdx rcx r8 r9 nfv.18357 nfv.18358))) (set! rbp (+ rbp 16))) (set! tmp.18354 rax) (set! rsi tmp.18354) (set! rdi 80) (set! r15 tmp-ra.18356) (jump L.+.2335 rbp r15 rdi rsi))) (define L.G.2333 ((locals (h.18303 g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 tmp-ra.18359 rbp) (rsi rdx rcx r8 r9 fv0 fv1 a.18310 tmp-ra.18359 rbp) (rdx rcx r8 r9 fv0 fv1 b.18309 a.18310 tmp-ra.18359 rbp) (rcx r8 r9 fv0 fv1 c.18308 b.18309 a.18310 tmp-ra.18359 rbp) (r8 r9 fv0 fv1 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 rbp) (r9 fv0 fv1 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 rbp) (fv0 fv1 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 rbp) (fv1 g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 rbp) (h.18303 g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 rbp) (h.18303 g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 fv2 rbp) (g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 fv2 fv1 rbp) (f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 fv2 fv1 fv0 rbp) (e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 fv2 fv1 fv0 r9 rbp) (d.18307 c.18308 b.18309 a.18310 tmp-ra.18359 fv2 fv1 fv0 r9 r8 rbp) (c.18308 b.18309 a.18310 tmp-ra.18359 fv2 fv1 fv0 r9 r8 rcx rbp) (b.18309 a.18310 tmp-ra.18359 fv2 fv1 fv0 r9 r8 rcx rdx rbp) (a.18310 tmp-ra.18359 fv2 fv1 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.18359 fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.18359 (fv2 h.18303 g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 rbp fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.18310 (fv2 h.18303 g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 rbp tmp-ra.18359 fv1 fv0 r9 r8 rcx rdx rsi)) (b.18309 (fv2 h.18303 g.18304 f.18305 e.18306 d.18307 c.18308 rbp tmp-ra.18359 a.18310 fv1 fv0 r9 r8 rcx rdx)) (c.18308 (fv2 h.18303 g.18304 f.18305 e.18306 d.18307 rbp tmp-ra.18359 a.18310 b.18309 fv1 fv0 r9 r8 rcx)) (d.18307 (fv2 h.18303 g.18304 f.18305 e.18306 rbp tmp-ra.18359 a.18310 b.18309 c.18308 fv1 fv0 r9 r8)) (e.18306 (fv2 h.18303 g.18304 f.18305 rbp tmp-ra.18359 a.18310 b.18309 c.18308 d.18307 fv1 fv0 r9)) (f.18305 (fv2 h.18303 g.18304 rbp tmp-ra.18359 a.18310 b.18309 c.18308 d.18307 e.18306 fv1 fv0)) (g.18304 (fv2 h.18303 rbp tmp-ra.18359 a.18310 b.18309 c.18308 d.18307 e.18306 f.18305 fv1)) (h.18303 (fv2 rbp tmp-ra.18359 a.18310 b.18309 c.18308 d.18307 e.18306 f.18305 g.18304)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.18359)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 fv1 fv2 a.18310 tmp-ra.18359)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 fv1 fv2 b.18309 a.18310 tmp-ra.18359)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 fv1 fv2 c.18308 b.18309 a.18310 tmp-ra.18359)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 fv1 fv2 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 fv1 fv2 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp fv1 fv2 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359)) (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 rbp fv2 g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 h.18303 g.18304 f.18305 e.18306 d.18307 c.18308 b.18309 a.18310 tmp-ra.18359)) (fv2 (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 rbp tmp-ra.18359 a.18310 b.18309 c.18308 d.18307 e.18306 f.18305 g.18304 h.18303)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0 fv1 fv2)))) (assignment ())) (begin (set! tmp-ra.18359 r15) (set! a.18310 rdi) (set! b.18309 rsi) (set! c.18308 rdx) (set! d.18307 rcx) (set! e.18306 r8) (set! f.18305 r9) (set! g.18304 fv0) (set! h.18303 fv1) (set! fv2 72) (set! fv1 h.18303) (set! fv0 g.18304) (set! r9 f.18305) (set! r8 e.18306) (set! rcx d.18307) (set! rdx c.18308) (set! rsi b.18309) (set! rdi a.18310) (set! r15 tmp-ra.18359) (jump L.H.2334 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))) (define L.H.2334 ((locals (r7.18326 r6.18325 r5.18324 r4.18323 r3.18322 r2.18321 r1.18320 b.18318 a.18319)) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.18360 rbp) (rsi rdx rcx r8 r9 fv0 fv1 fv2 a.18319 tmp-ra.18360 rbp) (rdx rcx r8 r9 fv0 fv1 fv2 a.18319 b.18318 tmp-ra.18360 rbp) (rcx r8 r9 fv0 fv1 fv2 a.18319 b.18318 c.18317 tmp-ra.18360 rbp) (r8 r9 fv0 fv1 fv2 a.18319 b.18318 c.18317 d.18316 tmp-ra.18360 rbp) (r9 fv0 fv1 fv2 a.18319 b.18318 c.18317 d.18316 e.18315 tmp-ra.18360 rbp) (fv0 fv1 fv2 a.18319 b.18318 c.18317 d.18316 e.18315 f.18314 tmp-ra.18360 rbp) (fv1 fv2 a.18319 b.18318 c.18317 d.18316 e.18315 f.18314 g.18313 tmp-ra.18360 rbp) (fv2 a.18319 b.18318 c.18317 d.18316 e.18315 f.18314 g.18313 h.18312 tmp-ra.18360 rbp) (a.18319 b.18318 c.18317 d.18316 e.18315 f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((rax c.18317 d.18316 e.18315 f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((a.18319 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r1.18320 c.18317 d.18316 e.18315 f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((rax d.18316 e.18315 f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((r1.18320 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r2.18321 d.18316 e.18315 f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((rax e.18315 f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((r2.18321 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r3.18322 e.18315 f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((rax f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((r3.18322 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r4.18323 f.18314 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((rax g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((r4.18323 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r5.18324 g.18313 h.18312 j.18311 tmp-ra.18360 rbp) ((rax h.18312 j.18311 tmp-ra.18360 rbp) ((r5.18324 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r6.18325 h.18312 j.18311 tmp-ra.18360 rbp) ((rax j.18311 tmp-ra.18360 rbp) ((r6.18325 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (j.18311 r7.18326 tmp-ra.18360 rbp) (r7.18326 tmp-ra.18360 rsi rbp) (tmp-ra.18360 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18360 (r7.18326 r6.18325 r5.18324 r4.18323 r3.18322 r2.18321 r1.18320 j.18311 h.18312 g.18313 f.18314 e.18315 d.18316 c.18317 b.18318 a.18319 rbp fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.18319 (j.18311 h.18312 g.18313 f.18314 e.18315 d.18316 c.18317 b.18318 rbp tmp-ra.18360 fv2 fv1 fv0 r9 r8 rcx rdx rsi)) (b.18318 (j.18311 h.18312 g.18313 f.18314 e.18315 d.18316 c.18317 rbp tmp-ra.18360 a.18319 fv2 fv1 fv0 r9 r8 rcx rdx)) (c.18317 (r1.18320 j.18311 h.18312 g.18313 f.18314 e.18315 d.18316 rbp tmp-ra.18360 b.18318 a.18319 fv2 fv1 fv0 r9 r8 rcx)) (d.18316 (r2.18321 r1.18320 j.18311 h.18312 g.18313 f.18314 e.18315 rbp tmp-ra.18360 c.18317 b.18318 a.18319 fv2 fv1 fv0 r9 r8)) (e.18315 (r3.18322 r2.18321 r1.18320 j.18311 h.18312 g.18313 f.18314 rbp tmp-ra.18360 d.18316 c.18317 b.18318 a.18319 fv2 fv1 fv0 r9)) (f.18314 (r4.18323 r3.18322 r2.18321 r1.18320 j.18311 h.18312 g.18313 rbp tmp-ra.18360 e.18315 d.18316 c.18317 b.18318 a.18319 fv2 fv1 fv0)) (g.18313 (r5.18324 r4.18323 r3.18322 r2.18321 r1.18320 j.18311 h.18312 rbp tmp-ra.18360 f.18314 e.18315 d.18316 c.18317 b.18318 a.18319 fv2 fv1)) (h.18312 (r6.18325 r5.18324 r4.18323 r3.18322 r2.18321 r1.18320 j.18311 rbp tmp-ra.18360 g.18313 f.18314 e.18315 d.18316 c.18317 b.18318 a.18319 fv2)) (j.18311 (r7.18326 r6.18325 r5.18324 r4.18323 r3.18322 r2.18321 r1.18320 rbp tmp-ra.18360 h.18312 g.18313 f.18314 e.18315 d.18316 c.18317 b.18318 a.18319)) (r1.18320 (rsi rbp tmp-ra.18360 j.18311 h.18312 g.18313 f.18314 e.18315 d.18316 c.18317)) (r2.18321 (rsi rbp tmp-ra.18360 j.18311 h.18312 g.18313 f.18314 e.18315 d.18316)) (r3.18322 (rsi rbp tmp-ra.18360 j.18311 h.18312 g.18313 f.18314 e.18315)) (r4.18323 (rsi rbp tmp-ra.18360 j.18311 h.18312 g.18313 f.18314)) (r5.18324 (rsi rbp tmp-ra.18360 j.18311 h.18312 g.18313)) (r6.18325 (rsi rbp tmp-ra.18360 j.18311 h.18312)) (r7.18326 (rsi rbp tmp-ra.18360 j.18311)) (rdi (r15 rbp rsi tmp-ra.18360)) (rsi (r7.18326 r6.18325 r5.18324 r4.18323 r3.18322 r2.18321 r1.18320 r15 rdi rbp a.18319 tmp-ra.18360)) (rdx (b.18318 a.18319 tmp-ra.18360)) (rcx (c.18317 b.18318 a.18319 tmp-ra.18360)) (r8 (d.18316 c.18317 b.18318 a.18319 tmp-ra.18360)) (r9 (e.18315 d.18316 c.18317 b.18318 a.18319 tmp-ra.18360)) (fv0 (f.18314 e.18315 d.18316 c.18317 b.18318 a.18319 tmp-ra.18360)) (fv1 (g.18313 f.18314 e.18315 d.18316 c.18317 b.18318 a.18319 tmp-ra.18360)) (fv2 (h.18312 g.18313 f.18314 e.18315 d.18316 c.18317 b.18318 a.18319 tmp-ra.18360)) (rbp (r7.18326 r6.18325 r5.18324 r4.18323 r3.18322 r2.18321 r1.18320 r15 rdi rsi j.18311 h.18312 g.18313 f.18314 e.18315 d.18316 c.18317 b.18318 a.18319 tmp-ra.18360)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.18360 fv3) (j.18311 fv0) (h.18312 fv1) (g.18313 fv4) (f.18314 fv5) (e.18315 fv6) (d.18316 fv7) (c.18317 fv8)))) (begin (set! tmp-ra.18360 r15) (set! a.18319 rdi) (set! b.18318 rsi) (set! c.18317 rdx) (set! d.18316 rcx) (set! e.18315 r8) (set! f.18314 r9) (set! g.18313 fv0) (set! h.18312 fv1) (set! j.18311 fv2) (begin (set! rbp (- rbp 72)) (return-point L.rp.2337 (begin (set! rsi b.18318) (set! rdi a.18319) (set! r15 L.rp.2337) (jump L.+.2335 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r1.18320 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2338 (begin (set! rsi c.18317) (set! rdi r1.18320) (set! r15 L.rp.2338) (jump L.+.2335 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r2.18321 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2339 (begin (set! rsi d.18316) (set! rdi r2.18321) (set! r15 L.rp.2339) (jump L.+.2335 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r3.18322 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2340 (begin (set! rsi e.18315) (set! rdi r3.18322) (set! r15 L.rp.2340) (jump L.+.2335 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r4.18323 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2341 (begin (set! rsi f.18314) (set! rdi r4.18323) (set! r15 L.rp.2341) (jump L.+.2335 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r5.18324 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2342 (begin (set! rsi g.18313) (set! rdi r5.18324) (set! r15 L.rp.2342) (jump L.+.2335 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r6.18325 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2343 (begin (set! rsi h.18312) (set! rdi r6.18325) (set! r15 L.rp.2343) (jump L.+.2335 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r7.18326 rax) (set! rsi j.18311) (set! rdi r7.18326) (set! r15 tmp-ra.18360) (jump L.+.2335 rbp r15 rdi rsi))) (begin (set! tmp-ra.18361 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.18361) (jump L.F.2332 rbp r15 rdi rsi rdx rcx r8 r9 fv0))) (module ((locals (tmp-ra.18394)) (undead-out ((tmp-ra.18394 rbp) (tmp-ra.18394 rsi rbp) (tmp-ra.18394 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18394 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.18394)) (rsi (r15 rdi rbp tmp-ra.18394)) (rdi (r15 rbp rsi tmp-ra.18394)) (r15 (rbp rdi rsi)))) (assignment ())) (define L.<.2345 ((locals (tmp.18389 tmp.18370 tmp.18390 tmp-ra.18392 tmp.18388 tmp.18371 tmp.18387)) (undead-out ((rdi rsi tmp-ra.18392 rbp) (rsi tmp.18370 tmp-ra.18392 rbp) (tmp.18371 tmp.18370 tmp-ra.18392 rbp) ((((((tmp.18388 tmp.18371 tmp.18370 tmp-ra.18392 rbp) (tmp.18388 tmp.18371 tmp.18370 tmp-ra.18392 rbp)) (tmp.18371 tmp.18370 tmp-ra.18392 rbp)) (tmp.18387 tmp.18371 tmp.18370 tmp-ra.18392 rbp) (tmp.18387 tmp.18371 tmp.18370 tmp-ra.18392 rbp)) (tmp.18371 tmp.18370 tmp-ra.18392 rbp)) ((((((tmp.18390 tmp.18371 tmp.18370 tmp-ra.18392 rbp) (tmp.18390 tmp.18371 tmp.18370 tmp-ra.18392 rbp)) (tmp.18371 tmp.18370 tmp-ra.18392 rbp)) (tmp.18389 tmp.18371 tmp.18370 tmp-ra.18392 rbp) (tmp.18389 tmp.18371 tmp.18370 tmp-ra.18392 rbp)) (tmp.18371 tmp.18370 tmp-ra.18392 rbp)) ((tmp-ra.18392 rbp) ((tmp-ra.18392 rax rbp) (rax rbp)) ((tmp-ra.18392 rax rbp) (rax rbp))) ((tmp-ra.18392 rax rbp) (rax rbp))) ((tmp-ra.18392 rax rbp) (rax rbp))))) (conflicts ((tmp.18387 (rbp tmp-ra.18392 tmp.18370 tmp.18371)) (tmp.18371 (rbp tmp-ra.18392 tmp.18370 tmp.18388 tmp.18387 tmp.18390 tmp.18389)) (tmp.18388 (rbp tmp-ra.18392 tmp.18370 tmp.18371)) (tmp-ra.18392 (tmp.18371 tmp.18370 rbp rsi rdi tmp.18388 tmp.18387 tmp.18390 tmp.18389 rax)) (tmp.18390 (rbp tmp-ra.18392 tmp.18370 tmp.18371)) (tmp.18370 (tmp.18371 rbp tmp-ra.18392 rsi tmp.18388 tmp.18387 tmp.18390 tmp.18389)) (tmp.18389 (rbp tmp-ra.18392 tmp.18370 tmp.18371)) (rax (rbp tmp-ra.18392)) (rbp (tmp.18371 tmp.18370 tmp-ra.18392 tmp.18388 tmp.18387 tmp.18390 tmp.18389 rax)) (rdi (tmp-ra.18392)) (rsi (tmp.18370 tmp-ra.18392)))) (assignment ())) (begin (set! tmp-ra.18392 r15) (set! tmp.18370 rdi) (set! tmp.18371 rsi) (if (begin (if (begin (begin (set! tmp.18388 tmp.18371) (set! tmp.18388 (bitwise-and tmp.18388 7))) (= tmp.18388 0)) (set! tmp.18387 14) (set! tmp.18387 6)) (!= tmp.18387 6)) (if (begin (if (begin (begin (set! tmp.18390 tmp.18370) (set! tmp.18390 (bitwise-and tmp.18390 7))) (= tmp.18390 0)) (set! tmp.18389 14) (set! tmp.18389 6)) (!= tmp.18389 6)) (if (< tmp.18370 tmp.18371) (begin (set! rax 14) (jump tmp-ra.18392 rbp rax)) (begin (set! rax 6) (jump tmp-ra.18392 rbp rax))) (begin (set! rax 830) (jump tmp-ra.18392 rbp rax))) (begin (set! rax 830) (jump tmp-ra.18392 rbp rax))))) (define L.swap.2344 ((locals (tmp.18391)) (undead-out ((rdi rsi tmp-ra.18393 rbp) (rsi x.18363 tmp-ra.18393 rbp) (y.18362 x.18363 tmp-ra.18393 rbp) (((((rax y.18362 x.18363 tmp-ra.18393 rbp) ((y.18362 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18391 y.18362 x.18363 tmp-ra.18393 rbp)) (y.18362 x.18363 tmp-ra.18393 rbp)) ((tmp-ra.18393 rax rbp) (rax rbp)) ((y.18362 tmp-ra.18393 rsi rbp) (tmp-ra.18393 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.18391 (rbp tmp-ra.18393 x.18363 y.18362)) (y.18362 (rbp tmp-ra.18393 x.18363 tmp.18391 rsi)) (x.18363 (y.18362 rbp tmp-ra.18393 rsi tmp.18391)) (tmp-ra.18393 (y.18362 x.18363 rbp tmp.18391 rax rdi rsi)) (rsi (x.18363 r15 rdi rbp tmp-ra.18393 y.18362)) (rbp (y.18362 x.18363 tmp-ra.18393 tmp.18391 rax r15 rdi rsi)) (rdi (r15 rbp rsi tmp-ra.18393)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.18393)))) (assignment ((tmp-ra.18393 fv0) (x.18363 fv1) (y.18362 fv2)))) (begin (set! tmp-ra.18393 r15) (set! x.18363 rdi) (set! y.18362 rsi) (if (begin (begin (begin (set! rbp (- rbp 24)) (return-point L.rp.2346 (begin (set! rsi x.18363) (set! rdi y.18362) (set! r15 L.rp.2346) (jump L.<.2345 rbp r15 rdi rsi))) (set! rbp (+ rbp 24))) (set! tmp.18391 rax)) (!= tmp.18391 6)) (begin (set! rax x.18363) (jump tmp-ra.18393 rbp rax)) (begin (set! rsi x.18363) (set! rdi y.18362) (set! r15 tmp-ra.18393) (jump L.swap.2344 rbp r15 rdi rsi))))) (begin (set! tmp-ra.18394 r15) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.18394) (jump L.swap.2344 rbp r15 rdi rsi))) (module ((locals (tmp-ra.18435)) (undead-out ((tmp-ra.18435 rbp) (tmp-ra.18435 rsi rbp) (tmp-ra.18435 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18435 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.18435)) (rsi (r15 rdi rbp tmp-ra.18435)) (rdi (r15 rbp rsi tmp-ra.18435)) (r15 (rbp rdi rsi)))) (assignment ())) (define L.*.2349 ((locals (tmp.18422 tmp.18397 tmp.18423 tmp.18424 tmp-ra.18432 tmp.18421 tmp.18398 tmp.18420)) (undead-out ((rdi rsi tmp-ra.18432 rbp) (rsi tmp.18397 tmp-ra.18432 rbp) (tmp.18398 tmp.18397 tmp-ra.18432 rbp) ((((((tmp.18421 tmp.18398 tmp.18397 tmp-ra.18432 rbp) (tmp.18421 tmp.18398 tmp.18397 tmp-ra.18432 rbp)) (tmp.18398 tmp.18397 tmp-ra.18432 rbp)) (tmp.18420 tmp.18398 tmp.18397 tmp-ra.18432 rbp) (tmp.18420 tmp.18398 tmp.18397 tmp-ra.18432 rbp)) (tmp.18398 tmp.18397 tmp-ra.18432 rbp)) ((((((tmp.18423 tmp.18398 tmp.18397 tmp-ra.18432 rbp) (tmp.18423 tmp.18398 tmp.18397 tmp-ra.18432 rbp)) (tmp.18398 tmp.18397 tmp-ra.18432 rbp)) (tmp.18422 tmp.18398 tmp.18397 tmp-ra.18432 rbp) (tmp.18422 tmp.18398 tmp.18397 tmp-ra.18432 rbp)) (tmp.18398 tmp.18397 tmp-ra.18432 rbp)) ((tmp.18424 tmp.18397 tmp-ra.18432 rbp) (tmp.18397 tmp.18424 tmp-ra.18432 rbp) (tmp.18424 rax tmp-ra.18432 rbp) (tmp-ra.18432 rax rbp) (rax rbp)) ((tmp-ra.18432 rax rbp) (rax rbp))) ((tmp-ra.18432 rax rbp) (rax rbp))))) (conflicts ((tmp.18420 (rbp tmp-ra.18432 tmp.18397 tmp.18398)) (tmp.18398 (rbp tmp-ra.18432 tmp.18397 tmp.18421 tmp.18420 tmp.18423 tmp.18422)) (tmp.18421 (rbp tmp-ra.18432 tmp.18397 tmp.18398)) (tmp-ra.18432 (tmp.18398 tmp.18397 rbp rsi rdi tmp.18421 tmp.18420 tmp.18423 tmp.18422 tmp.18424 rax)) (tmp.18424 (rax rbp tmp-ra.18432 tmp.18397)) (tmp.18423 (rbp tmp-ra.18432 tmp.18397 tmp.18398)) (tmp.18397 (tmp.18398 rbp tmp-ra.18432 rsi tmp.18421 tmp.18420 tmp.18423 tmp.18422 tmp.18424)) (tmp.18422 (rbp tmp-ra.18432 tmp.18397 tmp.18398)) (rax (tmp.18424 rbp tmp-ra.18432)) (rbp (tmp.18398 tmp.18397 tmp-ra.18432 tmp.18421 tmp.18420 tmp.18423 tmp.18422 tmp.18424 rax)) (rdi (tmp-ra.18432)) (rsi (tmp.18397 tmp-ra.18432)))) (assignment ())) (begin (set! tmp-ra.18432 r15) (set! tmp.18397 rdi) (set! tmp.18398 rsi) (if (begin (if (begin (begin (set! tmp.18421 tmp.18398) (set! tmp.18421 (bitwise-and tmp.18421 7))) (= tmp.18421 0)) (set! tmp.18420 14) (set! tmp.18420 6)) (!= tmp.18420 6)) (if (begin (if (begin (begin (set! tmp.18423 tmp.18397) (set! tmp.18423 (bitwise-and tmp.18423 7))) (= tmp.18423 0)) (set! tmp.18422 14) (set! tmp.18422 6)) (!= tmp.18422 6)) (begin (set! tmp.18424 tmp.18398) (set! tmp.18424 (arithmetic-shift-right tmp.18424 3)) (set! rax tmp.18397) (set! rax (* rax tmp.18424)) (jump tmp-ra.18432 rbp rax)) (begin (set! rax 62) (jump tmp-ra.18432 rbp rax))) (begin (set! rax 62) (jump tmp-ra.18432 rbp rax))))) (define L.-.2348 ((locals (tmp.18427 tmp.18401 tmp.18428 tmp-ra.18433 tmp.18426 tmp.18402 tmp.18425)) (undead-out ((rdi rsi tmp-ra.18433 rbp) (rsi tmp.18401 tmp-ra.18433 rbp) (tmp.18401 tmp.18402 tmp-ra.18433 rbp) ((((((tmp.18426 tmp.18401 tmp.18402 tmp-ra.18433 rbp) (tmp.18426 tmp.18401 tmp.18402 tmp-ra.18433 rbp)) (tmp.18401 tmp.18402 tmp-ra.18433 rbp)) (tmp.18425 tmp.18401 tmp.18402 tmp-ra.18433 rbp) (tmp.18425 tmp.18401 tmp.18402 tmp-ra.18433 rbp)) (tmp.18401 tmp.18402 tmp-ra.18433 rbp)) ((((((tmp.18428 tmp.18401 tmp.18402 tmp-ra.18433 rbp) (tmp.18428 tmp.18401 tmp.18402 tmp-ra.18433 rbp)) (tmp.18401 tmp.18402 tmp-ra.18433 rbp)) (tmp.18427 tmp.18401 tmp.18402 tmp-ra.18433 rbp) (tmp.18427 tmp.18401 tmp.18402 tmp-ra.18433 rbp)) (tmp.18401 tmp.18402 tmp-ra.18433 rbp)) ((tmp.18402 rax tmp-ra.18433 rbp) (tmp-ra.18433 rax rbp) (rax rbp)) ((tmp-ra.18433 rax rbp) (rax rbp))) ((tmp-ra.18433 rax rbp) (rax rbp))))) (conflicts ((tmp.18425 (rbp tmp-ra.18433 tmp.18402 tmp.18401)) (tmp.18402 (rbp tmp-ra.18433 tmp.18401 tmp.18426 tmp.18425 tmp.18428 tmp.18427 rax)) (tmp.18426 (rbp tmp-ra.18433 tmp.18402 tmp.18401)) (tmp-ra.18433 (tmp.18402 tmp.18401 rbp rsi rdi tmp.18426 tmp.18425 tmp.18428 tmp.18427 rax)) (tmp.18428 (rbp tmp-ra.18433 tmp.18402 tmp.18401)) (tmp.18401 (tmp.18402 rbp tmp-ra.18433 rsi tmp.18426 tmp.18425 tmp.18428 tmp.18427)) (tmp.18427 (rbp tmp-ra.18433 tmp.18402 tmp.18401)) (rax (tmp.18402 rbp tmp-ra.18433)) (rbp (tmp.18402 tmp.18401 tmp-ra.18433 tmp.18426 tmp.18425 tmp.18428 tmp.18427 rax)) (rdi (tmp-ra.18433)) (rsi (tmp.18401 tmp-ra.18433)))) (assignment ())) (begin (set! tmp-ra.18433 r15) (set! tmp.18401 rdi) (set! tmp.18402 rsi) (if (begin (if (begin (begin (set! tmp.18426 tmp.18402) (set! tmp.18426 (bitwise-and tmp.18426 7))) (= tmp.18426 0)) (set! tmp.18425 14) (set! tmp.18425 6)) (!= tmp.18425 6)) (if (begin (if (begin (begin (set! tmp.18428 tmp.18401) (set! tmp.18428 (bitwise-and tmp.18428 7))) (= tmp.18428 0)) (set! tmp.18427 14) (set! tmp.18427 6)) (!= tmp.18427 6)) (begin (set! rax tmp.18401) (set! rax (- rax tmp.18402)) (jump tmp-ra.18433 rbp rax)) (begin (set! rax 574) (jump tmp-ra.18433 rbp rax))) (begin (set! rax 574) (jump tmp-ra.18433 rbp rax))))) (define L.fact_loop.2347 ((locals (tmp.18431 tmp.18429)) (undead-out ((rdi rsi tmp-ra.18434 rbp) (rsi n.18396 tmp-ra.18434 rbp) (n.18396 acc.18395 tmp-ra.18434 rbp) ((((n.18396 acc.18395 tmp-ra.18434 rbp) (tmp.18429 n.18396 acc.18395 tmp-ra.18434 rbp) (tmp.18429 n.18396 acc.18395 tmp-ra.18434 rbp)) (n.18396 acc.18395 tmp-ra.18434 rbp)) ((tmp-ra.18434 rax rbp) (rax rbp)) (((rax acc.18395 n.18396 tmp-ra.18434 rbp) ((n.18396 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc.18395 n.18396 tmp.18430 tmp-ra.18434 rbp) ((rax tmp.18430 tmp-ra.18434 rbp) ((acc.18395 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18431 tmp.18430 tmp-ra.18434 rbp) (tmp.18430 tmp-ra.18434 rsi rbp) (tmp-ra.18434 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.18429 (rbp tmp-ra.18434 acc.18395 n.18396)) (n.18396 (acc.18395 rbp tmp-ra.18434 tmp.18429 tmp.18430 rsi)) (acc.18395 (rbp tmp-ra.18434 n.18396 tmp.18429 rsi tmp.18430)) (tmp-ra.18434 (acc.18395 n.18396 rbp tmp.18429 rax rdi rsi tmp.18431 tmp.18430)) (tmp.18431 (rbp tmp-ra.18434 tmp.18430)) (tmp.18430 (rsi tmp.18431 rbp tmp-ra.18434 n.18396 acc.18395)) (rsi (tmp-ra.18434 tmp.18430 acc.18395 r15 rdi rbp n.18396)) (rbp (acc.18395 n.18396 tmp-ra.18434 tmp.18429 rax tmp.18431 tmp.18430 r15 rdi rsi)) (rdi (tmp-ra.18434 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.18434)))) (assignment ((tmp-ra.18434 fv0) (n.18396 fv1) (acc.18395 fv2) (tmp.18430 fv3)))) (begin (set! tmp-ra.18434 r15) (set! n.18396 rdi) (set! acc.18395 rsi) (if (begin (if (= n.18396 0) (set! tmp.18429 14) (set! tmp.18429 6)) (!= tmp.18429 6)) (begin (set! rax acc.18395) (jump tmp-ra.18434 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2350 (begin (set! rsi 8) (set! rdi n.18396) (set! r15 L.rp.2350) (jump L.-.2348 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! tmp.18430 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2351 (begin (set! rsi n.18396) (set! rdi acc.18395) (set! r15 L.rp.2351) (jump L.*.2349 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! tmp.18431 rax) (set! rsi tmp.18431) (set! rdi tmp.18430) (set! r15 tmp-ra.18434) (jump L.fact_loop.2347 rbp r15 rdi rsi))))) (begin (set! tmp-ra.18435 r15) (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.18435) (jump L.fact_loop.2347 rbp r15 rdi rsi))) (module ((locals (tmp-ra.18475)) (undead-out ((tmp-ra.18475 rbp) (tmp-ra.18475 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.18475 (rdi rbp)) (rbp (r15 rdi tmp-ra.18475)) (rdi (r15 rbp tmp-ra.18475)) (r15 (rbp rdi)))) (assignment ())) (define L.*.2354 ((locals (tmp.18462 tmp.18437 tmp.18463 tmp.18464 tmp-ra.18472 tmp.18461 tmp.18438 tmp.18460)) (undead-out ((rdi rsi tmp-ra.18472 rbp) (rsi tmp.18437 tmp-ra.18472 rbp) (tmp.18438 tmp.18437 tmp-ra.18472 rbp) ((((((tmp.18461 tmp.18438 tmp.18437 tmp-ra.18472 rbp) (tmp.18461 tmp.18438 tmp.18437 tmp-ra.18472 rbp)) (tmp.18438 tmp.18437 tmp-ra.18472 rbp)) (tmp.18460 tmp.18438 tmp.18437 tmp-ra.18472 rbp) (tmp.18460 tmp.18438 tmp.18437 tmp-ra.18472 rbp)) (tmp.18438 tmp.18437 tmp-ra.18472 rbp)) ((((((tmp.18463 tmp.18438 tmp.18437 tmp-ra.18472 rbp) (tmp.18463 tmp.18438 tmp.18437 tmp-ra.18472 rbp)) (tmp.18438 tmp.18437 tmp-ra.18472 rbp)) (tmp.18462 tmp.18438 tmp.18437 tmp-ra.18472 rbp) (tmp.18462 tmp.18438 tmp.18437 tmp-ra.18472 rbp)) (tmp.18438 tmp.18437 tmp-ra.18472 rbp)) ((tmp.18464 tmp.18437 tmp-ra.18472 rbp) (tmp.18437 tmp.18464 tmp-ra.18472 rbp) (tmp.18464 rax tmp-ra.18472 rbp) (tmp-ra.18472 rax rbp) (rax rbp)) ((tmp-ra.18472 rax rbp) (rax rbp))) ((tmp-ra.18472 rax rbp) (rax rbp))))) (conflicts ((tmp.18460 (rbp tmp-ra.18472 tmp.18437 tmp.18438)) (tmp.18438 (rbp tmp-ra.18472 tmp.18437 tmp.18461 tmp.18460 tmp.18463 tmp.18462)) (tmp.18461 (rbp tmp-ra.18472 tmp.18437 tmp.18438)) (tmp-ra.18472 (tmp.18438 tmp.18437 rbp rsi rdi tmp.18461 tmp.18460 tmp.18463 tmp.18462 tmp.18464 rax)) (tmp.18464 (rax rbp tmp-ra.18472 tmp.18437)) (tmp.18463 (rbp tmp-ra.18472 tmp.18437 tmp.18438)) (tmp.18437 (tmp.18438 rbp tmp-ra.18472 rsi tmp.18461 tmp.18460 tmp.18463 tmp.18462 tmp.18464)) (tmp.18462 (rbp tmp-ra.18472 tmp.18437 tmp.18438)) (rax (tmp.18464 rbp tmp-ra.18472)) (rbp (tmp.18438 tmp.18437 tmp-ra.18472 tmp.18461 tmp.18460 tmp.18463 tmp.18462 tmp.18464 rax)) (rdi (tmp-ra.18472)) (rsi (tmp.18437 tmp-ra.18472)))) (assignment ())) (begin (set! tmp-ra.18472 r15) (set! tmp.18437 rdi) (set! tmp.18438 rsi) (if (begin (if (begin (begin (set! tmp.18461 tmp.18438) (set! tmp.18461 (bitwise-and tmp.18461 7))) (= tmp.18461 0)) (set! tmp.18460 14) (set! tmp.18460 6)) (!= tmp.18460 6)) (if (begin (if (begin (begin (set! tmp.18463 tmp.18437) (set! tmp.18463 (bitwise-and tmp.18463 7))) (= tmp.18463 0)) (set! tmp.18462 14) (set! tmp.18462 6)) (!= tmp.18462 6)) (begin (set! tmp.18464 tmp.18438) (set! tmp.18464 (arithmetic-shift-right tmp.18464 3)) (set! rax tmp.18437) (set! rax (* rax tmp.18464)) (jump tmp-ra.18472 rbp rax)) (begin (set! rax 62) (jump tmp-ra.18472 rbp rax))) (begin (set! rax 62) (jump tmp-ra.18472 rbp rax))))) (define L.-.2353 ((locals (tmp.18467 tmp.18441 tmp.18468 tmp-ra.18473 tmp.18466 tmp.18442 tmp.18465)) (undead-out ((rdi rsi tmp-ra.18473 rbp) (rsi tmp.18441 tmp-ra.18473 rbp) (tmp.18441 tmp.18442 tmp-ra.18473 rbp) ((((((tmp.18466 tmp.18441 tmp.18442 tmp-ra.18473 rbp) (tmp.18466 tmp.18441 tmp.18442 tmp-ra.18473 rbp)) (tmp.18441 tmp.18442 tmp-ra.18473 rbp)) (tmp.18465 tmp.18441 tmp.18442 tmp-ra.18473 rbp) (tmp.18465 tmp.18441 tmp.18442 tmp-ra.18473 rbp)) (tmp.18441 tmp.18442 tmp-ra.18473 rbp)) ((((((tmp.18468 tmp.18441 tmp.18442 tmp-ra.18473 rbp) (tmp.18468 tmp.18441 tmp.18442 tmp-ra.18473 rbp)) (tmp.18441 tmp.18442 tmp-ra.18473 rbp)) (tmp.18467 tmp.18441 tmp.18442 tmp-ra.18473 rbp) (tmp.18467 tmp.18441 tmp.18442 tmp-ra.18473 rbp)) (tmp.18441 tmp.18442 tmp-ra.18473 rbp)) ((tmp.18442 rax tmp-ra.18473 rbp) (tmp-ra.18473 rax rbp) (rax rbp)) ((tmp-ra.18473 rax rbp) (rax rbp))) ((tmp-ra.18473 rax rbp) (rax rbp))))) (conflicts ((tmp.18465 (rbp tmp-ra.18473 tmp.18442 tmp.18441)) (tmp.18442 (rbp tmp-ra.18473 tmp.18441 tmp.18466 tmp.18465 tmp.18468 tmp.18467 rax)) (tmp.18466 (rbp tmp-ra.18473 tmp.18442 tmp.18441)) (tmp-ra.18473 (tmp.18442 tmp.18441 rbp rsi rdi tmp.18466 tmp.18465 tmp.18468 tmp.18467 rax)) (tmp.18468 (rbp tmp-ra.18473 tmp.18442 tmp.18441)) (tmp.18441 (tmp.18442 rbp tmp-ra.18473 rsi tmp.18466 tmp.18465 tmp.18468 tmp.18467)) (tmp.18467 (rbp tmp-ra.18473 tmp.18442 tmp.18441)) (rax (tmp.18442 rbp tmp-ra.18473)) (rbp (tmp.18442 tmp.18441 tmp-ra.18473 tmp.18466 tmp.18465 tmp.18468 tmp.18467 rax)) (rdi (tmp-ra.18473)) (rsi (tmp.18441 tmp-ra.18473)))) (assignment ())) (begin (set! tmp-ra.18473 r15) (set! tmp.18441 rdi) (set! tmp.18442 rsi) (if (begin (if (begin (begin (set! tmp.18466 tmp.18442) (set! tmp.18466 (bitwise-and tmp.18466 7))) (= tmp.18466 0)) (set! tmp.18465 14) (set! tmp.18465 6)) (!= tmp.18465 6)) (if (begin (if (begin (begin (set! tmp.18468 tmp.18441) (set! tmp.18468 (bitwise-and tmp.18468 7))) (= tmp.18468 0)) (set! tmp.18467 14) (set! tmp.18467 6)) (!= tmp.18467 6)) (begin (set! rax tmp.18441) (set! rax (- rax tmp.18442)) (jump tmp-ra.18473 rbp rax)) (begin (set! rax 574) (jump tmp-ra.18473 rbp rax))) (begin (set! rax 574) (jump tmp-ra.18473 rbp rax))))) (define L.fact.2352 ((locals (tmp.18471 tmp.18470 tmp.18469)) (undead-out ((rdi tmp-ra.18474 rbp) (x.18436 tmp-ra.18474 rbp) ((((x.18436 tmp-ra.18474 rbp) (tmp.18469 x.18436 tmp-ra.18474 rbp) (tmp.18469 x.18436 tmp-ra.18474 rbp)) (x.18436 tmp-ra.18474 rbp)) ((tmp-ra.18474 rax rbp) (rax rbp)) (((rax x.18436 tmp-ra.18474 rbp) ((x.18436 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18471 x.18436 tmp-ra.18474 rbp) ((rax x.18436 tmp-ra.18474 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (tmp.18470 x.18436 tmp-ra.18474 rbp) (x.18436 tmp-ra.18474 rsi rbp) (tmp-ra.18474 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.18469 (rbp tmp-ra.18474 x.18436)) (x.18436 (rbp tmp-ra.18474 tmp.18469 tmp.18470 tmp.18471 rsi)) (tmp-ra.18474 (x.18436 rbp tmp.18469 rax rdi rsi tmp.18470 tmp.18471)) (tmp.18470 (rbp tmp-ra.18474 x.18436)) (tmp.18471 (rbp tmp-ra.18474 x.18436)) (rsi (tmp-ra.18474 r15 rdi rbp x.18436)) (rbp (x.18436 tmp-ra.18474 tmp.18469 rax tmp.18470 tmp.18471 r15 rdi rsi)) (rdi (tmp-ra.18474 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.18474)))) (assignment ((tmp-ra.18474 fv0) (x.18436 fv1)))) (begin (set! tmp-ra.18474 r15) (set! x.18436 rdi) (if (begin (if (= x.18436 0) (set! tmp.18469 14) (set! tmp.18469 6)) (!= tmp.18469 6)) (begin (set! rax 8) (jump tmp-ra.18474 rbp rax)) (begin (begin (set! rbp (- rbp 16)) (return-point L.rp.2355 (begin (set! rsi 8) (set! rdi x.18436) (set! r15 L.rp.2355) (jump L.-.2353 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.18471 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2356 (begin (set! rdi tmp.18471) (set! r15 L.rp.2356) (jump L.fact.2352 rbp r15 rdi))) (set! rbp (+ rbp 16))) (set! tmp.18470 rax) (set! rsi tmp.18470) (set! rdi x.18436) (set! r15 tmp-ra.18474) (jump L.*.2354 rbp r15 rdi rsi))))) (begin (set! tmp-ra.18475 r15) (set! rdi 40) (set! r15 tmp-ra.18475) (jump L.fact.2352 rbp r15 rdi))) (module ((locals (tmp-ra.18512)) (undead-out ((tmp-ra.18512 rbp) (tmp-ra.18512 rdx rbp) (tmp-ra.18512 rdx rsi rbp) (tmp-ra.18512 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.18512 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.18512)) (rdx (r15 rdi rsi rbp tmp-ra.18512)) (rsi (r15 rdi rbp rdx tmp-ra.18512)) (rdi (r15 rbp rsi rdx tmp-ra.18512)) (r15 (rbp rdi rsi rdx)))) (assignment ())) (define L.+.2358 ((locals (tmp.18506 tmp.18483 tmp.18507 tmp-ra.18510 tmp.18505 tmp.18484 tmp.18504)) (undead-out ((rdi rsi tmp-ra.18510 rbp) (rsi tmp.18483 tmp-ra.18510 rbp) (tmp.18483 tmp.18484 tmp-ra.18510 rbp) ((((((tmp.18505 tmp.18483 tmp.18484 tmp-ra.18510 rbp) (tmp.18505 tmp.18483 tmp.18484 tmp-ra.18510 rbp)) (tmp.18483 tmp.18484 tmp-ra.18510 rbp)) (tmp.18504 tmp.18483 tmp.18484 tmp-ra.18510 rbp) (tmp.18504 tmp.18483 tmp.18484 tmp-ra.18510 rbp)) (tmp.18483 tmp.18484 tmp-ra.18510 rbp)) ((((((tmp.18507 tmp.18483 tmp.18484 tmp-ra.18510 rbp) (tmp.18507 tmp.18483 tmp.18484 tmp-ra.18510 rbp)) (tmp.18483 tmp.18484 tmp-ra.18510 rbp)) (tmp.18506 tmp.18483 tmp.18484 tmp-ra.18510 rbp) (tmp.18506 tmp.18483 tmp.18484 tmp-ra.18510 rbp)) (tmp.18483 tmp.18484 tmp-ra.18510 rbp)) ((tmp.18484 rax tmp-ra.18510 rbp) (tmp-ra.18510 rax rbp) (rax rbp)) ((tmp-ra.18510 rax rbp) (rax rbp))) ((tmp-ra.18510 rax rbp) (rax rbp))))) (conflicts ((tmp.18504 (rbp tmp-ra.18510 tmp.18484 tmp.18483)) (tmp.18484 (rbp tmp-ra.18510 tmp.18483 tmp.18505 tmp.18504 tmp.18507 tmp.18506 rax)) (tmp.18505 (rbp tmp-ra.18510 tmp.18484 tmp.18483)) (tmp-ra.18510 (tmp.18484 tmp.18483 rbp rsi rdi tmp.18505 tmp.18504 tmp.18507 tmp.18506 rax)) (tmp.18507 (rbp tmp-ra.18510 tmp.18484 tmp.18483)) (tmp.18483 (tmp.18484 rbp tmp-ra.18510 rsi tmp.18505 tmp.18504 tmp.18507 tmp.18506)) (tmp.18506 (rbp tmp-ra.18510 tmp.18484 tmp.18483)) (rax (tmp.18484 rbp tmp-ra.18510)) (rbp (tmp.18484 tmp.18483 tmp-ra.18510 tmp.18505 tmp.18504 tmp.18507 tmp.18506 rax)) (rdi (tmp-ra.18510)) (rsi (tmp.18483 tmp-ra.18510)))) (assignment ())) (begin (set! tmp-ra.18510 r15) (set! tmp.18483 rdi) (set! tmp.18484 rsi) (if (begin (if (begin (begin (set! tmp.18505 tmp.18484) (set! tmp.18505 (bitwise-and tmp.18505 7))) (= tmp.18505 0)) (set! tmp.18504 14) (set! tmp.18504 6)) (!= tmp.18504 6)) (if (begin (if (begin (begin (set! tmp.18507 tmp.18483) (set! tmp.18507 (bitwise-and tmp.18507 7))) (= tmp.18507 0)) (set! tmp.18506 14) (set! tmp.18506 6)) (!= tmp.18506 6)) (begin (set! rax tmp.18483) (set! rax (+ rax tmp.18484)) (jump tmp-ra.18510 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18510 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18510 rbp rax))))) (define L.fib_loop.2357 ((locals (tmp.18509 new-acc2.18480 n.18478 tmp.18508)) (undead-out ((rdi rsi rdx tmp-ra.18511 rbp) (rsi rdx n.18478 tmp-ra.18511 rbp) (rdx n.18478 acc1.18477 tmp-ra.18511 rbp) (acc2.18476 n.18478 acc1.18477 tmp-ra.18511 rbp) ((((acc2.18476 n.18478 acc1.18477 tmp-ra.18511 rbp) (tmp.18508 acc2.18476 n.18478 acc1.18477 tmp-ra.18511 rbp) (tmp.18508 acc2.18476 n.18478 acc1.18477 tmp-ra.18511 rbp)) (acc2.18476 n.18478 acc1.18477 tmp-ra.18511 rbp)) ((tmp-ra.18511 rax rbp) (rax rbp)) ((((acc1.18477 n.18478 acc2.18476 tmp-ra.18511 rbp) (tmp.18509 acc1.18477 n.18478 acc2.18476 tmp-ra.18511 rbp) (tmp.18509 acc1.18477 n.18478 acc2.18476 tmp-ra.18511 rbp)) (acc1.18477 n.18478 acc2.18476 tmp-ra.18511 rbp)) ((tmp-ra.18511 rax rbp) (rax rbp)) (((rax acc1.18477 acc2.18476 tmp-ra.18511 rbp) ((n.18478 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.18477 acc2.18476 new-n.18479 tmp-ra.18511 rbp) ((rax acc2.18476 new-n.18479 tmp-ra.18511 rbp) ((acc1.18477 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.18480 acc2.18476 new-n.18479 tmp-ra.18511 rbp) (acc2.18476 new-n.18479 tmp-ra.18511 rdx rbp) (new-n.18479 tmp-ra.18511 rdx rsi rbp) (tmp-ra.18511 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (conflicts ((tmp.18508 (rbp tmp-ra.18511 acc1.18477 n.18478 acc2.18476)) (n.18478 (acc2.18476 acc1.18477 rbp tmp-ra.18511 rdx tmp.18508 tmp.18509 rsi)) (acc1.18477 (acc2.18476 rbp tmp-ra.18511 n.18478 rdx tmp.18508 tmp.18509 rsi new-n.18479)) (tmp-ra.18511 (acc2.18476 acc1.18477 n.18478 rbp tmp.18508 tmp.18509 rax rdi rsi rdx new-acc2.18480 new-n.18479)) (new-n.18479 (rsi rdx new-acc2.18480 rbp tmp-ra.18511 acc2.18476 acc1.18477)) (new-acc2.18480 (rbp tmp-ra.18511 new-n.18479 acc2.18476)) (acc2.18476 (rbp tmp-ra.18511 acc1.18477 n.18478 tmp.18508 tmp.18509 rdx new-acc2.18480 new-n.18479)) (tmp.18509 (rbp tmp-ra.18511 acc2.18476 n.18478 acc1.18477)) (rsi (rdx tmp-ra.18511 new-n.18479 acc1.18477 r15 rdi rbp n.18478)) (rbp (acc2.18476 acc1.18477 n.18478 tmp-ra.18511 tmp.18508 tmp.18509 rax rdx new-acc2.18480 new-n.18479 r15 rdi rsi)) (rdi (rdx tmp-ra.18511 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.18477 n.18478 r15 rdi rsi rbp tmp-ra.18511 new-n.18479 acc2.18476)) (rax (rbp tmp-ra.18511)))) (assignment ((tmp-ra.18511 fv0) (acc2.18476 fv1) (acc1.18477 fv2) (new-n.18479 fv3)))) (begin (set! tmp-ra.18511 r15) (set! n.18478 rdi) (set! acc1.18477 rsi) (set! acc2.18476 rdx) (if (begin (if (= n.18478 0) (set! tmp.18508 14) (set! tmp.18508 6)) (!= tmp.18508 6)) (begin (set! rax acc1.18477) (jump tmp-ra.18511 rbp rax)) (if (begin (if (= n.18478 8) (set! tmp.18509 14) (set! tmp.18509 6)) (!= tmp.18509 6)) (begin (set! rax acc2.18476) (jump tmp-ra.18511 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2359 (begin (set! rsi -8) (set! rdi n.18478) (set! r15 L.rp.2359) (jump L.+.2358 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-n.18479 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2360 (begin (set! rsi acc2.18476) (set! rdi acc1.18477) (set! r15 L.rp.2360) (jump L.+.2358 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-acc2.18480 rax) (set! rdx new-acc2.18480) (set! rsi acc2.18476) (set! rdi new-n.18479) (set! r15 tmp-ra.18511) (jump L.fib_loop.2357 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.18512 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.18512) (jump L.fib_loop.2357 rbp r15 rdi rsi rdx))) (module ((locals (tmp-ra.18549)) (undead-out ((tmp-ra.18549 rbp) (tmp-ra.18549 rdx rbp) (tmp-ra.18549 rdx rsi rbp) (tmp-ra.18549 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.18549 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.18549)) (rdx (r15 rdi rsi rbp tmp-ra.18549)) (rsi (r15 rdi rbp rdx tmp-ra.18549)) (rdi (r15 rbp rsi rdx tmp-ra.18549)) (r15 (rbp rdi rsi rdx)))) (assignment ())) (define L.+.2362 ((locals (tmp.18543 tmp.18520 tmp.18544 tmp-ra.18547 tmp.18542 tmp.18521 tmp.18541)) (undead-out ((rdi rsi tmp-ra.18547 rbp) (rsi tmp.18520 tmp-ra.18547 rbp) (tmp.18520 tmp.18521 tmp-ra.18547 rbp) ((((((tmp.18542 tmp.18520 tmp.18521 tmp-ra.18547 rbp) (tmp.18542 tmp.18520 tmp.18521 tmp-ra.18547 rbp)) (tmp.18520 tmp.18521 tmp-ra.18547 rbp)) (tmp.18541 tmp.18520 tmp.18521 tmp-ra.18547 rbp) (tmp.18541 tmp.18520 tmp.18521 tmp-ra.18547 rbp)) (tmp.18520 tmp.18521 tmp-ra.18547 rbp)) ((((((tmp.18544 tmp.18520 tmp.18521 tmp-ra.18547 rbp) (tmp.18544 tmp.18520 tmp.18521 tmp-ra.18547 rbp)) (tmp.18520 tmp.18521 tmp-ra.18547 rbp)) (tmp.18543 tmp.18520 tmp.18521 tmp-ra.18547 rbp) (tmp.18543 tmp.18520 tmp.18521 tmp-ra.18547 rbp)) (tmp.18520 tmp.18521 tmp-ra.18547 rbp)) ((tmp.18521 rax tmp-ra.18547 rbp) (tmp-ra.18547 rax rbp) (rax rbp)) ((tmp-ra.18547 rax rbp) (rax rbp))) ((tmp-ra.18547 rax rbp) (rax rbp))))) (conflicts ((tmp.18541 (rbp tmp-ra.18547 tmp.18521 tmp.18520)) (tmp.18521 (rbp tmp-ra.18547 tmp.18520 tmp.18542 tmp.18541 tmp.18544 tmp.18543 rax)) (tmp.18542 (rbp tmp-ra.18547 tmp.18521 tmp.18520)) (tmp-ra.18547 (tmp.18521 tmp.18520 rbp rsi rdi tmp.18542 tmp.18541 tmp.18544 tmp.18543 rax)) (tmp.18544 (rbp tmp-ra.18547 tmp.18521 tmp.18520)) (tmp.18520 (tmp.18521 rbp tmp-ra.18547 rsi tmp.18542 tmp.18541 tmp.18544 tmp.18543)) (tmp.18543 (rbp tmp-ra.18547 tmp.18521 tmp.18520)) (rax (tmp.18521 rbp tmp-ra.18547)) (rbp (tmp.18521 tmp.18520 tmp-ra.18547 tmp.18542 tmp.18541 tmp.18544 tmp.18543 rax)) (rdi (tmp-ra.18547)) (rsi (tmp.18520 tmp-ra.18547)))) (assignment ())) (begin (set! tmp-ra.18547 r15) (set! tmp.18520 rdi) (set! tmp.18521 rsi) (if (begin (if (begin (begin (set! tmp.18542 tmp.18521) (set! tmp.18542 (bitwise-and tmp.18542 7))) (= tmp.18542 0)) (set! tmp.18541 14) (set! tmp.18541 6)) (!= tmp.18541 6)) (if (begin (if (begin (begin (set! tmp.18544 tmp.18520) (set! tmp.18544 (bitwise-and tmp.18544 7))) (= tmp.18544 0)) (set! tmp.18543 14) (set! tmp.18543 6)) (!= tmp.18543 6)) (begin (set! rax tmp.18520) (set! rax (+ rax tmp.18521)) (jump tmp-ra.18547 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18547 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18547 rbp rax))))) (define L.fib_loop.2361 ((locals (tmp.18546 new-acc2.18517 n.18515 tmp.18545)) (undead-out ((rdi rsi rdx tmp-ra.18548 rbp) (rsi rdx n.18515 tmp-ra.18548 rbp) (rdx n.18515 acc1.18514 tmp-ra.18548 rbp) (acc2.18513 n.18515 acc1.18514 tmp-ra.18548 rbp) ((((acc2.18513 n.18515 acc1.18514 tmp-ra.18548 rbp) (tmp.18545 acc2.18513 n.18515 acc1.18514 tmp-ra.18548 rbp) (tmp.18545 acc2.18513 n.18515 acc1.18514 tmp-ra.18548 rbp)) (acc2.18513 n.18515 acc1.18514 tmp-ra.18548 rbp)) ((tmp-ra.18548 rax rbp) (rax rbp)) ((((acc1.18514 n.18515 acc2.18513 tmp-ra.18548 rbp) (tmp.18546 acc1.18514 n.18515 acc2.18513 tmp-ra.18548 rbp) (tmp.18546 acc1.18514 n.18515 acc2.18513 tmp-ra.18548 rbp)) (acc1.18514 n.18515 acc2.18513 tmp-ra.18548 rbp)) ((tmp-ra.18548 rax rbp) (rax rbp)) (((rax acc1.18514 acc2.18513 tmp-ra.18548 rbp) ((n.18515 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.18514 acc2.18513 new-n.18516 tmp-ra.18548 rbp) ((rax acc2.18513 new-n.18516 tmp-ra.18548 rbp) ((acc1.18514 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.18517 acc2.18513 new-n.18516 tmp-ra.18548 rbp) (acc2.18513 new-n.18516 tmp-ra.18548 rdx rbp) (new-n.18516 tmp-ra.18548 rdx rsi rbp) (tmp-ra.18548 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (conflicts ((tmp.18545 (rbp tmp-ra.18548 acc1.18514 n.18515 acc2.18513)) (n.18515 (acc2.18513 acc1.18514 rbp tmp-ra.18548 rdx tmp.18545 tmp.18546 rsi)) (acc1.18514 (acc2.18513 rbp tmp-ra.18548 n.18515 rdx tmp.18545 tmp.18546 rsi new-n.18516)) (tmp-ra.18548 (acc2.18513 acc1.18514 n.18515 rbp tmp.18545 tmp.18546 rax rdi rsi rdx new-acc2.18517 new-n.18516)) (new-n.18516 (rsi rdx new-acc2.18517 rbp tmp-ra.18548 acc2.18513 acc1.18514)) (new-acc2.18517 (rbp tmp-ra.18548 new-n.18516 acc2.18513)) (acc2.18513 (rbp tmp-ra.18548 acc1.18514 n.18515 tmp.18545 tmp.18546 rdx new-acc2.18517 new-n.18516)) (tmp.18546 (rbp tmp-ra.18548 acc2.18513 n.18515 acc1.18514)) (rsi (rdx tmp-ra.18548 new-n.18516 acc1.18514 r15 rdi rbp n.18515)) (rbp (acc2.18513 acc1.18514 n.18515 tmp-ra.18548 tmp.18545 tmp.18546 rax rdx new-acc2.18517 new-n.18516 r15 rdi rsi)) (rdi (rdx tmp-ra.18548 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.18514 n.18515 r15 rdi rsi rbp tmp-ra.18548 new-n.18516 acc2.18513)) (rax (rbp tmp-ra.18548)))) (assignment ((tmp-ra.18548 fv0) (acc2.18513 fv1) (acc1.18514 fv2) (new-n.18516 fv3)))) (begin (set! tmp-ra.18548 r15) (set! n.18515 rdi) (set! acc1.18514 rsi) (set! acc2.18513 rdx) (if (begin (if (= n.18515 0) (set! tmp.18545 14) (set! tmp.18545 6)) (!= tmp.18545 6)) (begin (set! rax acc1.18514) (jump tmp-ra.18548 rbp rax)) (if (begin (if (= n.18515 8) (set! tmp.18546 14) (set! tmp.18546 6)) (!= tmp.18546 6)) (begin (set! rax acc2.18513) (jump tmp-ra.18548 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2363 (begin (set! rsi -8) (set! rdi n.18515) (set! r15 L.rp.2363) (jump L.+.2362 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-n.18516 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2364 (begin (set! rsi acc2.18513) (set! rdi acc1.18514) (set! r15 L.rp.2364) (jump L.+.2362 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-acc2.18517 rax) (set! rdx new-acc2.18517) (set! rsi acc2.18513) (set! rdi new-n.18516) (set! r15 tmp-ra.18548) (jump L.fib_loop.2361 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.18549 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.18549) (jump L.fib_loop.2361 rbp r15 rdi rsi rdx)))) ((module ((locals ()) (undead-out ((tmp-ra.18575 rbp) (tmp-ra.18575 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.18575 (rdi rbp)) (rbp (r15 rdi tmp-ra.18575)) (rdi (r15 rbp tmp-ra.18575)) (r15 (rbp rdi)))) (assignment ((tmp-ra.18575 r15)))) (define L.id.2365 ((locals ()) (undead-out ((rdi tmp-ra.18574 rbp) (x.18550 tmp-ra.18574 rbp) (tmp-ra.18574 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18574 (rax x.18550 rbp rdi)) (x.18550 (rbp tmp-ra.18574)) (rdi (tmp-ra.18574)) (rbp (rax x.18550 tmp-ra.18574)) (rax (rbp tmp-ra.18574)))) (assignment ((tmp-ra.18574 r15) (x.18550 r14)))) (begin (set! tmp-ra.18574 r15) (set! x.18550 rdi) (set! rax x.18550) (jump tmp-ra.18574 rbp rax))) (begin (set! tmp-ra.18575 r15) (set! rdi 40) (set! r15 tmp-ra.18575) (jump L.id.2365 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.18607 rbp) ((rax tmp-ra.18607 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (y.18577 tmp-ra.18607 rbp) (tmp-ra.18607 rsi rbp) (tmp-ra.18607 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18607 (rdi rsi y.18577 rbp)) (y.18577 (rbp tmp-ra.18607)) (rbp (rsi y.18577 r15 rdi tmp-ra.18607)) (rdi (rsi tmp-ra.18607 r15 rbp)) (r15 (rsi rbp rdi)) (rsi (r15 rdi rbp tmp-ra.18607)))) (assignment ((tmp-ra.18607 fv0) (y.18577 r15)))) (define L.+.2367 ((locals ()) (undead-out ((rdi rsi tmp-ra.18605 rbp) (rsi tmp.18580 tmp-ra.18605 rbp) (tmp.18580 tmp.18581 tmp-ra.18605 rbp) ((((((tmp.18602 tmp.18580 tmp.18581 tmp-ra.18605 rbp) (tmp.18602 tmp.18580 tmp.18581 tmp-ra.18605 rbp)) (tmp.18580 tmp.18581 tmp-ra.18605 rbp)) (tmp.18601 tmp.18580 tmp.18581 tmp-ra.18605 rbp) (tmp.18601 tmp.18580 tmp.18581 tmp-ra.18605 rbp)) (tmp.18580 tmp.18581 tmp-ra.18605 rbp)) ((((((tmp.18604 tmp.18580 tmp.18581 tmp-ra.18605 rbp) (tmp.18604 tmp.18580 tmp.18581 tmp-ra.18605 rbp)) (tmp.18580 tmp.18581 tmp-ra.18605 rbp)) (tmp.18603 tmp.18580 tmp.18581 tmp-ra.18605 rbp) (tmp.18603 tmp.18580 tmp.18581 tmp-ra.18605 rbp)) (tmp.18580 tmp.18581 tmp-ra.18605 rbp)) ((tmp.18581 rax tmp-ra.18605 rbp) (tmp-ra.18605 rax rbp) (rax rbp)) ((tmp-ra.18605 rax rbp) (rax rbp))) ((tmp-ra.18605 rax rbp) (rax rbp))))) (conflicts ((tmp.18601 (rbp tmp-ra.18605 tmp.18581 tmp.18580)) (tmp.18581 (rbp tmp-ra.18605 tmp.18580 tmp.18602 tmp.18601 tmp.18604 tmp.18603 rax)) (tmp.18602 (rbp tmp-ra.18605 tmp.18581 tmp.18580)) (tmp-ra.18605 (tmp.18581 tmp.18580 rbp rsi rdi tmp.18602 tmp.18601 tmp.18604 tmp.18603 rax)) (tmp.18604 (rbp tmp-ra.18605 tmp.18581 tmp.18580)) (tmp.18580 (tmp.18581 rbp tmp-ra.18605 rsi tmp.18602 tmp.18601 tmp.18604 tmp.18603)) (tmp.18603 (rbp tmp-ra.18605 tmp.18581 tmp.18580)) (rax (tmp.18581 rbp tmp-ra.18605)) (rbp (tmp.18581 tmp.18580 tmp-ra.18605 tmp.18602 tmp.18601 tmp.18604 tmp.18603 rax)) (rdi (tmp-ra.18605)) (rsi (tmp.18580 tmp-ra.18605)))) (assignment ((tmp-ra.18605 r15) (tmp.18581 r14) (tmp.18580 r13) (tmp.18601 r9) (tmp.18602 r9) (tmp.18604 r9) (tmp.18603 r9)))) (begin (set! tmp-ra.18605 r15) (set! tmp.18580 rdi) (set! tmp.18581 rsi) (if (begin (if (begin (begin (set! tmp.18602 tmp.18581) (set! tmp.18602 (bitwise-and tmp.18602 7))) (= tmp.18602 0)) (set! tmp.18601 14) (set! tmp.18601 6)) (!= tmp.18601 6)) (if (begin (if (begin (begin (set! tmp.18604 tmp.18580) (set! tmp.18604 (bitwise-and tmp.18604 7))) (= tmp.18604 0)) (set! tmp.18603 14) (set! tmp.18603 6)) (!= tmp.18603 6)) (begin (set! rax tmp.18580) (set! rax (+ rax tmp.18581)) (jump tmp-ra.18605 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18605 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18605 rbp rax))))) (define L.id.2366 ((locals ()) (undead-out ((rdi tmp-ra.18606 rbp) (x.18576 tmp-ra.18606 rbp) (tmp-ra.18606 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18606 (rax x.18576 rbp rdi)) (x.18576 (rbp tmp-ra.18606)) (rdi (tmp-ra.18606)) (rbp (rax x.18576 tmp-ra.18606)) (rax (rbp tmp-ra.18606)))) (assignment ((tmp-ra.18606 r15) (x.18576 r14)))) (begin (set! tmp-ra.18606 r15) (set! x.18576 rdi) (set! rax x.18576) (jump tmp-ra.18606 rbp rax))) (begin (set! tmp-ra.18607 r15) (begin (set! rbp (- rbp 8)) (return-point L.rp.2368 (begin (set! rdi 40) (set! r15 L.rp.2368) (jump L.id.2366 rbp r15 rdi))) (set! rbp (+ rbp 8))) (set! y.18577 rax) (set! rsi y.18577) (set! rdi 40) (set! r15 tmp-ra.18607) (jump L.+.2367 rbp r15 rdi rsi))) (module ((locals ()) (undead-out ((tmp-ra.18644 rbp) (tmp-ra.18644 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.18644 (rdi rbp)) (rbp (r15 rdi tmp-ra.18644)) (rdi (r15 rbp tmp-ra.18644)) (r15 (rbp rdi)))) (assignment ((tmp-ra.18644 r15)))) (define L.+.2371 ((locals ()) (undead-out ((rdi rsi tmp-ra.18641 rbp) (rsi tmp.18614 tmp-ra.18641 rbp) (tmp.18614 tmp.18615 tmp-ra.18641 rbp) ((((((tmp.18636 tmp.18614 tmp.18615 tmp-ra.18641 rbp) (tmp.18636 tmp.18614 tmp.18615 tmp-ra.18641 rbp)) (tmp.18614 tmp.18615 tmp-ra.18641 rbp)) (tmp.18635 tmp.18614 tmp.18615 tmp-ra.18641 rbp) (tmp.18635 tmp.18614 tmp.18615 tmp-ra.18641 rbp)) (tmp.18614 tmp.18615 tmp-ra.18641 rbp)) ((((((tmp.18638 tmp.18614 tmp.18615 tmp-ra.18641 rbp) (tmp.18638 tmp.18614 tmp.18615 tmp-ra.18641 rbp)) (tmp.18614 tmp.18615 tmp-ra.18641 rbp)) (tmp.18637 tmp.18614 tmp.18615 tmp-ra.18641 rbp) (tmp.18637 tmp.18614 tmp.18615 tmp-ra.18641 rbp)) (tmp.18614 tmp.18615 tmp-ra.18641 rbp)) ((tmp.18615 rax tmp-ra.18641 rbp) (tmp-ra.18641 rax rbp) (rax rbp)) ((tmp-ra.18641 rax rbp) (rax rbp))) ((tmp-ra.18641 rax rbp) (rax rbp))))) (conflicts ((tmp.18635 (rbp tmp-ra.18641 tmp.18615 tmp.18614)) (tmp.18615 (rbp tmp-ra.18641 tmp.18614 tmp.18636 tmp.18635 tmp.18638 tmp.18637 rax)) (tmp.18636 (rbp tmp-ra.18641 tmp.18615 tmp.18614)) (tmp-ra.18641 (tmp.18615 tmp.18614 rbp rsi rdi tmp.18636 tmp.18635 tmp.18638 tmp.18637 rax)) (tmp.18638 (rbp tmp-ra.18641 tmp.18615 tmp.18614)) (tmp.18614 (tmp.18615 rbp tmp-ra.18641 rsi tmp.18636 tmp.18635 tmp.18638 tmp.18637)) (tmp.18637 (rbp tmp-ra.18641 tmp.18615 tmp.18614)) (rax (tmp.18615 rbp tmp-ra.18641)) (rbp (tmp.18615 tmp.18614 tmp-ra.18641 tmp.18636 tmp.18635 tmp.18638 tmp.18637 rax)) (rdi (tmp-ra.18641)) (rsi (tmp.18614 tmp-ra.18641)))) (assignment ((tmp-ra.18641 r15) (tmp.18615 r14) (tmp.18614 r13) (tmp.18635 r9) (tmp.18636 r9) (tmp.18638 r9) (tmp.18637 r9)))) (begin (set! tmp-ra.18641 r15) (set! tmp.18614 rdi) (set! tmp.18615 rsi) (if (begin (if (begin (begin (set! tmp.18636 tmp.18615) (set! tmp.18636 (bitwise-and tmp.18636 7))) (= tmp.18636 0)) (set! tmp.18635 14) (set! tmp.18635 6)) (!= tmp.18635 6)) (if (begin (if (begin (begin (set! tmp.18638 tmp.18614) (set! tmp.18638 (bitwise-and tmp.18638 7))) (= tmp.18638 0)) (set! tmp.18637 14) (set! tmp.18637 6)) (!= tmp.18637 6)) (begin (set! rax tmp.18614) (set! rax (+ rax tmp.18615)) (jump tmp-ra.18641 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18641 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18641 rbp rax))))) (define L.odd?.2369 ((locals ()) (undead-out ((rdi tmp-ra.18642 rbp) (x.18608 tmp-ra.18642 rbp) ((((x.18608 tmp-ra.18642 rbp) (tmp.18639 x.18608 tmp-ra.18642 rbp) (tmp.18639 x.18608 tmp-ra.18642 rbp)) (x.18608 tmp-ra.18642 rbp)) ((tmp-ra.18642 rax rbp) (rax rbp)) (((rax tmp-ra.18642 rbp) ((x.18608 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.18609 tmp-ra.18642 rbp) (tmp-ra.18642 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (conflicts ((tmp.18639 (rbp tmp-ra.18642 x.18608)) (x.18608 (rbp tmp-ra.18642 tmp.18639 rsi)) (tmp-ra.18642 (x.18608 rbp tmp.18639 rax rdi y.18609)) (y.18609 (rbp tmp-ra.18642)) (rsi (r15 rdi rbp x.18608)) (rbp (x.18608 tmp-ra.18642 tmp.18639 rax y.18609 r15 rdi rsi)) (rdi (tmp-ra.18642 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.18642)))) (assignment ((tmp-ra.18642 fv0) (x.18608 r15) (tmp.18639 r14) (y.18609 r15)))) (begin (set! tmp-ra.18642 r15) (set! x.18608 rdi) (if (begin (if (= x.18608 0) (set! tmp.18639 14) (set! tmp.18639 6)) (!= tmp.18639 6)) (begin (set! rax 0) (jump tmp-ra.18642 rbp rax)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2372 (begin (set! rsi -8) (set! rdi x.18608) (set! r15 L.rp.2372) (jump L.+.2371 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! y.18609 rax) (set! rdi y.18609) (set! r15 tmp-ra.18642) (jump L.even?.2370 rbp r15 rdi))))) (define L.even?.2370 ((locals ()) (undead-out ((rdi tmp-ra.18643 rbp) (x.18610 tmp-ra.18643 rbp) ((((x.18610 tmp-ra.18643 rbp) (tmp.18640 x.18610 tmp-ra.18643 rbp) (tmp.18640 x.18610 tmp-ra.18643 rbp)) (x.18610 tmp-ra.18643 rbp)) ((tmp-ra.18643 rax rbp) (rax rbp)) (((rax tmp-ra.18643 rbp) ((x.18610 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.18611 tmp-ra.18643 rbp) (tmp-ra.18643 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (conflicts ((tmp.18640 (rbp tmp-ra.18643 x.18610)) (x.18610 (rbp tmp-ra.18643 tmp.18640 rsi)) (tmp-ra.18643 (x.18610 rbp tmp.18640 rax rdi y.18611)) (y.18611 (rbp tmp-ra.18643)) (rsi (r15 rdi rbp x.18610)) (rbp (x.18610 tmp-ra.18643 tmp.18640 rax y.18611 r15 rdi rsi)) (rdi (tmp-ra.18643 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.18643)))) (assignment ((tmp-ra.18643 fv0) (x.18610 r15) (tmp.18640 r14) (y.18611 r15)))) (begin (set! tmp-ra.18643 r15) (set! x.18610 rdi) (if (begin (if (= x.18610 0) (set! tmp.18640 14) (set! tmp.18640 6)) (!= tmp.18640 6)) (begin (set! rax 8) (jump tmp-ra.18643 rbp rax)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2373 (begin (set! rsi -8) (set! rdi x.18610) (set! r15 L.rp.2373) (jump L.+.2371 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! y.18611 rax) (set! rdi y.18611) (set! r15 tmp-ra.18643) (jump L.odd?.2369 rbp r15 rdi))))) (begin (set! tmp-ra.18644 r15) (set! rdi 40) (set! r15 tmp-ra.18644) (jump L.even?.2370 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.18673 rbp) (tmp-ra.18673 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18673 (rax rbp)) (rbp (rax tmp-ra.18673)) (rax (rbp tmp-ra.18673)))) (assignment ((tmp-ra.18673 r15)))) (define L.zero.2374 ((locals ()) (undead-out ((rdi rsi rdx rcx tmp-ra.18672 rbp) (rsi rdx rcx tmp-ra.18672 rbp) (rdx rcx tmp-ra.18672 rbp) (rcx tmp-ra.18672 rbp) (tmp-ra.18672 rbp) (tmp-ra.18672 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18672 (rax v3.18645 v2.18646 v1.18647 v0.18648 rbp rcx rdx rsi rdi)) (v0.18648 (rbp tmp-ra.18672 rcx rdx rsi)) (v1.18647 (rbp tmp-ra.18672 rcx rdx)) (v2.18646 (rbp tmp-ra.18672 rcx)) (v3.18645 (rbp tmp-ra.18672)) (rdi (tmp-ra.18672)) (rsi (v0.18648 tmp-ra.18672)) (rdx (v1.18647 v0.18648 tmp-ra.18672)) (rcx (v2.18646 v1.18647 v0.18648 tmp-ra.18672)) (rbp (rax v3.18645 v2.18646 v1.18647 v0.18648 tmp-ra.18672)) (rax (rbp tmp-ra.18672)))) (assignment ((tmp-ra.18672 r15) (v0.18648 r14) (v1.18647 r14) (v2.18646 r14) (v3.18645 r14)))) (begin (set! tmp-ra.18672 r15) (set! v0.18648 rdi) (set! v1.18647 rsi) (set! v2.18646 rdx) (set! v3.18645 rcx) (set! rax 0) (jump tmp-ra.18672 rbp rax))) (begin (set! tmp-ra.18673 r15) (set! rax 0) (jump tmp-ra.18673 rbp rax))) (module ((locals ()) (undead-out ((tmp-ra.18700 rbp) (tmp-ra.18700 y.18675 rbp) (tmp-ra.18700 y.18675 rdi rbp) (y.18675 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.18675 (r15 rdi rbp tmp-ra.18700)) (tmp-ra.18700 (rdi y.18675 rbp)) (rbp (r15 rdi y.18675 tmp-ra.18700)) (rdi (r15 rbp y.18675 tmp-ra.18700)) (r15 (rbp rdi y.18675)))) (assignment ((y.18675 r14) (tmp-ra.18700 r15)))) (define L.id.2375 ((locals ()) (undead-out ((rdi tmp-ra.18699 rbp) (x.18674 tmp-ra.18699 rbp) (tmp-ra.18699 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18699 (rax x.18674 rbp rdi)) (x.18674 (rbp tmp-ra.18699)) (rdi (tmp-ra.18699)) (rbp (rax x.18674 tmp-ra.18699)) (rax (rbp tmp-ra.18699)))) (assignment ((tmp-ra.18699 r15) (x.18674 r14)))) (begin (set! tmp-ra.18699 r15) (set! x.18674 rdi) (set! rax x.18674) (jump tmp-ra.18699 rbp rax))) (begin (set! tmp-ra.18700 r15) (set! y.18675 L.id.2375) (set! rdi 40) (set! r15 tmp-ra.18700) (jump y.18675 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.18729 rbp) (((tmp.18730 tmp-ra.18729 rbp) (tmp-ra.18729 rbp)) (tmp-ra.18729 y.18703 rbp) (tmp-ra.18729 y.18703 rbp)) (tmp-ra.18729 y.18703 rdi rbp) (y.18703 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.18703 (r15 rdi rbp tmp-ra.18729)) (tmp-ra.18729 (rdi tmp.18730 y.18703 rbp)) (tmp.18730 (rbp tmp-ra.18729)) (rbp (r15 rdi tmp.18730 y.18703 tmp-ra.18729)) (rdi (r15 rbp y.18703 tmp-ra.18729)) (r15 (rbp rdi y.18703)))) (assignment ((y.18703 r14) (tmp-ra.18729 r15) (tmp.18730 r14)))) (define L.id1.2376 ((locals ()) (undead-out ((rdi tmp-ra.18727 rbp) (x.18701 tmp-ra.18727 rbp) (tmp-ra.18727 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18727 (rax x.18701 rbp rdi)) (x.18701 (rbp tmp-ra.18727)) (rdi (tmp-ra.18727)) (rbp (rax x.18701 tmp-ra.18727)) (rax (rbp tmp-ra.18727)))) (assignment ((tmp-ra.18727 r15) (x.18701 r14)))) (begin (set! tmp-ra.18727 r15) (set! x.18701 rdi) (set! rax x.18701) (jump tmp-ra.18727 rbp rax))) (define L.id2.2377 ((locals ()) (undead-out ((rdi tmp-ra.18728 rbp) (x.18702 tmp-ra.18728 rbp) (tmp-ra.18728 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18728 (rax x.18702 rbp rdi)) (x.18702 (rbp tmp-ra.18728)) (rdi (tmp-ra.18728)) (rbp (rax x.18702 tmp-ra.18728)) (rax (rbp tmp-ra.18728)))) (assignment ((tmp-ra.18728 r15) (x.18702 r14)))) (begin (set! tmp-ra.18728 r15) (set! x.18702 rdi) (set! rax x.18702) (jump tmp-ra.18728 rbp rax))) (begin (set! tmp-ra.18729 r15) (if (begin (set! tmp.18730 14) (!= tmp.18730 6)) (set! y.18703 L.id1.2376) (set! y.18703 L.id2.2377)) (set! rdi 40) (set! r15 tmp-ra.18729) (jump y.18703 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.18767 rbp) ((rax tmp-ra.18767 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18763 tmp-ra.18767 rbp) ((rax tmp.18763 tmp-ra.18767 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18764 tmp.18763 tmp-ra.18767 rbp) (tmp.18763 tmp-ra.18767 rsi rbp) (tmp-ra.18767 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18767 (rdi rsi tmp.18764 tmp.18763 rbp)) (tmp.18763 (rsi tmp.18764 rbp tmp-ra.18767)) (tmp.18764 (rbp tmp-ra.18767 tmp.18763)) (rbp (tmp.18764 tmp.18763 r15 rdi rsi tmp-ra.18767)) (rsi (tmp-ra.18767 tmp.18763 r15 rdi rbp)) (rdi (tmp-ra.18767 r15 rbp rsi)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.18767 fv0) (tmp.18763 fv1) (tmp.18764 r15)))) (define L.*.2379 ((locals ()) (undead-out ((rdi rsi tmp-ra.18765 rbp) (rsi tmp.18731 tmp-ra.18765 rbp) (tmp.18732 tmp.18731 tmp-ra.18765 rbp) ((((((tmp.18755 tmp.18732 tmp.18731 tmp-ra.18765 rbp) (tmp.18755 tmp.18732 tmp.18731 tmp-ra.18765 rbp)) (tmp.18732 tmp.18731 tmp-ra.18765 rbp)) (tmp.18754 tmp.18732 tmp.18731 tmp-ra.18765 rbp) (tmp.18754 tmp.18732 tmp.18731 tmp-ra.18765 rbp)) (tmp.18732 tmp.18731 tmp-ra.18765 rbp)) ((((((tmp.18757 tmp.18732 tmp.18731 tmp-ra.18765 rbp) (tmp.18757 tmp.18732 tmp.18731 tmp-ra.18765 rbp)) (tmp.18732 tmp.18731 tmp-ra.18765 rbp)) (tmp.18756 tmp.18732 tmp.18731 tmp-ra.18765 rbp) (tmp.18756 tmp.18732 tmp.18731 tmp-ra.18765 rbp)) (tmp.18732 tmp.18731 tmp-ra.18765 rbp)) ((tmp.18758 tmp.18731 tmp-ra.18765 rbp) (tmp.18731 tmp.18758 tmp-ra.18765 rbp) (tmp.18758 rax tmp-ra.18765 rbp) (tmp-ra.18765 rax rbp) (rax rbp)) ((tmp-ra.18765 rax rbp) (rax rbp))) ((tmp-ra.18765 rax rbp) (rax rbp))))) (conflicts ((tmp.18754 (rbp tmp-ra.18765 tmp.18731 tmp.18732)) (tmp.18732 (rbp tmp-ra.18765 tmp.18731 tmp.18755 tmp.18754 tmp.18757 tmp.18756)) (tmp.18755 (rbp tmp-ra.18765 tmp.18731 tmp.18732)) (tmp-ra.18765 (tmp.18732 tmp.18731 rbp rsi rdi tmp.18755 tmp.18754 tmp.18757 tmp.18756 tmp.18758 rax)) (tmp.18758 (rax rbp tmp-ra.18765 tmp.18731)) (tmp.18757 (rbp tmp-ra.18765 tmp.18731 tmp.18732)) (tmp.18731 (tmp.18732 rbp tmp-ra.18765 rsi tmp.18755 tmp.18754 tmp.18757 tmp.18756 tmp.18758)) (tmp.18756 (rbp tmp-ra.18765 tmp.18731 tmp.18732)) (rax (tmp.18758 rbp tmp-ra.18765)) (rbp (tmp.18732 tmp.18731 tmp-ra.18765 tmp.18755 tmp.18754 tmp.18757 tmp.18756 tmp.18758 rax)) (rdi (tmp-ra.18765)) (rsi (tmp.18731 tmp-ra.18765)))) (assignment ((tmp-ra.18765 r15) (tmp.18731 r14) (tmp.18732 r13) (tmp.18754 r9) (tmp.18755 r9) (tmp.18758 r13) (tmp.18757 r9) (tmp.18756 r9)))) (begin (set! tmp-ra.18765 r15) (set! tmp.18731 rdi) (set! tmp.18732 rsi) (if (begin (if (begin (begin (set! tmp.18755 tmp.18732) (set! tmp.18755 (bitwise-and tmp.18755 7))) (= tmp.18755 0)) (set! tmp.18754 14) (set! tmp.18754 6)) (!= tmp.18754 6)) (if (begin (if (begin (begin (set! tmp.18757 tmp.18731) (set! tmp.18757 (bitwise-and tmp.18757 7))) (= tmp.18757 0)) (set! tmp.18756 14) (set! tmp.18756 6)) (!= tmp.18756 6)) (begin (set! tmp.18758 tmp.18732) (set! tmp.18758 (arithmetic-shift-right tmp.18758 3)) (set! rax tmp.18731) (set! rax (* rax tmp.18758)) (jump tmp-ra.18765 rbp rax)) (begin (set! rax 62) (jump tmp-ra.18765 rbp rax))) (begin (set! rax 62) (jump tmp-ra.18765 rbp rax))))) (define L.+.2378 ((locals ()) (undead-out ((rdi rsi tmp-ra.18766 rbp) (rsi tmp.18733 tmp-ra.18766 rbp) (tmp.18733 tmp.18734 tmp-ra.18766 rbp) ((((((tmp.18760 tmp.18733 tmp.18734 tmp-ra.18766 rbp) (tmp.18760 tmp.18733 tmp.18734 tmp-ra.18766 rbp)) (tmp.18733 tmp.18734 tmp-ra.18766 rbp)) (tmp.18759 tmp.18733 tmp.18734 tmp-ra.18766 rbp) (tmp.18759 tmp.18733 tmp.18734 tmp-ra.18766 rbp)) (tmp.18733 tmp.18734 tmp-ra.18766 rbp)) ((((((tmp.18762 tmp.18733 tmp.18734 tmp-ra.18766 rbp) (tmp.18762 tmp.18733 tmp.18734 tmp-ra.18766 rbp)) (tmp.18733 tmp.18734 tmp-ra.18766 rbp)) (tmp.18761 tmp.18733 tmp.18734 tmp-ra.18766 rbp) (tmp.18761 tmp.18733 tmp.18734 tmp-ra.18766 rbp)) (tmp.18733 tmp.18734 tmp-ra.18766 rbp)) ((tmp.18734 rax tmp-ra.18766 rbp) (tmp-ra.18766 rax rbp) (rax rbp)) ((tmp-ra.18766 rax rbp) (rax rbp))) ((tmp-ra.18766 rax rbp) (rax rbp))))) (conflicts ((tmp.18759 (rbp tmp-ra.18766 tmp.18734 tmp.18733)) (tmp.18734 (rbp tmp-ra.18766 tmp.18733 tmp.18760 tmp.18759 tmp.18762 tmp.18761 rax)) (tmp.18760 (rbp tmp-ra.18766 tmp.18734 tmp.18733)) (tmp-ra.18766 (tmp.18734 tmp.18733 rbp rsi rdi tmp.18760 tmp.18759 tmp.18762 tmp.18761 rax)) (tmp.18762 (rbp tmp-ra.18766 tmp.18734 tmp.18733)) (tmp.18733 (tmp.18734 rbp tmp-ra.18766 rsi tmp.18760 tmp.18759 tmp.18762 tmp.18761)) (tmp.18761 (rbp tmp-ra.18766 tmp.18734 tmp.18733)) (rax (tmp.18734 rbp tmp-ra.18766)) (rbp (tmp.18734 tmp.18733 tmp-ra.18766 tmp.18760 tmp.18759 tmp.18762 tmp.18761 rax)) (rdi (tmp-ra.18766)) (rsi (tmp.18733 tmp-ra.18766)))) (assignment ((tmp-ra.18766 r15) (tmp.18734 r14) (tmp.18733 r13) (tmp.18759 r9) (tmp.18760 r9) (tmp.18762 r9) (tmp.18761 r9)))) (begin (set! tmp-ra.18766 r15) (set! tmp.18733 rdi) (set! tmp.18734 rsi) (if (begin (if (begin (begin (set! tmp.18760 tmp.18734) (set! tmp.18760 (bitwise-and tmp.18760 7))) (= tmp.18760 0)) (set! tmp.18759 14) (set! tmp.18759 6)) (!= tmp.18759 6)) (if (begin (if (begin (begin (set! tmp.18762 tmp.18733) (set! tmp.18762 (bitwise-and tmp.18762 7))) (= tmp.18762 0)) (set! tmp.18761 14) (set! tmp.18761 6)) (!= tmp.18761 6)) (begin (set! rax tmp.18733) (set! rax (+ rax tmp.18734)) (jump tmp-ra.18766 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18766 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18766 rbp rax))))) (begin (set! tmp-ra.18767 r15) (begin (set! rbp (- rbp 16)) (return-point L.rp.2380 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2380) (jump L.+.2378 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.18763 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2381 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2381) (jump L.*.2379 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.18764 rax) (set! rsi tmp.18764) (set! rdi tmp.18763) (set! r15 tmp-ra.18767) (jump L.+.2378 rbp r15 rdi rsi))) (module ((locals ()) (undead-out ((tmp-ra.18798 rbp) (((((((rax tmp-ra.18798 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18796 tmp-ra.18798 rbp)) (tmp-ra.18798 rbp)) (tmp.18795 tmp-ra.18798 rbp) (tmp.18795 tmp-ra.18798 rbp)) (tmp-ra.18798 rbp)) ((tmp-ra.18798 rax rbp) (rax rbp)) ((tmp-ra.18798 rax rbp) (rax rbp))))) (conflicts ((tmp.18795 (rbp tmp-ra.18798)) (tmp.18796 (rbp tmp-ra.18798)) (tmp-ra.18798 (rbp tmp.18796 tmp.18795 rax)) (rax (rbp tmp-ra.18798)) (rbp (tmp-ra.18798 r15 rdi rsi tmp.18796 tmp.18795 rax)) (rsi (r15 rdi rbp)) (rdi (r15 rbp rsi)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.18798 fv0) (tmp.18795 r15) (tmp.18796 r15)))) (define L.+.2382 ((locals ()) (undead-out ((rdi rsi tmp-ra.18797 rbp) (rsi tmp.18770 tmp-ra.18797 rbp) (tmp.18770 tmp.18771 tmp-ra.18797 rbp) ((((((tmp.18792 tmp.18770 tmp.18771 tmp-ra.18797 rbp) (tmp.18792 tmp.18770 tmp.18771 tmp-ra.18797 rbp)) (tmp.18770 tmp.18771 tmp-ra.18797 rbp)) (tmp.18791 tmp.18770 tmp.18771 tmp-ra.18797 rbp) (tmp.18791 tmp.18770 tmp.18771 tmp-ra.18797 rbp)) (tmp.18770 tmp.18771 tmp-ra.18797 rbp)) ((((((tmp.18794 tmp.18770 tmp.18771 tmp-ra.18797 rbp) (tmp.18794 tmp.18770 tmp.18771 tmp-ra.18797 rbp)) (tmp.18770 tmp.18771 tmp-ra.18797 rbp)) (tmp.18793 tmp.18770 tmp.18771 tmp-ra.18797 rbp) (tmp.18793 tmp.18770 tmp.18771 tmp-ra.18797 rbp)) (tmp.18770 tmp.18771 tmp-ra.18797 rbp)) ((tmp.18771 rax tmp-ra.18797 rbp) (tmp-ra.18797 rax rbp) (rax rbp)) ((tmp-ra.18797 rax rbp) (rax rbp))) ((tmp-ra.18797 rax rbp) (rax rbp))))) (conflicts ((tmp.18791 (rbp tmp-ra.18797 tmp.18771 tmp.18770)) (tmp.18771 (rbp tmp-ra.18797 tmp.18770 tmp.18792 tmp.18791 tmp.18794 tmp.18793 rax)) (tmp.18792 (rbp tmp-ra.18797 tmp.18771 tmp.18770)) (tmp-ra.18797 (tmp.18771 tmp.18770 rbp rsi rdi tmp.18792 tmp.18791 tmp.18794 tmp.18793 rax)) (tmp.18794 (rbp tmp-ra.18797 tmp.18771 tmp.18770)) (tmp.18770 (tmp.18771 rbp tmp-ra.18797 rsi tmp.18792 tmp.18791 tmp.18794 tmp.18793)) (tmp.18793 (rbp tmp-ra.18797 tmp.18771 tmp.18770)) (rax (tmp.18771 rbp tmp-ra.18797)) (rbp (tmp.18771 tmp.18770 tmp-ra.18797 tmp.18792 tmp.18791 tmp.18794 tmp.18793 rax)) (rdi (tmp-ra.18797)) (rsi (tmp.18770 tmp-ra.18797)))) (assignment ((tmp-ra.18797 r15) (tmp.18771 r14) (tmp.18770 r13) (tmp.18791 r9) (tmp.18792 r9) (tmp.18794 r9) (tmp.18793 r9)))) (begin (set! tmp-ra.18797 r15) (set! tmp.18770 rdi) (set! tmp.18771 rsi) (if (begin (if (begin (begin (set! tmp.18792 tmp.18771) (set! tmp.18792 (bitwise-and tmp.18792 7))) (= tmp.18792 0)) (set! tmp.18791 14) (set! tmp.18791 6)) (!= tmp.18791 6)) (if (begin (if (begin (begin (set! tmp.18794 tmp.18770) (set! tmp.18794 (bitwise-and tmp.18794 7))) (= tmp.18794 0)) (set! tmp.18793 14) (set! tmp.18793 6)) (!= tmp.18793 6)) (begin (set! rax tmp.18770) (set! rax (+ rax tmp.18771)) (jump tmp-ra.18797 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18797 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18797 rbp rax))))) (begin (set! tmp-ra.18798 r15) (if (begin (if (begin (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2383 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2383) (jump L.+.2382 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! tmp.18796 rax)) (= tmp.18796 88)) (set! tmp.18795 14) (set! tmp.18795 6)) (!= tmp.18795 6)) (begin (set! rax 32) (jump tmp-ra.18798 rbp rax)) (begin (set! rax 48) (jump tmp-ra.18798 rbp rax))))) (module ((locals ()) (undead-out ((tmp-ra.18822 rbp) (tmp-ra.18822 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18822 (rax rbp)) (rbp (rax tmp-ra.18822)) (rax (rbp tmp-ra.18822)))) (assignment ((tmp-ra.18822 r15)))) (begin (set! tmp-ra.18822 r15) (set! rax 14) (jump tmp-ra.18822 rbp rax))) (module ((locals ()) (undead-out ((tmp-ra.18846 rbp) (tmp-ra.18846 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18846 (rax rbp)) (rbp (rax tmp-ra.18846)) (rax (rbp tmp-ra.18846)))) (assignment ((tmp-ra.18846 r15)))) (begin (set! tmp-ra.18846 r15) (set! rax 6) (jump tmp-ra.18846 rbp rax))) (module ((locals ()) (undead-out ((tmp-ra.18870 rbp) (tmp-ra.18870 rax rbp) (rax rbp))) (conflicts ((tmp-ra.18870 (rax rbp)) (rbp (rax tmp-ra.18870)) (rax (rbp tmp-ra.18870)))) (assignment ((tmp-ra.18870 r15)))) (begin (set! tmp-ra.18870 r15) (set! rax 22) (jump tmp-ra.18870 rbp rax))) (module ((locals ()) (undead-out ((tmp-ra.18936 rbp) (tmp-ra.18936 fv0 rbp) (tmp-ra.18936 fv0 r9 rbp) (tmp-ra.18936 fv0 r9 r8 rbp) (tmp-ra.18936 fv0 r9 r8 rcx rbp) (tmp-ra.18936 fv0 r9 r8 rcx rdx rbp) (tmp-ra.18936 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.18936 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.18936 (rdi rsi rdx rcx r8 r9 fv0 rbp)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 tmp-ra.18936)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp tmp-ra.18936)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 tmp-ra.18936)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 tmp-ra.18936)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 tmp-ra.18936)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 tmp-ra.18936)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 tmp-ra.18936)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 tmp-ra.18936)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0)))) (assignment ((tmp-ra.18936 r15)))) (define L.+.2387 ((locals ()) (undead-out ((rdi rsi tmp-ra.18930 rbp) (rsi tmp.18904 tmp-ra.18930 rbp) (tmp.18904 tmp.18905 tmp-ra.18930 rbp) ((((((tmp.18926 tmp.18904 tmp.18905 tmp-ra.18930 rbp) (tmp.18926 tmp.18904 tmp.18905 tmp-ra.18930 rbp)) (tmp.18904 tmp.18905 tmp-ra.18930 rbp)) (tmp.18925 tmp.18904 tmp.18905 tmp-ra.18930 rbp) (tmp.18925 tmp.18904 tmp.18905 tmp-ra.18930 rbp)) (tmp.18904 tmp.18905 tmp-ra.18930 rbp)) ((((((tmp.18928 tmp.18904 tmp.18905 tmp-ra.18930 rbp) (tmp.18928 tmp.18904 tmp.18905 tmp-ra.18930 rbp)) (tmp.18904 tmp.18905 tmp-ra.18930 rbp)) (tmp.18927 tmp.18904 tmp.18905 tmp-ra.18930 rbp) (tmp.18927 tmp.18904 tmp.18905 tmp-ra.18930 rbp)) (tmp.18904 tmp.18905 tmp-ra.18930 rbp)) ((tmp.18905 rax tmp-ra.18930 rbp) (tmp-ra.18930 rax rbp) (rax rbp)) ((tmp-ra.18930 rax rbp) (rax rbp))) ((tmp-ra.18930 rax rbp) (rax rbp))))) (conflicts ((tmp.18925 (rbp tmp-ra.18930 tmp.18905 tmp.18904)) (tmp.18905 (rbp tmp-ra.18930 tmp.18904 tmp.18926 tmp.18925 tmp.18928 tmp.18927 rax)) (tmp.18926 (rbp tmp-ra.18930 tmp.18905 tmp.18904)) (tmp-ra.18930 (tmp.18905 tmp.18904 rbp rsi rdi tmp.18926 tmp.18925 tmp.18928 tmp.18927 rax)) (tmp.18928 (rbp tmp-ra.18930 tmp.18905 tmp.18904)) (tmp.18904 (tmp.18905 rbp tmp-ra.18930 rsi tmp.18926 tmp.18925 tmp.18928 tmp.18927)) (tmp.18927 (rbp tmp-ra.18930 tmp.18905 tmp.18904)) (rax (tmp.18905 rbp tmp-ra.18930)) (rbp (tmp.18905 tmp.18904 tmp-ra.18930 tmp.18926 tmp.18925 tmp.18928 tmp.18927 rax)) (rdi (tmp-ra.18930)) (rsi (tmp.18904 tmp-ra.18930)))) (assignment ((tmp-ra.18930 r15) (tmp.18905 r14) (tmp.18904 r13) (tmp.18925 r9) (tmp.18926 r9) (tmp.18928 r9) (tmp.18927 r9)))) (begin (set! tmp-ra.18930 r15) (set! tmp.18904 rdi) (set! tmp.18905 rsi) (if (begin (if (begin (begin (set! tmp.18926 tmp.18905) (set! tmp.18926 (bitwise-and tmp.18926 7))) (= tmp.18926 0)) (set! tmp.18925 14) (set! tmp.18925 6)) (!= tmp.18925 6)) (if (begin (if (begin (begin (set! tmp.18928 tmp.18904) (set! tmp.18928 (bitwise-and tmp.18928 7))) (= tmp.18928 0)) (set! tmp.18927 14) (set! tmp.18927 6)) (!= tmp.18927 6)) (begin (set! rax tmp.18904) (set! rax (+ rax tmp.18905)) (jump tmp-ra.18930 rbp rax)) (begin (set! rax 318) (jump tmp-ra.18930 rbp rax))) (begin (set! rax 318) (jump tmp-ra.18930 rbp rax))))) (define L.F.2384 ((locals ()) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 tmp-ra.18931 rbp) (rsi rdx rcx r8 r9 fv0 a.18877 tmp-ra.18931 rbp) (rdx rcx r8 r9 fv0 a.18877 b.18876 tmp-ra.18931 rbp) (rcx r8 r9 fv0 a.18877 b.18876 c.18875 tmp-ra.18931 rbp) (r8 r9 fv0 a.18877 b.18876 c.18875 d.18874 tmp-ra.18931 rbp) (r9 fv0 a.18877 b.18876 c.18875 d.18874 e.18873 tmp-ra.18931 rbp) (fv0 a.18877 b.18876 c.18875 d.18874 e.18873 f.18872 tmp-ra.18931 rbp) (a.18877 b.18876 c.18875 d.18874 e.18873 f.18872 g.18871 tmp-ra.18931 rbp) ((rax tmp-ra.18931 rbp) ((g.18871 f.18872 e.18873 d.18874 c.18875 b.18876 a.18877 nfv.18933 rbp) (f.18872 e.18873 d.18874 c.18875 b.18876 a.18877 nfv.18933 nfv.18932 rbp) (e.18873 d.18874 c.18875 b.18876 a.18877 nfv.18933 nfv.18932 r9 rbp) (d.18874 c.18875 b.18876 a.18877 nfv.18933 nfv.18932 r9 r8 rbp) (c.18875 b.18876 a.18877 nfv.18933 nfv.18932 r9 r8 rcx rbp) (b.18876 a.18877 nfv.18933 nfv.18932 r9 r8 rcx rdx rbp) (a.18877 nfv.18933 nfv.18932 r9 r8 rcx rdx rsi rbp) (nfv.18933 nfv.18932 r9 r8 rcx rdx rsi rdi rbp) (nfv.18933 nfv.18932 r9 r8 rcx rdx rsi rdi r15 rbp) (nfv.18933 nfv.18932 r9 r8 rcx rdx rsi rdi r15 rbp))) (tmp.18929 tmp-ra.18931 rbp) (tmp-ra.18931 rsi rbp) (tmp-ra.18931 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18931 (tmp.18929 g.18871 f.18872 e.18873 d.18874 c.18875 b.18876 a.18877 rbp fv0 r9 r8 rcx rdx rsi rdi)) (a.18877 (nfv.18932 nfv.18933 g.18871 f.18872 e.18873 d.18874 c.18875 b.18876 rbp tmp-ra.18931 fv0 r9 r8 rcx rdx rsi)) (b.18876 (nfv.18932 nfv.18933 g.18871 f.18872 e.18873 d.18874 c.18875 rbp tmp-ra.18931 a.18877 fv0 r9 r8 rcx rdx)) (c.18875 (nfv.18932 nfv.18933 g.18871 f.18872 e.18873 d.18874 rbp tmp-ra.18931 b.18876 a.18877 fv0 r9 r8 rcx)) (d.18874 (nfv.18932 nfv.18933 g.18871 f.18872 e.18873 rbp tmp-ra.18931 c.18875 b.18876 a.18877 fv0 r9 r8)) (e.18873 (nfv.18932 nfv.18933 g.18871 f.18872 rbp tmp-ra.18931 d.18874 c.18875 b.18876 a.18877 fv0 r9)) (f.18872 (nfv.18932 nfv.18933 g.18871 rbp tmp-ra.18931 e.18873 d.18874 c.18875 b.18876 a.18877 fv0)) (g.18871 (nfv.18933 rbp tmp-ra.18931 f.18872 e.18873 d.18874 c.18875 b.18876 a.18877)) (nfv.18932 (r15 rdi rsi rdx rcx r8 r9 rbp nfv.18933 a.18877 b.18876 c.18875 d.18874 e.18873 f.18872)) (nfv.18933 (r15 rdi rsi rdx rcx r8 r9 nfv.18932 rbp a.18877 b.18876 c.18875 d.18874 e.18873 f.18872 g.18871)) (tmp.18929 (rbp tmp-ra.18931)) (rdi (r15 rbp rsi rdx rcx r8 r9 nfv.18932 nfv.18933 tmp-ra.18931)) (rsi (r15 rdi rbp rdx rcx r8 r9 nfv.18932 nfv.18933 a.18877 tmp-ra.18931)) (rdx (r15 rdi rsi rbp rcx r8 r9 nfv.18932 nfv.18933 b.18876 a.18877 tmp-ra.18931)) (rcx (r15 rdi rsi rdx rbp r8 r9 nfv.18932 nfv.18933 c.18875 b.18876 a.18877 tmp-ra.18931)) (r8 (r15 rdi rsi rdx rcx rbp r9 nfv.18932 nfv.18933 d.18874 c.18875 b.18876 a.18877 tmp-ra.18931)) (r9 (r15 rdi rsi rdx rcx r8 rbp nfv.18932 nfv.18933 e.18873 d.18874 c.18875 b.18876 a.18877 tmp-ra.18931)) (fv0 (f.18872 e.18873 d.18874 c.18875 b.18876 a.18877 tmp-ra.18931)) (rbp (tmp.18929 r15 rdi rsi rdx rcx r8 r9 nfv.18932 nfv.18933 g.18871 f.18872 e.18873 d.18874 c.18875 b.18876 a.18877 tmp-ra.18931)) (r15 (rbp rdi rsi rdx rcx r8 r9 nfv.18932 nfv.18933)))) (assignment ((tmp-ra.18931 fv1) (nfv.18932 fv2) (nfv.18933 fv3) (a.18877 r15) (b.18876 r14) (c.18875 r13) (d.18874 rdi) (e.18873 r8) (f.18872 r9) (g.18871 rsi) (tmp.18929 r15)))) (begin (set! tmp-ra.18931 r15) (set! a.18877 rdi) (set! b.18876 rsi) (set! c.18875 rdx) (set! d.18874 rcx) (set! e.18873 r8) (set! f.18872 r9) (set! g.18871 fv0) (begin (set! rbp (- rbp 16)) (return-point L.rp.2388 (begin (set! nfv.18933 64) (set! nfv.18932 g.18871) (set! r9 f.18872) (set! r8 e.18873) (set! rcx d.18874) (set! rdx c.18875) (set! rsi b.18876) (set! rdi a.18877) (set! r15 L.rp.2388) (jump L.G.2385 rbp r15 rdi rsi rdx rcx r8 r9 nfv.18932 nfv.18933))) (set! rbp (+ rbp 16))) (set! tmp.18929 rax) (set! rsi tmp.18929) (set! rdi 80) (set! r15 tmp-ra.18931) (jump L.+.2387 rbp r15 rdi rsi))) (define L.G.2385 ((locals ()) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 tmp-ra.18934 rbp) (rsi rdx rcx r8 r9 fv0 fv1 a.18885 tmp-ra.18934 rbp) (rdx rcx r8 r9 fv0 fv1 b.18884 a.18885 tmp-ra.18934 rbp) (rcx r8 r9 fv0 fv1 c.18883 b.18884 a.18885 tmp-ra.18934 rbp) (r8 r9 fv0 fv1 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 rbp) (r9 fv0 fv1 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 rbp) (fv0 fv1 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 rbp) (fv1 g.18879 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 rbp) (h.18878 g.18879 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 rbp) (h.18878 g.18879 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 fv2 rbp) (g.18879 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 fv2 fv1 rbp) (f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 fv2 fv1 fv0 rbp) (e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 fv2 fv1 fv0 r9 rbp) (d.18882 c.18883 b.18884 a.18885 tmp-ra.18934 fv2 fv1 fv0 r9 r8 rbp) (c.18883 b.18884 a.18885 tmp-ra.18934 fv2 fv1 fv0 r9 r8 rcx rbp) (b.18884 a.18885 tmp-ra.18934 fv2 fv1 fv0 r9 r8 rcx rdx rbp) (a.18885 tmp-ra.18934 fv2 fv1 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.18934 fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.18934 (fv2 h.18878 g.18879 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 rbp fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.18885 (fv2 h.18878 g.18879 f.18880 e.18881 d.18882 c.18883 b.18884 rbp tmp-ra.18934 fv1 fv0 r9 r8 rcx rdx rsi)) (b.18884 (fv2 h.18878 g.18879 f.18880 e.18881 d.18882 c.18883 rbp tmp-ra.18934 a.18885 fv1 fv0 r9 r8 rcx rdx)) (c.18883 (fv2 h.18878 g.18879 f.18880 e.18881 d.18882 rbp tmp-ra.18934 a.18885 b.18884 fv1 fv0 r9 r8 rcx)) (d.18882 (fv2 h.18878 g.18879 f.18880 e.18881 rbp tmp-ra.18934 a.18885 b.18884 c.18883 fv1 fv0 r9 r8)) (e.18881 (fv2 h.18878 g.18879 f.18880 rbp tmp-ra.18934 a.18885 b.18884 c.18883 d.18882 fv1 fv0 r9)) (f.18880 (fv2 h.18878 g.18879 rbp tmp-ra.18934 a.18885 b.18884 c.18883 d.18882 e.18881 fv1 fv0)) (g.18879 (fv2 h.18878 rbp tmp-ra.18934 a.18885 b.18884 c.18883 d.18882 e.18881 f.18880 fv1)) (h.18878 (fv2 rbp tmp-ra.18934 a.18885 b.18884 c.18883 d.18882 e.18881 f.18880 g.18879)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.18934)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 fv1 fv2 a.18885 tmp-ra.18934)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 fv1 fv2 b.18884 a.18885 tmp-ra.18934)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 fv1 fv2 c.18883 b.18884 a.18885 tmp-ra.18934)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 fv1 fv2 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 fv1 fv2 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp fv1 fv2 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934)) (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 rbp fv2 g.18879 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 h.18878 g.18879 f.18880 e.18881 d.18882 c.18883 b.18884 a.18885 tmp-ra.18934)) (fv2 (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 rbp tmp-ra.18934 a.18885 b.18884 c.18883 d.18882 e.18881 f.18880 g.18879 h.18878)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0 fv1 fv2)))) (assignment ((tmp-ra.18934 r15) (a.18885 r14) (b.18884 r13) (c.18883 rdi) (d.18882 rsi) (e.18881 r8) (f.18880 r9) (g.18879 rdx) (h.18878 rcx)))) (begin (set! tmp-ra.18934 r15) (set! a.18885 rdi) (set! b.18884 rsi) (set! c.18883 rdx) (set! d.18882 rcx) (set! e.18881 r8) (set! f.18880 r9) (set! g.18879 fv0) (set! h.18878 fv1) (set! fv2 72) (set! fv1 h.18878) (set! fv0 g.18879) (set! r9 f.18880) (set! r8 e.18881) (set! rcx d.18882) (set! rdx c.18883) (set! rsi b.18884) (set! rdi a.18885) (set! r15 tmp-ra.18934) (jump L.H.2386 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))) (define L.H.2386 ((locals ()) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.18935 rbp) (rsi rdx rcx r8 r9 fv0 fv1 fv2 a.18894 tmp-ra.18935 rbp) (rdx rcx r8 r9 fv0 fv1 fv2 a.18894 b.18893 tmp-ra.18935 rbp) (rcx r8 r9 fv0 fv1 fv2 a.18894 b.18893 c.18892 tmp-ra.18935 rbp) (r8 r9 fv0 fv1 fv2 a.18894 b.18893 c.18892 d.18891 tmp-ra.18935 rbp) (r9 fv0 fv1 fv2 a.18894 b.18893 c.18892 d.18891 e.18890 tmp-ra.18935 rbp) (fv0 fv1 fv2 a.18894 b.18893 c.18892 d.18891 e.18890 f.18889 tmp-ra.18935 rbp) (fv1 fv2 a.18894 b.18893 c.18892 d.18891 e.18890 f.18889 g.18888 tmp-ra.18935 rbp) (fv2 a.18894 b.18893 c.18892 d.18891 e.18890 f.18889 g.18888 h.18887 tmp-ra.18935 rbp) (a.18894 b.18893 c.18892 d.18891 e.18890 f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((rax c.18892 d.18891 e.18890 f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((a.18894 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r1.18895 c.18892 d.18891 e.18890 f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((rax d.18891 e.18890 f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((r1.18895 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r2.18896 d.18891 e.18890 f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((rax e.18890 f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((r2.18896 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r3.18897 e.18890 f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((rax f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((r3.18897 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r4.18898 f.18889 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((rax g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((r4.18898 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r5.18899 g.18888 h.18887 j.18886 tmp-ra.18935 rbp) ((rax h.18887 j.18886 tmp-ra.18935 rbp) ((r5.18899 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r6.18900 h.18887 j.18886 tmp-ra.18935 rbp) ((rax j.18886 tmp-ra.18935 rbp) ((r6.18900 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (j.18886 r7.18901 tmp-ra.18935 rbp) (r7.18901 tmp-ra.18935 rsi rbp) (tmp-ra.18935 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18935 (r7.18901 r6.18900 r5.18899 r4.18898 r3.18897 r2.18896 r1.18895 j.18886 h.18887 g.18888 f.18889 e.18890 d.18891 c.18892 b.18893 a.18894 rbp fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.18894 (j.18886 h.18887 g.18888 f.18889 e.18890 d.18891 c.18892 b.18893 rbp tmp-ra.18935 fv2 fv1 fv0 r9 r8 rcx rdx rsi)) (b.18893 (j.18886 h.18887 g.18888 f.18889 e.18890 d.18891 c.18892 rbp tmp-ra.18935 a.18894 fv2 fv1 fv0 r9 r8 rcx rdx)) (c.18892 (r1.18895 j.18886 h.18887 g.18888 f.18889 e.18890 d.18891 rbp tmp-ra.18935 b.18893 a.18894 fv2 fv1 fv0 r9 r8 rcx)) (d.18891 (r2.18896 r1.18895 j.18886 h.18887 g.18888 f.18889 e.18890 rbp tmp-ra.18935 c.18892 b.18893 a.18894 fv2 fv1 fv0 r9 r8)) (e.18890 (r3.18897 r2.18896 r1.18895 j.18886 h.18887 g.18888 f.18889 rbp tmp-ra.18935 d.18891 c.18892 b.18893 a.18894 fv2 fv1 fv0 r9)) (f.18889 (r4.18898 r3.18897 r2.18896 r1.18895 j.18886 h.18887 g.18888 rbp tmp-ra.18935 e.18890 d.18891 c.18892 b.18893 a.18894 fv2 fv1 fv0)) (g.18888 (r5.18899 r4.18898 r3.18897 r2.18896 r1.18895 j.18886 h.18887 rbp tmp-ra.18935 f.18889 e.18890 d.18891 c.18892 b.18893 a.18894 fv2 fv1)) (h.18887 (r6.18900 r5.18899 r4.18898 r3.18897 r2.18896 r1.18895 j.18886 rbp tmp-ra.18935 g.18888 f.18889 e.18890 d.18891 c.18892 b.18893 a.18894 fv2)) (j.18886 (r7.18901 r6.18900 r5.18899 r4.18898 r3.18897 r2.18896 r1.18895 rbp tmp-ra.18935 h.18887 g.18888 f.18889 e.18890 d.18891 c.18892 b.18893 a.18894)) (r1.18895 (rsi rbp tmp-ra.18935 j.18886 h.18887 g.18888 f.18889 e.18890 d.18891 c.18892)) (r2.18896 (rsi rbp tmp-ra.18935 j.18886 h.18887 g.18888 f.18889 e.18890 d.18891)) (r3.18897 (rsi rbp tmp-ra.18935 j.18886 h.18887 g.18888 f.18889 e.18890)) (r4.18898 (rsi rbp tmp-ra.18935 j.18886 h.18887 g.18888 f.18889)) (r5.18899 (rsi rbp tmp-ra.18935 j.18886 h.18887 g.18888)) (r6.18900 (rsi rbp tmp-ra.18935 j.18886 h.18887)) (r7.18901 (rsi rbp tmp-ra.18935 j.18886)) (rdi (r15 rbp rsi tmp-ra.18935)) (rsi (r7.18901 r6.18900 r5.18899 r4.18898 r3.18897 r2.18896 r1.18895 r15 rdi rbp a.18894 tmp-ra.18935)) (rdx (b.18893 a.18894 tmp-ra.18935)) (rcx (c.18892 b.18893 a.18894 tmp-ra.18935)) (r8 (d.18891 c.18892 b.18893 a.18894 tmp-ra.18935)) (r9 (e.18890 d.18891 c.18892 b.18893 a.18894 tmp-ra.18935)) (fv0 (f.18889 e.18890 d.18891 c.18892 b.18893 a.18894 tmp-ra.18935)) (fv1 (g.18888 f.18889 e.18890 d.18891 c.18892 b.18893 a.18894 tmp-ra.18935)) (fv2 (h.18887 g.18888 f.18889 e.18890 d.18891 c.18892 b.18893 a.18894 tmp-ra.18935)) (rbp (r7.18901 r6.18900 r5.18899 r4.18898 r3.18897 r2.18896 r1.18895 r15 rdi rsi j.18886 h.18887 g.18888 f.18889 e.18890 d.18891 c.18892 b.18893 a.18894 tmp-ra.18935)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.18935 fv3) (j.18886 fv0) (h.18887 fv1) (g.18888 fv4) (f.18889 fv5) (e.18890 fv6) (d.18891 fv7) (c.18892 fv8) (a.18894 r15) (b.18893 r14) (r1.18895 r15) (r2.18896 r15) (r3.18897 r15) (r4.18898 r15) (r5.18899 r15) (r6.18900 r15) (r7.18901 r15)))) (begin (set! tmp-ra.18935 r15) (set! a.18894 rdi) (set! b.18893 rsi) (set! c.18892 rdx) (set! d.18891 rcx) (set! e.18890 r8) (set! f.18889 r9) (set! g.18888 fv0) (set! h.18887 fv1) (set! j.18886 fv2) (begin (set! rbp (- rbp 72)) (return-point L.rp.2389 (begin (set! rsi b.18893) (set! rdi a.18894) (set! r15 L.rp.2389) (jump L.+.2387 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r1.18895 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2390 (begin (set! rsi c.18892) (set! rdi r1.18895) (set! r15 L.rp.2390) (jump L.+.2387 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r2.18896 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2391 (begin (set! rsi d.18891) (set! rdi r2.18896) (set! r15 L.rp.2391) (jump L.+.2387 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r3.18897 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2392 (begin (set! rsi e.18890) (set! rdi r3.18897) (set! r15 L.rp.2392) (jump L.+.2387 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r4.18898 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2393 (begin (set! rsi f.18889) (set! rdi r4.18898) (set! r15 L.rp.2393) (jump L.+.2387 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r5.18899 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2394 (begin (set! rsi g.18888) (set! rdi r5.18899) (set! r15 L.rp.2394) (jump L.+.2387 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r6.18900 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2395 (begin (set! rsi h.18887) (set! rdi r6.18900) (set! r15 L.rp.2395) (jump L.+.2387 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r7.18901 rax) (set! rsi j.18886) (set! rdi r7.18901) (set! r15 tmp-ra.18935) (jump L.+.2387 rbp r15 rdi rsi))) (begin (set! tmp-ra.18936 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.18936) (jump L.F.2384 rbp r15 rdi rsi rdx rcx r8 r9 fv0))) (module ((locals ()) (undead-out ((tmp-ra.18969 rbp) (tmp-ra.18969 rsi rbp) (tmp-ra.18969 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.18969 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.18969)) (rsi (r15 rdi rbp tmp-ra.18969)) (rdi (r15 rbp rsi tmp-ra.18969)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.18969 r15)))) (define L.<.2397 ((locals ()) (undead-out ((rdi rsi tmp-ra.18967 rbp) (rsi tmp.18945 tmp-ra.18967 rbp) (tmp.18946 tmp.18945 tmp-ra.18967 rbp) ((((((tmp.18963 tmp.18946 tmp.18945 tmp-ra.18967 rbp) (tmp.18963 tmp.18946 tmp.18945 tmp-ra.18967 rbp)) (tmp.18946 tmp.18945 tmp-ra.18967 rbp)) (tmp.18962 tmp.18946 tmp.18945 tmp-ra.18967 rbp) (tmp.18962 tmp.18946 tmp.18945 tmp-ra.18967 rbp)) (tmp.18946 tmp.18945 tmp-ra.18967 rbp)) ((((((tmp.18965 tmp.18946 tmp.18945 tmp-ra.18967 rbp) (tmp.18965 tmp.18946 tmp.18945 tmp-ra.18967 rbp)) (tmp.18946 tmp.18945 tmp-ra.18967 rbp)) (tmp.18964 tmp.18946 tmp.18945 tmp-ra.18967 rbp) (tmp.18964 tmp.18946 tmp.18945 tmp-ra.18967 rbp)) (tmp.18946 tmp.18945 tmp-ra.18967 rbp)) ((tmp-ra.18967 rbp) ((tmp-ra.18967 rax rbp) (rax rbp)) ((tmp-ra.18967 rax rbp) (rax rbp))) ((tmp-ra.18967 rax rbp) (rax rbp))) ((tmp-ra.18967 rax rbp) (rax rbp))))) (conflicts ((tmp.18962 (rbp tmp-ra.18967 tmp.18945 tmp.18946)) (tmp.18946 (rbp tmp-ra.18967 tmp.18945 tmp.18963 tmp.18962 tmp.18965 tmp.18964)) (tmp.18963 (rbp tmp-ra.18967 tmp.18945 tmp.18946)) (tmp-ra.18967 (tmp.18946 tmp.18945 rbp rsi rdi tmp.18963 tmp.18962 tmp.18965 tmp.18964 rax)) (tmp.18965 (rbp tmp-ra.18967 tmp.18945 tmp.18946)) (tmp.18945 (tmp.18946 rbp tmp-ra.18967 rsi tmp.18963 tmp.18962 tmp.18965 tmp.18964)) (tmp.18964 (rbp tmp-ra.18967 tmp.18945 tmp.18946)) (rax (rbp tmp-ra.18967)) (rbp (tmp.18946 tmp.18945 tmp-ra.18967 tmp.18963 tmp.18962 tmp.18965 tmp.18964 rax)) (rdi (tmp-ra.18967)) (rsi (tmp.18945 tmp-ra.18967)))) (assignment ((tmp-ra.18967 r15) (tmp.18945 r14) (tmp.18946 r13) (tmp.18962 r9) (tmp.18963 r9) (tmp.18965 r9) (tmp.18964 r9)))) (begin (set! tmp-ra.18967 r15) (set! tmp.18945 rdi) (set! tmp.18946 rsi) (if (begin (if (begin (begin (set! tmp.18963 tmp.18946) (set! tmp.18963 (bitwise-and tmp.18963 7))) (= tmp.18963 0)) (set! tmp.18962 14) (set! tmp.18962 6)) (!= tmp.18962 6)) (if (begin (if (begin (begin (set! tmp.18965 tmp.18945) (set! tmp.18965 (bitwise-and tmp.18965 7))) (= tmp.18965 0)) (set! tmp.18964 14) (set! tmp.18964 6)) (!= tmp.18964 6)) (if (< tmp.18945 tmp.18946) (begin (set! rax 14) (jump tmp-ra.18967 rbp rax)) (begin (set! rax 6) (jump tmp-ra.18967 rbp rax))) (begin (set! rax 830) (jump tmp-ra.18967 rbp rax))) (begin (set! rax 830) (jump tmp-ra.18967 rbp rax))))) (define L.swap.2396 ((locals ()) (undead-out ((rdi rsi tmp-ra.18968 rbp) (rsi x.18938 tmp-ra.18968 rbp) (y.18937 x.18938 tmp-ra.18968 rbp) (((((rax y.18937 x.18938 tmp-ra.18968 rbp) ((y.18937 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.18966 y.18937 x.18938 tmp-ra.18968 rbp)) (y.18937 x.18938 tmp-ra.18968 rbp)) ((tmp-ra.18968 rax rbp) (rax rbp)) ((y.18937 tmp-ra.18968 rsi rbp) (tmp-ra.18968 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.18966 (rbp tmp-ra.18968 x.18938 y.18937)) (y.18937 (rbp tmp-ra.18968 x.18938 tmp.18966 rsi)) (x.18938 (y.18937 rbp tmp-ra.18968 rsi tmp.18966)) (tmp-ra.18968 (y.18937 x.18938 rbp tmp.18966 rax rdi rsi)) (rsi (x.18938 r15 rdi rbp tmp-ra.18968 y.18937)) (rbp (y.18937 x.18938 tmp-ra.18968 tmp.18966 rax r15 rdi rsi)) (rdi (r15 rbp rsi tmp-ra.18968)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.18968)))) (assignment ((tmp-ra.18968 fv0) (x.18938 fv1) (y.18937 fv2) (tmp.18966 r15)))) (begin (set! tmp-ra.18968 r15) (set! x.18938 rdi) (set! y.18937 rsi) (if (begin (begin (begin (set! rbp (- rbp 24)) (return-point L.rp.2398 (begin (set! rsi x.18938) (set! rdi y.18937) (set! r15 L.rp.2398) (jump L.<.2397 rbp r15 rdi rsi))) (set! rbp (+ rbp 24))) (set! tmp.18966 rax)) (!= tmp.18966 6)) (begin (set! rax x.18938) (jump tmp-ra.18968 rbp rax)) (begin (set! rsi x.18938) (set! rdi y.18937) (set! r15 tmp-ra.18968) (jump L.swap.2396 rbp r15 rdi rsi))))) (begin (set! tmp-ra.18969 r15) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.18969) (jump L.swap.2396 rbp r15 rdi rsi))) (module ((locals ()) (undead-out ((tmp-ra.19010 rbp) (tmp-ra.19010 rsi rbp) (tmp-ra.19010 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.19010 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.19010)) (rsi (r15 rdi rbp tmp-ra.19010)) (rdi (r15 rbp rsi tmp-ra.19010)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.19010 r15)))) (define L.*.2401 ((locals ()) (undead-out ((rdi rsi tmp-ra.19007 rbp) (rsi tmp.18972 tmp-ra.19007 rbp) (tmp.18973 tmp.18972 tmp-ra.19007 rbp) ((((((tmp.18996 tmp.18973 tmp.18972 tmp-ra.19007 rbp) (tmp.18996 tmp.18973 tmp.18972 tmp-ra.19007 rbp)) (tmp.18973 tmp.18972 tmp-ra.19007 rbp)) (tmp.18995 tmp.18973 tmp.18972 tmp-ra.19007 rbp) (tmp.18995 tmp.18973 tmp.18972 tmp-ra.19007 rbp)) (tmp.18973 tmp.18972 tmp-ra.19007 rbp)) ((((((tmp.18998 tmp.18973 tmp.18972 tmp-ra.19007 rbp) (tmp.18998 tmp.18973 tmp.18972 tmp-ra.19007 rbp)) (tmp.18973 tmp.18972 tmp-ra.19007 rbp)) (tmp.18997 tmp.18973 tmp.18972 tmp-ra.19007 rbp) (tmp.18997 tmp.18973 tmp.18972 tmp-ra.19007 rbp)) (tmp.18973 tmp.18972 tmp-ra.19007 rbp)) ((tmp.18999 tmp.18972 tmp-ra.19007 rbp) (tmp.18972 tmp.18999 tmp-ra.19007 rbp) (tmp.18999 rax tmp-ra.19007 rbp) (tmp-ra.19007 rax rbp) (rax rbp)) ((tmp-ra.19007 rax rbp) (rax rbp))) ((tmp-ra.19007 rax rbp) (rax rbp))))) (conflicts ((tmp.18995 (rbp tmp-ra.19007 tmp.18972 tmp.18973)) (tmp.18973 (rbp tmp-ra.19007 tmp.18972 tmp.18996 tmp.18995 tmp.18998 tmp.18997)) (tmp.18996 (rbp tmp-ra.19007 tmp.18972 tmp.18973)) (tmp-ra.19007 (tmp.18973 tmp.18972 rbp rsi rdi tmp.18996 tmp.18995 tmp.18998 tmp.18997 tmp.18999 rax)) (tmp.18999 (rax rbp tmp-ra.19007 tmp.18972)) (tmp.18998 (rbp tmp-ra.19007 tmp.18972 tmp.18973)) (tmp.18972 (tmp.18973 rbp tmp-ra.19007 rsi tmp.18996 tmp.18995 tmp.18998 tmp.18997 tmp.18999)) (tmp.18997 (rbp tmp-ra.19007 tmp.18972 tmp.18973)) (rax (tmp.18999 rbp tmp-ra.19007)) (rbp (tmp.18973 tmp.18972 tmp-ra.19007 tmp.18996 tmp.18995 tmp.18998 tmp.18997 tmp.18999 rax)) (rdi (tmp-ra.19007)) (rsi (tmp.18972 tmp-ra.19007)))) (assignment ((tmp-ra.19007 r15) (tmp.18972 r14) (tmp.18973 r13) (tmp.18995 r9) (tmp.18996 r9) (tmp.18999 r13) (tmp.18998 r9) (tmp.18997 r9)))) (begin (set! tmp-ra.19007 r15) (set! tmp.18972 rdi) (set! tmp.18973 rsi) (if (begin (if (begin (begin (set! tmp.18996 tmp.18973) (set! tmp.18996 (bitwise-and tmp.18996 7))) (= tmp.18996 0)) (set! tmp.18995 14) (set! tmp.18995 6)) (!= tmp.18995 6)) (if (begin (if (begin (begin (set! tmp.18998 tmp.18972) (set! tmp.18998 (bitwise-and tmp.18998 7))) (= tmp.18998 0)) (set! tmp.18997 14) (set! tmp.18997 6)) (!= tmp.18997 6)) (begin (set! tmp.18999 tmp.18973) (set! tmp.18999 (arithmetic-shift-right tmp.18999 3)) (set! rax tmp.18972) (set! rax (* rax tmp.18999)) (jump tmp-ra.19007 rbp rax)) (begin (set! rax 62) (jump tmp-ra.19007 rbp rax))) (begin (set! rax 62) (jump tmp-ra.19007 rbp rax))))) (define L.-.2400 ((locals ()) (undead-out ((rdi rsi tmp-ra.19008 rbp) (rsi tmp.18976 tmp-ra.19008 rbp) (tmp.18976 tmp.18977 tmp-ra.19008 rbp) ((((((tmp.19001 tmp.18976 tmp.18977 tmp-ra.19008 rbp) (tmp.19001 tmp.18976 tmp.18977 tmp-ra.19008 rbp)) (tmp.18976 tmp.18977 tmp-ra.19008 rbp)) (tmp.19000 tmp.18976 tmp.18977 tmp-ra.19008 rbp) (tmp.19000 tmp.18976 tmp.18977 tmp-ra.19008 rbp)) (tmp.18976 tmp.18977 tmp-ra.19008 rbp)) ((((((tmp.19003 tmp.18976 tmp.18977 tmp-ra.19008 rbp) (tmp.19003 tmp.18976 tmp.18977 tmp-ra.19008 rbp)) (tmp.18976 tmp.18977 tmp-ra.19008 rbp)) (tmp.19002 tmp.18976 tmp.18977 tmp-ra.19008 rbp) (tmp.19002 tmp.18976 tmp.18977 tmp-ra.19008 rbp)) (tmp.18976 tmp.18977 tmp-ra.19008 rbp)) ((tmp.18977 rax tmp-ra.19008 rbp) (tmp-ra.19008 rax rbp) (rax rbp)) ((tmp-ra.19008 rax rbp) (rax rbp))) ((tmp-ra.19008 rax rbp) (rax rbp))))) (conflicts ((tmp.19000 (rbp tmp-ra.19008 tmp.18977 tmp.18976)) (tmp.18977 (rbp tmp-ra.19008 tmp.18976 tmp.19001 tmp.19000 tmp.19003 tmp.19002 rax)) (tmp.19001 (rbp tmp-ra.19008 tmp.18977 tmp.18976)) (tmp-ra.19008 (tmp.18977 tmp.18976 rbp rsi rdi tmp.19001 tmp.19000 tmp.19003 tmp.19002 rax)) (tmp.19003 (rbp tmp-ra.19008 tmp.18977 tmp.18976)) (tmp.18976 (tmp.18977 rbp tmp-ra.19008 rsi tmp.19001 tmp.19000 tmp.19003 tmp.19002)) (tmp.19002 (rbp tmp-ra.19008 tmp.18977 tmp.18976)) (rax (tmp.18977 rbp tmp-ra.19008)) (rbp (tmp.18977 tmp.18976 tmp-ra.19008 tmp.19001 tmp.19000 tmp.19003 tmp.19002 rax)) (rdi (tmp-ra.19008)) (rsi (tmp.18976 tmp-ra.19008)))) (assignment ((tmp-ra.19008 r15) (tmp.18977 r14) (tmp.18976 r13) (tmp.19000 r9) (tmp.19001 r9) (tmp.19003 r9) (tmp.19002 r9)))) (begin (set! tmp-ra.19008 r15) (set! tmp.18976 rdi) (set! tmp.18977 rsi) (if (begin (if (begin (begin (set! tmp.19001 tmp.18977) (set! tmp.19001 (bitwise-and tmp.19001 7))) (= tmp.19001 0)) (set! tmp.19000 14) (set! tmp.19000 6)) (!= tmp.19000 6)) (if (begin (if (begin (begin (set! tmp.19003 tmp.18976) (set! tmp.19003 (bitwise-and tmp.19003 7))) (= tmp.19003 0)) (set! tmp.19002 14) (set! tmp.19002 6)) (!= tmp.19002 6)) (begin (set! rax tmp.18976) (set! rax (- rax tmp.18977)) (jump tmp-ra.19008 rbp rax)) (begin (set! rax 574) (jump tmp-ra.19008 rbp rax))) (begin (set! rax 574) (jump tmp-ra.19008 rbp rax))))) (define L.fact_loop.2399 ((locals ()) (undead-out ((rdi rsi tmp-ra.19009 rbp) (rsi n.18971 tmp-ra.19009 rbp) (n.18971 acc.18970 tmp-ra.19009 rbp) ((((n.18971 acc.18970 tmp-ra.19009 rbp) (tmp.19004 n.18971 acc.18970 tmp-ra.19009 rbp) (tmp.19004 n.18971 acc.18970 tmp-ra.19009 rbp)) (n.18971 acc.18970 tmp-ra.19009 rbp)) ((tmp-ra.19009 rax rbp) (rax rbp)) (((rax acc.18970 n.18971 tmp-ra.19009 rbp) ((n.18971 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc.18970 n.18971 tmp.19005 tmp-ra.19009 rbp) ((rax tmp.19005 tmp-ra.19009 rbp) ((acc.18970 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.19006 tmp.19005 tmp-ra.19009 rbp) (tmp.19005 tmp-ra.19009 rsi rbp) (tmp-ra.19009 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.19004 (rbp tmp-ra.19009 acc.18970 n.18971)) (n.18971 (acc.18970 rbp tmp-ra.19009 tmp.19004 tmp.19005 rsi)) (acc.18970 (rbp tmp-ra.19009 n.18971 tmp.19004 rsi tmp.19005)) (tmp-ra.19009 (acc.18970 n.18971 rbp tmp.19004 rax rdi rsi tmp.19006 tmp.19005)) (tmp.19006 (rbp tmp-ra.19009 tmp.19005)) (tmp.19005 (rsi tmp.19006 rbp tmp-ra.19009 n.18971 acc.18970)) (rsi (tmp-ra.19009 tmp.19005 acc.18970 r15 rdi rbp n.18971)) (rbp (acc.18970 n.18971 tmp-ra.19009 tmp.19004 rax tmp.19006 tmp.19005 r15 rdi rsi)) (rdi (tmp-ra.19009 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.19009)))) (assignment ((tmp-ra.19009 fv0) (n.18971 fv1) (acc.18970 fv2) (tmp.19005 fv3) (tmp.19004 r15) (tmp.19006 r15)))) (begin (set! tmp-ra.19009 r15) (set! n.18971 rdi) (set! acc.18970 rsi) (if (begin (if (= n.18971 0) (set! tmp.19004 14) (set! tmp.19004 6)) (!= tmp.19004 6)) (begin (set! rax acc.18970) (jump tmp-ra.19009 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2402 (begin (set! rsi 8) (set! rdi n.18971) (set! r15 L.rp.2402) (jump L.-.2400 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! tmp.19005 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2403 (begin (set! rsi n.18971) (set! rdi acc.18970) (set! r15 L.rp.2403) (jump L.*.2401 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! tmp.19006 rax) (set! rsi tmp.19006) (set! rdi tmp.19005) (set! r15 tmp-ra.19009) (jump L.fact_loop.2399 rbp r15 rdi rsi))))) (begin (set! tmp-ra.19010 r15) (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.19010) (jump L.fact_loop.2399 rbp r15 rdi rsi))) (module ((locals ()) (undead-out ((tmp-ra.19050 rbp) (tmp-ra.19050 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.19050 (rdi rbp)) (rbp (r15 rdi tmp-ra.19050)) (rdi (r15 rbp tmp-ra.19050)) (r15 (rbp rdi)))) (assignment ((tmp-ra.19050 r15)))) (define L.*.2406 ((locals ()) (undead-out ((rdi rsi tmp-ra.19047 rbp) (rsi tmp.19012 tmp-ra.19047 rbp) (tmp.19013 tmp.19012 tmp-ra.19047 rbp) ((((((tmp.19036 tmp.19013 tmp.19012 tmp-ra.19047 rbp) (tmp.19036 tmp.19013 tmp.19012 tmp-ra.19047 rbp)) (tmp.19013 tmp.19012 tmp-ra.19047 rbp)) (tmp.19035 tmp.19013 tmp.19012 tmp-ra.19047 rbp) (tmp.19035 tmp.19013 tmp.19012 tmp-ra.19047 rbp)) (tmp.19013 tmp.19012 tmp-ra.19047 rbp)) ((((((tmp.19038 tmp.19013 tmp.19012 tmp-ra.19047 rbp) (tmp.19038 tmp.19013 tmp.19012 tmp-ra.19047 rbp)) (tmp.19013 tmp.19012 tmp-ra.19047 rbp)) (tmp.19037 tmp.19013 tmp.19012 tmp-ra.19047 rbp) (tmp.19037 tmp.19013 tmp.19012 tmp-ra.19047 rbp)) (tmp.19013 tmp.19012 tmp-ra.19047 rbp)) ((tmp.19039 tmp.19012 tmp-ra.19047 rbp) (tmp.19012 tmp.19039 tmp-ra.19047 rbp) (tmp.19039 rax tmp-ra.19047 rbp) (tmp-ra.19047 rax rbp) (rax rbp)) ((tmp-ra.19047 rax rbp) (rax rbp))) ((tmp-ra.19047 rax rbp) (rax rbp))))) (conflicts ((tmp.19035 (rbp tmp-ra.19047 tmp.19012 tmp.19013)) (tmp.19013 (rbp tmp-ra.19047 tmp.19012 tmp.19036 tmp.19035 tmp.19038 tmp.19037)) (tmp.19036 (rbp tmp-ra.19047 tmp.19012 tmp.19013)) (tmp-ra.19047 (tmp.19013 tmp.19012 rbp rsi rdi tmp.19036 tmp.19035 tmp.19038 tmp.19037 tmp.19039 rax)) (tmp.19039 (rax rbp tmp-ra.19047 tmp.19012)) (tmp.19038 (rbp tmp-ra.19047 tmp.19012 tmp.19013)) (tmp.19012 (tmp.19013 rbp tmp-ra.19047 rsi tmp.19036 tmp.19035 tmp.19038 tmp.19037 tmp.19039)) (tmp.19037 (rbp tmp-ra.19047 tmp.19012 tmp.19013)) (rax (tmp.19039 rbp tmp-ra.19047)) (rbp (tmp.19013 tmp.19012 tmp-ra.19047 tmp.19036 tmp.19035 tmp.19038 tmp.19037 tmp.19039 rax)) (rdi (tmp-ra.19047)) (rsi (tmp.19012 tmp-ra.19047)))) (assignment ((tmp-ra.19047 r15) (tmp.19012 r14) (tmp.19013 r13) (tmp.19035 r9) (tmp.19036 r9) (tmp.19039 r13) (tmp.19038 r9) (tmp.19037 r9)))) (begin (set! tmp-ra.19047 r15) (set! tmp.19012 rdi) (set! tmp.19013 rsi) (if (begin (if (begin (begin (set! tmp.19036 tmp.19013) (set! tmp.19036 (bitwise-and tmp.19036 7))) (= tmp.19036 0)) (set! tmp.19035 14) (set! tmp.19035 6)) (!= tmp.19035 6)) (if (begin (if (begin (begin (set! tmp.19038 tmp.19012) (set! tmp.19038 (bitwise-and tmp.19038 7))) (= tmp.19038 0)) (set! tmp.19037 14) (set! tmp.19037 6)) (!= tmp.19037 6)) (begin (set! tmp.19039 tmp.19013) (set! tmp.19039 (arithmetic-shift-right tmp.19039 3)) (set! rax tmp.19012) (set! rax (* rax tmp.19039)) (jump tmp-ra.19047 rbp rax)) (begin (set! rax 62) (jump tmp-ra.19047 rbp rax))) (begin (set! rax 62) (jump tmp-ra.19047 rbp rax))))) (define L.-.2405 ((locals ()) (undead-out ((rdi rsi tmp-ra.19048 rbp) (rsi tmp.19016 tmp-ra.19048 rbp) (tmp.19016 tmp.19017 tmp-ra.19048 rbp) ((((((tmp.19041 tmp.19016 tmp.19017 tmp-ra.19048 rbp) (tmp.19041 tmp.19016 tmp.19017 tmp-ra.19048 rbp)) (tmp.19016 tmp.19017 tmp-ra.19048 rbp)) (tmp.19040 tmp.19016 tmp.19017 tmp-ra.19048 rbp) (tmp.19040 tmp.19016 tmp.19017 tmp-ra.19048 rbp)) (tmp.19016 tmp.19017 tmp-ra.19048 rbp)) ((((((tmp.19043 tmp.19016 tmp.19017 tmp-ra.19048 rbp) (tmp.19043 tmp.19016 tmp.19017 tmp-ra.19048 rbp)) (tmp.19016 tmp.19017 tmp-ra.19048 rbp)) (tmp.19042 tmp.19016 tmp.19017 tmp-ra.19048 rbp) (tmp.19042 tmp.19016 tmp.19017 tmp-ra.19048 rbp)) (tmp.19016 tmp.19017 tmp-ra.19048 rbp)) ((tmp.19017 rax tmp-ra.19048 rbp) (tmp-ra.19048 rax rbp) (rax rbp)) ((tmp-ra.19048 rax rbp) (rax rbp))) ((tmp-ra.19048 rax rbp) (rax rbp))))) (conflicts ((tmp.19040 (rbp tmp-ra.19048 tmp.19017 tmp.19016)) (tmp.19017 (rbp tmp-ra.19048 tmp.19016 tmp.19041 tmp.19040 tmp.19043 tmp.19042 rax)) (tmp.19041 (rbp tmp-ra.19048 tmp.19017 tmp.19016)) (tmp-ra.19048 (tmp.19017 tmp.19016 rbp rsi rdi tmp.19041 tmp.19040 tmp.19043 tmp.19042 rax)) (tmp.19043 (rbp tmp-ra.19048 tmp.19017 tmp.19016)) (tmp.19016 (tmp.19017 rbp tmp-ra.19048 rsi tmp.19041 tmp.19040 tmp.19043 tmp.19042)) (tmp.19042 (rbp tmp-ra.19048 tmp.19017 tmp.19016)) (rax (tmp.19017 rbp tmp-ra.19048)) (rbp (tmp.19017 tmp.19016 tmp-ra.19048 tmp.19041 tmp.19040 tmp.19043 tmp.19042 rax)) (rdi (tmp-ra.19048)) (rsi (tmp.19016 tmp-ra.19048)))) (assignment ((tmp-ra.19048 r15) (tmp.19017 r14) (tmp.19016 r13) (tmp.19040 r9) (tmp.19041 r9) (tmp.19043 r9) (tmp.19042 r9)))) (begin (set! tmp-ra.19048 r15) (set! tmp.19016 rdi) (set! tmp.19017 rsi) (if (begin (if (begin (begin (set! tmp.19041 tmp.19017) (set! tmp.19041 (bitwise-and tmp.19041 7))) (= tmp.19041 0)) (set! tmp.19040 14) (set! tmp.19040 6)) (!= tmp.19040 6)) (if (begin (if (begin (begin (set! tmp.19043 tmp.19016) (set! tmp.19043 (bitwise-and tmp.19043 7))) (= tmp.19043 0)) (set! tmp.19042 14) (set! tmp.19042 6)) (!= tmp.19042 6)) (begin (set! rax tmp.19016) (set! rax (- rax tmp.19017)) (jump tmp-ra.19048 rbp rax)) (begin (set! rax 574) (jump tmp-ra.19048 rbp rax))) (begin (set! rax 574) (jump tmp-ra.19048 rbp rax))))) (define L.fact.2404 ((locals ()) (undead-out ((rdi tmp-ra.19049 rbp) (x.19011 tmp-ra.19049 rbp) ((((x.19011 tmp-ra.19049 rbp) (tmp.19044 x.19011 tmp-ra.19049 rbp) (tmp.19044 x.19011 tmp-ra.19049 rbp)) (x.19011 tmp-ra.19049 rbp)) ((tmp-ra.19049 rax rbp) (rax rbp)) (((rax x.19011 tmp-ra.19049 rbp) ((x.19011 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.19046 x.19011 tmp-ra.19049 rbp) ((rax x.19011 tmp-ra.19049 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (tmp.19045 x.19011 tmp-ra.19049 rbp) (x.19011 tmp-ra.19049 rsi rbp) (tmp-ra.19049 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.19044 (rbp tmp-ra.19049 x.19011)) (x.19011 (rbp tmp-ra.19049 tmp.19044 tmp.19045 tmp.19046 rsi)) (tmp-ra.19049 (x.19011 rbp tmp.19044 rax rdi rsi tmp.19045 tmp.19046)) (tmp.19045 (rbp tmp-ra.19049 x.19011)) (tmp.19046 (rbp tmp-ra.19049 x.19011)) (rsi (tmp-ra.19049 r15 rdi rbp x.19011)) (rbp (x.19011 tmp-ra.19049 tmp.19044 rax tmp.19045 tmp.19046 r15 rdi rsi)) (rdi (tmp-ra.19049 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.19049)))) (assignment ((tmp-ra.19049 fv0) (x.19011 fv1) (tmp.19044 r15) (tmp.19045 r15) (tmp.19046 r15)))) (begin (set! tmp-ra.19049 r15) (set! x.19011 rdi) (if (begin (if (= x.19011 0) (set! tmp.19044 14) (set! tmp.19044 6)) (!= tmp.19044 6)) (begin (set! rax 8) (jump tmp-ra.19049 rbp rax)) (begin (begin (set! rbp (- rbp 16)) (return-point L.rp.2407 (begin (set! rsi 8) (set! rdi x.19011) (set! r15 L.rp.2407) (jump L.-.2405 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.19046 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2408 (begin (set! rdi tmp.19046) (set! r15 L.rp.2408) (jump L.fact.2404 rbp r15 rdi))) (set! rbp (+ rbp 16))) (set! tmp.19045 rax) (set! rsi tmp.19045) (set! rdi x.19011) (set! r15 tmp-ra.19049) (jump L.*.2406 rbp r15 rdi rsi))))) (begin (set! tmp-ra.19050 r15) (set! rdi 40) (set! r15 tmp-ra.19050) (jump L.fact.2404 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.19087 rbp) (tmp-ra.19087 rdx rbp) (tmp-ra.19087 rdx rsi rbp) (tmp-ra.19087 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.19087 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.19087)) (rdx (r15 rdi rsi rbp tmp-ra.19087)) (rsi (r15 rdi rbp rdx tmp-ra.19087)) (rdi (r15 rbp rsi rdx tmp-ra.19087)) (r15 (rbp rdi rsi rdx)))) (assignment ((tmp-ra.19087 r15)))) (define L.+.2410 ((locals ()) (undead-out ((rdi rsi tmp-ra.19085 rbp) (rsi tmp.19058 tmp-ra.19085 rbp) (tmp.19058 tmp.19059 tmp-ra.19085 rbp) ((((((tmp.19080 tmp.19058 tmp.19059 tmp-ra.19085 rbp) (tmp.19080 tmp.19058 tmp.19059 tmp-ra.19085 rbp)) (tmp.19058 tmp.19059 tmp-ra.19085 rbp)) (tmp.19079 tmp.19058 tmp.19059 tmp-ra.19085 rbp) (tmp.19079 tmp.19058 tmp.19059 tmp-ra.19085 rbp)) (tmp.19058 tmp.19059 tmp-ra.19085 rbp)) ((((((tmp.19082 tmp.19058 tmp.19059 tmp-ra.19085 rbp) (tmp.19082 tmp.19058 tmp.19059 tmp-ra.19085 rbp)) (tmp.19058 tmp.19059 tmp-ra.19085 rbp)) (tmp.19081 tmp.19058 tmp.19059 tmp-ra.19085 rbp) (tmp.19081 tmp.19058 tmp.19059 tmp-ra.19085 rbp)) (tmp.19058 tmp.19059 tmp-ra.19085 rbp)) ((tmp.19059 rax tmp-ra.19085 rbp) (tmp-ra.19085 rax rbp) (rax rbp)) ((tmp-ra.19085 rax rbp) (rax rbp))) ((tmp-ra.19085 rax rbp) (rax rbp))))) (conflicts ((tmp.19079 (rbp tmp-ra.19085 tmp.19059 tmp.19058)) (tmp.19059 (rbp tmp-ra.19085 tmp.19058 tmp.19080 tmp.19079 tmp.19082 tmp.19081 rax)) (tmp.19080 (rbp tmp-ra.19085 tmp.19059 tmp.19058)) (tmp-ra.19085 (tmp.19059 tmp.19058 rbp rsi rdi tmp.19080 tmp.19079 tmp.19082 tmp.19081 rax)) (tmp.19082 (rbp tmp-ra.19085 tmp.19059 tmp.19058)) (tmp.19058 (tmp.19059 rbp tmp-ra.19085 rsi tmp.19080 tmp.19079 tmp.19082 tmp.19081)) (tmp.19081 (rbp tmp-ra.19085 tmp.19059 tmp.19058)) (rax (tmp.19059 rbp tmp-ra.19085)) (rbp (tmp.19059 tmp.19058 tmp-ra.19085 tmp.19080 tmp.19079 tmp.19082 tmp.19081 rax)) (rdi (tmp-ra.19085)) (rsi (tmp.19058 tmp-ra.19085)))) (assignment ((tmp-ra.19085 r15) (tmp.19059 r14) (tmp.19058 r13) (tmp.19079 r9) (tmp.19080 r9) (tmp.19082 r9) (tmp.19081 r9)))) (begin (set! tmp-ra.19085 r15) (set! tmp.19058 rdi) (set! tmp.19059 rsi) (if (begin (if (begin (begin (set! tmp.19080 tmp.19059) (set! tmp.19080 (bitwise-and tmp.19080 7))) (= tmp.19080 0)) (set! tmp.19079 14) (set! tmp.19079 6)) (!= tmp.19079 6)) (if (begin (if (begin (begin (set! tmp.19082 tmp.19058) (set! tmp.19082 (bitwise-and tmp.19082 7))) (= tmp.19082 0)) (set! tmp.19081 14) (set! tmp.19081 6)) (!= tmp.19081 6)) (begin (set! rax tmp.19058) (set! rax (+ rax tmp.19059)) (jump tmp-ra.19085 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19085 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19085 rbp rax))))) (define L.fib_loop.2409 ((locals ()) (undead-out ((rdi rsi rdx tmp-ra.19086 rbp) (rsi rdx n.19053 tmp-ra.19086 rbp) (rdx n.19053 acc1.19052 tmp-ra.19086 rbp) (acc2.19051 n.19053 acc1.19052 tmp-ra.19086 rbp) ((((acc2.19051 n.19053 acc1.19052 tmp-ra.19086 rbp) (tmp.19083 acc2.19051 n.19053 acc1.19052 tmp-ra.19086 rbp) (tmp.19083 acc2.19051 n.19053 acc1.19052 tmp-ra.19086 rbp)) (acc2.19051 n.19053 acc1.19052 tmp-ra.19086 rbp)) ((tmp-ra.19086 rax rbp) (rax rbp)) ((((acc1.19052 n.19053 acc2.19051 tmp-ra.19086 rbp) (tmp.19084 acc1.19052 n.19053 acc2.19051 tmp-ra.19086 rbp) (tmp.19084 acc1.19052 n.19053 acc2.19051 tmp-ra.19086 rbp)) (acc1.19052 n.19053 acc2.19051 tmp-ra.19086 rbp)) ((tmp-ra.19086 rax rbp) (rax rbp)) (((rax acc1.19052 acc2.19051 tmp-ra.19086 rbp) ((n.19053 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.19052 acc2.19051 new-n.19054 tmp-ra.19086 rbp) ((rax acc2.19051 new-n.19054 tmp-ra.19086 rbp) ((acc1.19052 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.19055 acc2.19051 new-n.19054 tmp-ra.19086 rbp) (acc2.19051 new-n.19054 tmp-ra.19086 rdx rbp) (new-n.19054 tmp-ra.19086 rdx rsi rbp) (tmp-ra.19086 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (conflicts ((tmp.19083 (rbp tmp-ra.19086 acc1.19052 n.19053 acc2.19051)) (n.19053 (acc2.19051 acc1.19052 rbp tmp-ra.19086 rdx tmp.19083 tmp.19084 rsi)) (acc1.19052 (acc2.19051 rbp tmp-ra.19086 n.19053 rdx tmp.19083 tmp.19084 rsi new-n.19054)) (tmp-ra.19086 (acc2.19051 acc1.19052 n.19053 rbp tmp.19083 tmp.19084 rax rdi rsi rdx new-acc2.19055 new-n.19054)) (new-n.19054 (rsi rdx new-acc2.19055 rbp tmp-ra.19086 acc2.19051 acc1.19052)) (new-acc2.19055 (rbp tmp-ra.19086 new-n.19054 acc2.19051)) (acc2.19051 (rbp tmp-ra.19086 acc1.19052 n.19053 tmp.19083 tmp.19084 rdx new-acc2.19055 new-n.19054)) (tmp.19084 (rbp tmp-ra.19086 acc2.19051 n.19053 acc1.19052)) (rsi (rdx tmp-ra.19086 new-n.19054 acc1.19052 r15 rdi rbp n.19053)) (rbp (acc2.19051 acc1.19052 n.19053 tmp-ra.19086 tmp.19083 tmp.19084 rax rdx new-acc2.19055 new-n.19054 r15 rdi rsi)) (rdi (rdx tmp-ra.19086 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.19052 n.19053 r15 rdi rsi rbp tmp-ra.19086 new-n.19054 acc2.19051)) (rax (rbp tmp-ra.19086)))) (assignment ((tmp-ra.19086 fv0) (acc2.19051 fv1) (acc1.19052 fv2) (new-n.19054 fv3) (n.19053 r15) (tmp.19083 r14) (tmp.19084 r14) (new-acc2.19055 r15)))) (begin (set! tmp-ra.19086 r15) (set! n.19053 rdi) (set! acc1.19052 rsi) (set! acc2.19051 rdx) (if (begin (if (= n.19053 0) (set! tmp.19083 14) (set! tmp.19083 6)) (!= tmp.19083 6)) (begin (set! rax acc1.19052) (jump tmp-ra.19086 rbp rax)) (if (begin (if (= n.19053 8) (set! tmp.19084 14) (set! tmp.19084 6)) (!= tmp.19084 6)) (begin (set! rax acc2.19051) (jump tmp-ra.19086 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2411 (begin (set! rsi -8) (set! rdi n.19053) (set! r15 L.rp.2411) (jump L.+.2410 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-n.19054 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2412 (begin (set! rsi acc2.19051) (set! rdi acc1.19052) (set! r15 L.rp.2412) (jump L.+.2410 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-acc2.19055 rax) (set! rdx new-acc2.19055) (set! rsi acc2.19051) (set! rdi new-n.19054) (set! r15 tmp-ra.19086) (jump L.fib_loop.2409 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.19087 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.19087) (jump L.fib_loop.2409 rbp r15 rdi rsi rdx))) (module ((locals ()) (undead-out ((tmp-ra.19124 rbp) (tmp-ra.19124 rdx rbp) (tmp-ra.19124 rdx rsi rbp) (tmp-ra.19124 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.19124 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.19124)) (rdx (r15 rdi rsi rbp tmp-ra.19124)) (rsi (r15 rdi rbp rdx tmp-ra.19124)) (rdi (r15 rbp rsi rdx tmp-ra.19124)) (r15 (rbp rdi rsi rdx)))) (assignment ((tmp-ra.19124 r15)))) (define L.+.2414 ((locals ()) (undead-out ((rdi rsi tmp-ra.19122 rbp) (rsi tmp.19095 tmp-ra.19122 rbp) (tmp.19095 tmp.19096 tmp-ra.19122 rbp) ((((((tmp.19117 tmp.19095 tmp.19096 tmp-ra.19122 rbp) (tmp.19117 tmp.19095 tmp.19096 tmp-ra.19122 rbp)) (tmp.19095 tmp.19096 tmp-ra.19122 rbp)) (tmp.19116 tmp.19095 tmp.19096 tmp-ra.19122 rbp) (tmp.19116 tmp.19095 tmp.19096 tmp-ra.19122 rbp)) (tmp.19095 tmp.19096 tmp-ra.19122 rbp)) ((((((tmp.19119 tmp.19095 tmp.19096 tmp-ra.19122 rbp) (tmp.19119 tmp.19095 tmp.19096 tmp-ra.19122 rbp)) (tmp.19095 tmp.19096 tmp-ra.19122 rbp)) (tmp.19118 tmp.19095 tmp.19096 tmp-ra.19122 rbp) (tmp.19118 tmp.19095 tmp.19096 tmp-ra.19122 rbp)) (tmp.19095 tmp.19096 tmp-ra.19122 rbp)) ((tmp.19096 rax tmp-ra.19122 rbp) (tmp-ra.19122 rax rbp) (rax rbp)) ((tmp-ra.19122 rax rbp) (rax rbp))) ((tmp-ra.19122 rax rbp) (rax rbp))))) (conflicts ((tmp.19116 (rbp tmp-ra.19122 tmp.19096 tmp.19095)) (tmp.19096 (rbp tmp-ra.19122 tmp.19095 tmp.19117 tmp.19116 tmp.19119 tmp.19118 rax)) (tmp.19117 (rbp tmp-ra.19122 tmp.19096 tmp.19095)) (tmp-ra.19122 (tmp.19096 tmp.19095 rbp rsi rdi tmp.19117 tmp.19116 tmp.19119 tmp.19118 rax)) (tmp.19119 (rbp tmp-ra.19122 tmp.19096 tmp.19095)) (tmp.19095 (tmp.19096 rbp tmp-ra.19122 rsi tmp.19117 tmp.19116 tmp.19119 tmp.19118)) (tmp.19118 (rbp tmp-ra.19122 tmp.19096 tmp.19095)) (rax (tmp.19096 rbp tmp-ra.19122)) (rbp (tmp.19096 tmp.19095 tmp-ra.19122 tmp.19117 tmp.19116 tmp.19119 tmp.19118 rax)) (rdi (tmp-ra.19122)) (rsi (tmp.19095 tmp-ra.19122)))) (assignment ((tmp-ra.19122 r15) (tmp.19096 r14) (tmp.19095 r13) (tmp.19116 r9) (tmp.19117 r9) (tmp.19119 r9) (tmp.19118 r9)))) (begin (set! tmp-ra.19122 r15) (set! tmp.19095 rdi) (set! tmp.19096 rsi) (if (begin (if (begin (begin (set! tmp.19117 tmp.19096) (set! tmp.19117 (bitwise-and tmp.19117 7))) (= tmp.19117 0)) (set! tmp.19116 14) (set! tmp.19116 6)) (!= tmp.19116 6)) (if (begin (if (begin (begin (set! tmp.19119 tmp.19095) (set! tmp.19119 (bitwise-and tmp.19119 7))) (= tmp.19119 0)) (set! tmp.19118 14) (set! tmp.19118 6)) (!= tmp.19118 6)) (begin (set! rax tmp.19095) (set! rax (+ rax tmp.19096)) (jump tmp-ra.19122 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19122 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19122 rbp rax))))) (define L.fib_loop.2413 ((locals ()) (undead-out ((rdi rsi rdx tmp-ra.19123 rbp) (rsi rdx n.19090 tmp-ra.19123 rbp) (rdx n.19090 acc1.19089 tmp-ra.19123 rbp) (acc2.19088 n.19090 acc1.19089 tmp-ra.19123 rbp) ((((acc2.19088 n.19090 acc1.19089 tmp-ra.19123 rbp) (tmp.19120 acc2.19088 n.19090 acc1.19089 tmp-ra.19123 rbp) (tmp.19120 acc2.19088 n.19090 acc1.19089 tmp-ra.19123 rbp)) (acc2.19088 n.19090 acc1.19089 tmp-ra.19123 rbp)) ((tmp-ra.19123 rax rbp) (rax rbp)) ((((acc1.19089 n.19090 acc2.19088 tmp-ra.19123 rbp) (tmp.19121 acc1.19089 n.19090 acc2.19088 tmp-ra.19123 rbp) (tmp.19121 acc1.19089 n.19090 acc2.19088 tmp-ra.19123 rbp)) (acc1.19089 n.19090 acc2.19088 tmp-ra.19123 rbp)) ((tmp-ra.19123 rax rbp) (rax rbp)) (((rax acc1.19089 acc2.19088 tmp-ra.19123 rbp) ((n.19090 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.19089 acc2.19088 new-n.19091 tmp-ra.19123 rbp) ((rax acc2.19088 new-n.19091 tmp-ra.19123 rbp) ((acc1.19089 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.19092 acc2.19088 new-n.19091 tmp-ra.19123 rbp) (acc2.19088 new-n.19091 tmp-ra.19123 rdx rbp) (new-n.19091 tmp-ra.19123 rdx rsi rbp) (tmp-ra.19123 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (conflicts ((tmp.19120 (rbp tmp-ra.19123 acc1.19089 n.19090 acc2.19088)) (n.19090 (acc2.19088 acc1.19089 rbp tmp-ra.19123 rdx tmp.19120 tmp.19121 rsi)) (acc1.19089 (acc2.19088 rbp tmp-ra.19123 n.19090 rdx tmp.19120 tmp.19121 rsi new-n.19091)) (tmp-ra.19123 (acc2.19088 acc1.19089 n.19090 rbp tmp.19120 tmp.19121 rax rdi rsi rdx new-acc2.19092 new-n.19091)) (new-n.19091 (rsi rdx new-acc2.19092 rbp tmp-ra.19123 acc2.19088 acc1.19089)) (new-acc2.19092 (rbp tmp-ra.19123 new-n.19091 acc2.19088)) (acc2.19088 (rbp tmp-ra.19123 acc1.19089 n.19090 tmp.19120 tmp.19121 rdx new-acc2.19092 new-n.19091)) (tmp.19121 (rbp tmp-ra.19123 acc2.19088 n.19090 acc1.19089)) (rsi (rdx tmp-ra.19123 new-n.19091 acc1.19089 r15 rdi rbp n.19090)) (rbp (acc2.19088 acc1.19089 n.19090 tmp-ra.19123 tmp.19120 tmp.19121 rax rdx new-acc2.19092 new-n.19091 r15 rdi rsi)) (rdi (rdx tmp-ra.19123 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.19089 n.19090 r15 rdi rsi rbp tmp-ra.19123 new-n.19091 acc2.19088)) (rax (rbp tmp-ra.19123)))) (assignment ((tmp-ra.19123 fv0) (acc2.19088 fv1) (acc1.19089 fv2) (new-n.19091 fv3) (n.19090 r15) (tmp.19120 r14) (tmp.19121 r14) (new-acc2.19092 r15)))) (begin (set! tmp-ra.19123 r15) (set! n.19090 rdi) (set! acc1.19089 rsi) (set! acc2.19088 rdx) (if (begin (if (= n.19090 0) (set! tmp.19120 14) (set! tmp.19120 6)) (!= tmp.19120 6)) (begin (set! rax acc1.19089) (jump tmp-ra.19123 rbp rax)) (if (begin (if (= n.19090 8) (set! tmp.19121 14) (set! tmp.19121 6)) (!= tmp.19121 6)) (begin (set! rax acc2.19088) (jump tmp-ra.19123 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2415 (begin (set! rsi -8) (set! rdi n.19090) (set! r15 L.rp.2415) (jump L.+.2414 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-n.19091 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2416 (begin (set! rsi acc2.19088) (set! rdi acc1.19089) (set! r15 L.rp.2416) (jump L.+.2414 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-acc2.19092 rax) (set! rdx new-acc2.19092) (set! rsi acc2.19088) (set! rdi new-n.19091) (set! r15 tmp-ra.19123) (jump L.fib_loop.2413 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.19124 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.19124) (jump L.fib_loop.2413 rbp r15 rdi rsi rdx)))) ((module ((locals ()) (undead-out ((tmp-ra.19150 rbp) (tmp-ra.19150 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.19150 (rdi rbp)) (rbp (r15 rdi tmp-ra.19150)) (rdi (r15 rbp tmp-ra.19150)) (r15 (rbp rdi)))) (assignment ((tmp-ra.19150 r15)))) (define L.id.2417 ((locals ()) (undead-out ((rdi tmp-ra.19149 rbp) (x.19125 tmp-ra.19149 rbp) (tmp-ra.19149 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19149 (rax x.19125 rbp rdi)) (x.19125 (rbp tmp-ra.19149)) (rdi (tmp-ra.19149)) (rbp (rax x.19125 tmp-ra.19149)) (rax (rbp tmp-ra.19149)))) (assignment ((tmp-ra.19149 r15) (x.19125 r14)))) (begin (set! tmp-ra.19149 r15) (set! x.19125 rdi) (set! rax x.19125) (jump tmp-ra.19149 rbp rax))) (begin (set! tmp-ra.19150 r15) (set! rdi 40) (set! r15 tmp-ra.19150) (jump L.id.2417 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.19182 rbp) ((rax tmp-ra.19182 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (y.19152 tmp-ra.19182 rbp) (tmp-ra.19182 rsi rbp) (tmp-ra.19182 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.19182 (rdi rsi y.19152 rbp)) (y.19152 (rbp tmp-ra.19182)) (rbp (rsi y.19152 r15 rdi tmp-ra.19182)) (rdi (rsi tmp-ra.19182 r15 rbp)) (r15 (rsi rbp rdi)) (rsi (r15 rdi rbp tmp-ra.19182)))) (assignment ((tmp-ra.19182 fv0) (y.19152 r15)))) (define L.+.2419 ((locals ()) (undead-out ((rdi rsi tmp-ra.19180 rbp) (rsi tmp.19155 tmp-ra.19180 rbp) (tmp.19155 tmp.19156 tmp-ra.19180 rbp) ((((((tmp.19177 tmp.19155 tmp.19156 tmp-ra.19180 rbp) (tmp.19177 tmp.19155 tmp.19156 tmp-ra.19180 rbp)) (tmp.19155 tmp.19156 tmp-ra.19180 rbp)) (tmp.19176 tmp.19155 tmp.19156 tmp-ra.19180 rbp) (tmp.19176 tmp.19155 tmp.19156 tmp-ra.19180 rbp)) (tmp.19155 tmp.19156 tmp-ra.19180 rbp)) ((((((tmp.19179 tmp.19155 tmp.19156 tmp-ra.19180 rbp) (tmp.19179 tmp.19155 tmp.19156 tmp-ra.19180 rbp)) (tmp.19155 tmp.19156 tmp-ra.19180 rbp)) (tmp.19178 tmp.19155 tmp.19156 tmp-ra.19180 rbp) (tmp.19178 tmp.19155 tmp.19156 tmp-ra.19180 rbp)) (tmp.19155 tmp.19156 tmp-ra.19180 rbp)) ((tmp.19156 rax tmp-ra.19180 rbp) (tmp-ra.19180 rax rbp) (rax rbp)) ((tmp-ra.19180 rax rbp) (rax rbp))) ((tmp-ra.19180 rax rbp) (rax rbp))))) (conflicts ((tmp.19176 (rbp tmp-ra.19180 tmp.19156 tmp.19155)) (tmp.19156 (rbp tmp-ra.19180 tmp.19155 tmp.19177 tmp.19176 tmp.19179 tmp.19178 rax)) (tmp.19177 (rbp tmp-ra.19180 tmp.19156 tmp.19155)) (tmp-ra.19180 (tmp.19156 tmp.19155 rbp rsi rdi tmp.19177 tmp.19176 tmp.19179 tmp.19178 rax)) (tmp.19179 (rbp tmp-ra.19180 tmp.19156 tmp.19155)) (tmp.19155 (tmp.19156 rbp tmp-ra.19180 rsi tmp.19177 tmp.19176 tmp.19179 tmp.19178)) (tmp.19178 (rbp tmp-ra.19180 tmp.19156 tmp.19155)) (rax (tmp.19156 rbp tmp-ra.19180)) (rbp (tmp.19156 tmp.19155 tmp-ra.19180 tmp.19177 tmp.19176 tmp.19179 tmp.19178 rax)) (rdi (tmp-ra.19180)) (rsi (tmp.19155 tmp-ra.19180)))) (assignment ((tmp-ra.19180 r15) (tmp.19156 r14) (tmp.19155 r13) (tmp.19176 r9) (tmp.19177 r9) (tmp.19179 r9) (tmp.19178 r9)))) (begin (set! tmp-ra.19180 r15) (set! tmp.19155 rdi) (set! tmp.19156 rsi) (if (begin (if (begin (begin (set! tmp.19177 tmp.19156) (set! tmp.19177 (bitwise-and tmp.19177 7))) (= tmp.19177 0)) (set! tmp.19176 14) (set! tmp.19176 6)) (!= tmp.19176 6)) (if (begin (if (begin (begin (set! tmp.19179 tmp.19155) (set! tmp.19179 (bitwise-and tmp.19179 7))) (= tmp.19179 0)) (set! tmp.19178 14) (set! tmp.19178 6)) (!= tmp.19178 6)) (begin (set! rax tmp.19155) (set! rax (+ rax tmp.19156)) (jump tmp-ra.19180 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19180 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19180 rbp rax))))) (define L.id.2418 ((locals ()) (undead-out ((rdi tmp-ra.19181 rbp) (x.19151 tmp-ra.19181 rbp) (tmp-ra.19181 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19181 (rax x.19151 rbp rdi)) (x.19151 (rbp tmp-ra.19181)) (rdi (tmp-ra.19181)) (rbp (rax x.19151 tmp-ra.19181)) (rax (rbp tmp-ra.19181)))) (assignment ((tmp-ra.19181 r15) (x.19151 r14)))) (begin (set! tmp-ra.19181 r15) (set! x.19151 rdi) (set! rax x.19151) (jump tmp-ra.19181 rbp rax))) (begin (set! tmp-ra.19182 r15) (begin (set! rbp (- rbp 8)) (return-point L.rp.2420 (begin (set! rdi 40) (set! r15 L.rp.2420) (jump L.id.2418 rbp r15 rdi))) (set! rbp (+ rbp 8))) (set! y.19152 rax) (set! rsi y.19152) (set! rdi 40) (set! r15 tmp-ra.19182) (jump L.+.2419 rbp r15 rdi rsi))) (module ((locals ()) (undead-out ((tmp-ra.19219 rbp) (tmp-ra.19219 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.19219 (rdi rbp)) (rbp (r15 rdi tmp-ra.19219)) (rdi (r15 rbp tmp-ra.19219)) (r15 (rbp rdi)))) (assignment ((tmp-ra.19219 r15)))) (define L.+.2423 ((locals ()) (undead-out ((rdi rsi tmp-ra.19216 rbp) (rsi tmp.19189 tmp-ra.19216 rbp) (tmp.19189 tmp.19190 tmp-ra.19216 rbp) ((((((tmp.19211 tmp.19189 tmp.19190 tmp-ra.19216 rbp) (tmp.19211 tmp.19189 tmp.19190 tmp-ra.19216 rbp)) (tmp.19189 tmp.19190 tmp-ra.19216 rbp)) (tmp.19210 tmp.19189 tmp.19190 tmp-ra.19216 rbp) (tmp.19210 tmp.19189 tmp.19190 tmp-ra.19216 rbp)) (tmp.19189 tmp.19190 tmp-ra.19216 rbp)) ((((((tmp.19213 tmp.19189 tmp.19190 tmp-ra.19216 rbp) (tmp.19213 tmp.19189 tmp.19190 tmp-ra.19216 rbp)) (tmp.19189 tmp.19190 tmp-ra.19216 rbp)) (tmp.19212 tmp.19189 tmp.19190 tmp-ra.19216 rbp) (tmp.19212 tmp.19189 tmp.19190 tmp-ra.19216 rbp)) (tmp.19189 tmp.19190 tmp-ra.19216 rbp)) ((tmp.19190 rax tmp-ra.19216 rbp) (tmp-ra.19216 rax rbp) (rax rbp)) ((tmp-ra.19216 rax rbp) (rax rbp))) ((tmp-ra.19216 rax rbp) (rax rbp))))) (conflicts ((tmp.19210 (rbp tmp-ra.19216 tmp.19190 tmp.19189)) (tmp.19190 (rbp tmp-ra.19216 tmp.19189 tmp.19211 tmp.19210 tmp.19213 tmp.19212 rax)) (tmp.19211 (rbp tmp-ra.19216 tmp.19190 tmp.19189)) (tmp-ra.19216 (tmp.19190 tmp.19189 rbp rsi rdi tmp.19211 tmp.19210 tmp.19213 tmp.19212 rax)) (tmp.19213 (rbp tmp-ra.19216 tmp.19190 tmp.19189)) (tmp.19189 (tmp.19190 rbp tmp-ra.19216 rsi tmp.19211 tmp.19210 tmp.19213 tmp.19212)) (tmp.19212 (rbp tmp-ra.19216 tmp.19190 tmp.19189)) (rax (tmp.19190 rbp tmp-ra.19216)) (rbp (tmp.19190 tmp.19189 tmp-ra.19216 tmp.19211 tmp.19210 tmp.19213 tmp.19212 rax)) (rdi (tmp-ra.19216)) (rsi (tmp.19189 tmp-ra.19216)))) (assignment ((tmp-ra.19216 r15) (tmp.19190 r14) (tmp.19189 r13) (tmp.19210 r9) (tmp.19211 r9) (tmp.19213 r9) (tmp.19212 r9)))) (begin (set! tmp-ra.19216 r15) (set! tmp.19189 rdi) (set! tmp.19190 rsi) (if (begin (if (begin (begin (set! tmp.19211 tmp.19190) (set! tmp.19211 (bitwise-and tmp.19211 7))) (= tmp.19211 0)) (set! tmp.19210 14) (set! tmp.19210 6)) (!= tmp.19210 6)) (if (begin (if (begin (begin (set! tmp.19213 tmp.19189) (set! tmp.19213 (bitwise-and tmp.19213 7))) (= tmp.19213 0)) (set! tmp.19212 14) (set! tmp.19212 6)) (!= tmp.19212 6)) (begin (set! rax tmp.19189) (set! rax (+ rax tmp.19190)) (jump tmp-ra.19216 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19216 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19216 rbp rax))))) (define L.odd?.2421 ((locals ()) (undead-out ((rdi tmp-ra.19217 rbp) (x.19183 tmp-ra.19217 rbp) ((((x.19183 tmp-ra.19217 rbp) (tmp.19214 x.19183 tmp-ra.19217 rbp) (tmp.19214 x.19183 tmp-ra.19217 rbp)) (x.19183 tmp-ra.19217 rbp)) ((tmp-ra.19217 rax rbp) (rax rbp)) (((rax tmp-ra.19217 rbp) ((x.19183 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.19184 tmp-ra.19217 rbp) (tmp-ra.19217 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (conflicts ((tmp.19214 (rbp tmp-ra.19217 x.19183)) (x.19183 (rbp tmp-ra.19217 tmp.19214 rsi)) (tmp-ra.19217 (x.19183 rbp tmp.19214 rax rdi y.19184)) (y.19184 (rbp tmp-ra.19217)) (rsi (r15 rdi rbp x.19183)) (rbp (x.19183 tmp-ra.19217 tmp.19214 rax y.19184 r15 rdi rsi)) (rdi (tmp-ra.19217 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.19217)))) (assignment ((tmp-ra.19217 fv0) (x.19183 r15) (tmp.19214 r14) (y.19184 r15)))) (begin (set! tmp-ra.19217 r15) (set! x.19183 rdi) (if (begin (if (= x.19183 0) (set! tmp.19214 14) (set! tmp.19214 6)) (!= tmp.19214 6)) (begin (set! rax 0) (jump tmp-ra.19217 rbp rax)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2424 (begin (set! rsi -8) (set! rdi x.19183) (set! r15 L.rp.2424) (jump L.+.2423 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! y.19184 rax) (set! rdi y.19184) (set! r15 tmp-ra.19217) (jump L.even?.2422 rbp r15 rdi))))) (define L.even?.2422 ((locals ()) (undead-out ((rdi tmp-ra.19218 rbp) (x.19185 tmp-ra.19218 rbp) ((((x.19185 tmp-ra.19218 rbp) (tmp.19215 x.19185 tmp-ra.19218 rbp) (tmp.19215 x.19185 tmp-ra.19218 rbp)) (x.19185 tmp-ra.19218 rbp)) ((tmp-ra.19218 rax rbp) (rax rbp)) (((rax tmp-ra.19218 rbp) ((x.19185 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (y.19186 tmp-ra.19218 rbp) (tmp-ra.19218 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))))) (conflicts ((tmp.19215 (rbp tmp-ra.19218 x.19185)) (x.19185 (rbp tmp-ra.19218 tmp.19215 rsi)) (tmp-ra.19218 (x.19185 rbp tmp.19215 rax rdi y.19186)) (y.19186 (rbp tmp-ra.19218)) (rsi (r15 rdi rbp x.19185)) (rbp (x.19185 tmp-ra.19218 tmp.19215 rax y.19186 r15 rdi rsi)) (rdi (tmp-ra.19218 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.19218)))) (assignment ((tmp-ra.19218 fv0) (x.19185 r15) (tmp.19215 r14) (y.19186 r15)))) (begin (set! tmp-ra.19218 r15) (set! x.19185 rdi) (if (begin (if (= x.19185 0) (set! tmp.19215 14) (set! tmp.19215 6)) (!= tmp.19215 6)) (begin (set! rax 8) (jump tmp-ra.19218 rbp rax)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2425 (begin (set! rsi -8) (set! rdi x.19185) (set! r15 L.rp.2425) (jump L.+.2423 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! y.19186 rax) (set! rdi y.19186) (set! r15 tmp-ra.19218) (jump L.odd?.2421 rbp r15 rdi))))) (begin (set! tmp-ra.19219 r15) (set! rdi 40) (set! r15 tmp-ra.19219) (jump L.even?.2422 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.19248 rbp) (tmp-ra.19248 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19248 (rax rbp)) (rbp (rax tmp-ra.19248)) (rax (rbp tmp-ra.19248)))) (assignment ((tmp-ra.19248 r15)))) (define L.zero.2426 ((locals ()) (undead-out ((rdi rsi rdx rcx tmp-ra.19247 rbp) (rsi rdx rcx tmp-ra.19247 rbp) (rdx rcx tmp-ra.19247 rbp) (rcx tmp-ra.19247 rbp) (tmp-ra.19247 rbp) (tmp-ra.19247 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19247 (rax v3.19220 v2.19221 v1.19222 v0.19223 rbp rcx rdx rsi rdi)) (v0.19223 (rbp tmp-ra.19247 rcx rdx rsi)) (v1.19222 (rbp tmp-ra.19247 rcx rdx)) (v2.19221 (rbp tmp-ra.19247 rcx)) (v3.19220 (rbp tmp-ra.19247)) (rdi (tmp-ra.19247)) (rsi (v0.19223 tmp-ra.19247)) (rdx (v1.19222 v0.19223 tmp-ra.19247)) (rcx (v2.19221 v1.19222 v0.19223 tmp-ra.19247)) (rbp (rax v3.19220 v2.19221 v1.19222 v0.19223 tmp-ra.19247)) (rax (rbp tmp-ra.19247)))) (assignment ((tmp-ra.19247 r15) (v0.19223 r14) (v1.19222 r14) (v2.19221 r14) (v3.19220 r14)))) (begin (set! tmp-ra.19247 r15) (set! v0.19223 rdi) (set! v1.19222 rsi) (set! v2.19221 rdx) (set! v3.19220 rcx) (set! rax 0) (jump tmp-ra.19247 rbp rax))) (begin (set! tmp-ra.19248 r15) (set! rax 0) (jump tmp-ra.19248 rbp rax))) (module ((locals ()) (undead-out ((tmp-ra.19275 rbp) (tmp-ra.19275 y.19250 rbp) (tmp-ra.19275 y.19250 rdi rbp) (y.19250 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.19250 (r15 rdi rbp tmp-ra.19275)) (tmp-ra.19275 (rdi y.19250 rbp)) (rbp (r15 rdi y.19250 tmp-ra.19275)) (rdi (r15 rbp y.19250 tmp-ra.19275)) (r15 (rbp rdi y.19250)))) (assignment ((y.19250 r14) (tmp-ra.19275 r15)))) (define L.id.2427 ((locals ()) (undead-out ((rdi tmp-ra.19274 rbp) (x.19249 tmp-ra.19274 rbp) (tmp-ra.19274 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19274 (rax x.19249 rbp rdi)) (x.19249 (rbp tmp-ra.19274)) (rdi (tmp-ra.19274)) (rbp (rax x.19249 tmp-ra.19274)) (rax (rbp tmp-ra.19274)))) (assignment ((tmp-ra.19274 r15) (x.19249 r14)))) (begin (set! tmp-ra.19274 r15) (set! x.19249 rdi) (set! rax x.19249) (jump tmp-ra.19274 rbp rax))) (begin (set! tmp-ra.19275 r15) (set! y.19250 L.id.2427) (set! rdi 40) (set! r15 tmp-ra.19275) (jump y.19250 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.19304 rbp) (((tmp.19305 tmp-ra.19304 rbp) (tmp-ra.19304 rbp)) (tmp-ra.19304 y.19278 rbp) (tmp-ra.19304 y.19278 rbp)) (tmp-ra.19304 y.19278 rdi rbp) (y.19278 rdi r15 rbp) (rdi r15 rbp))) (conflicts ((y.19278 (r15 rdi rbp tmp-ra.19304)) (tmp-ra.19304 (rdi tmp.19305 y.19278 rbp)) (tmp.19305 (rbp tmp-ra.19304)) (rbp (r15 rdi tmp.19305 y.19278 tmp-ra.19304)) (rdi (r15 rbp y.19278 tmp-ra.19304)) (r15 (rbp rdi y.19278)))) (assignment ((y.19278 r14) (tmp-ra.19304 r15) (tmp.19305 r14)))) (define L.id1.2428 ((locals ()) (undead-out ((rdi tmp-ra.19302 rbp) (x.19276 tmp-ra.19302 rbp) (tmp-ra.19302 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19302 (rax x.19276 rbp rdi)) (x.19276 (rbp tmp-ra.19302)) (rdi (tmp-ra.19302)) (rbp (rax x.19276 tmp-ra.19302)) (rax (rbp tmp-ra.19302)))) (assignment ((tmp-ra.19302 r15) (x.19276 r14)))) (begin (set! tmp-ra.19302 r15) (set! x.19276 rdi) (set! rax x.19276) (jump tmp-ra.19302 rbp rax))) (define L.id2.2429 ((locals ()) (undead-out ((rdi tmp-ra.19303 rbp) (x.19277 tmp-ra.19303 rbp) (tmp-ra.19303 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19303 (rax x.19277 rbp rdi)) (x.19277 (rbp tmp-ra.19303)) (rdi (tmp-ra.19303)) (rbp (rax x.19277 tmp-ra.19303)) (rax (rbp tmp-ra.19303)))) (assignment ((tmp-ra.19303 r15) (x.19277 r14)))) (begin (set! tmp-ra.19303 r15) (set! x.19277 rdi) (set! rax x.19277) (jump tmp-ra.19303 rbp rax))) (begin (set! tmp-ra.19304 r15) (if (begin (set! tmp.19305 14) (!= tmp.19305 6)) (set! y.19278 L.id1.2428) (set! y.19278 L.id2.2429)) (set! rdi 40) (set! r15 tmp-ra.19304) (jump y.19278 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.19342 rbp) ((rax tmp-ra.19342 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.19338 tmp-ra.19342 rbp) ((rax tmp.19338 tmp-ra.19342 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.19339 tmp.19338 tmp-ra.19342 rbp) (tmp.19338 tmp-ra.19342 rsi rbp) (tmp-ra.19342 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.19342 (rdi rsi tmp.19339 tmp.19338 rbp)) (tmp.19338 (rsi tmp.19339 rbp tmp-ra.19342)) (tmp.19339 (rbp tmp-ra.19342 tmp.19338)) (rbp (tmp.19339 tmp.19338 r15 rdi rsi tmp-ra.19342)) (rsi (tmp-ra.19342 tmp.19338 r15 rdi rbp)) (rdi (tmp-ra.19342 r15 rbp rsi)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.19342 fv0) (tmp.19338 fv1) (tmp.19339 r15)))) (define L.*.2431 ((locals ()) (undead-out ((rdi rsi tmp-ra.19340 rbp) (rsi tmp.19306 tmp-ra.19340 rbp) (tmp.19307 tmp.19306 tmp-ra.19340 rbp) ((((((tmp.19330 tmp.19307 tmp.19306 tmp-ra.19340 rbp) (tmp.19330 tmp.19307 tmp.19306 tmp-ra.19340 rbp)) (tmp.19307 tmp.19306 tmp-ra.19340 rbp)) (tmp.19329 tmp.19307 tmp.19306 tmp-ra.19340 rbp) (tmp.19329 tmp.19307 tmp.19306 tmp-ra.19340 rbp)) (tmp.19307 tmp.19306 tmp-ra.19340 rbp)) ((((((tmp.19332 tmp.19307 tmp.19306 tmp-ra.19340 rbp) (tmp.19332 tmp.19307 tmp.19306 tmp-ra.19340 rbp)) (tmp.19307 tmp.19306 tmp-ra.19340 rbp)) (tmp.19331 tmp.19307 tmp.19306 tmp-ra.19340 rbp) (tmp.19331 tmp.19307 tmp.19306 tmp-ra.19340 rbp)) (tmp.19307 tmp.19306 tmp-ra.19340 rbp)) ((tmp.19333 tmp.19306 tmp-ra.19340 rbp) (tmp.19306 tmp.19333 tmp-ra.19340 rbp) (tmp.19333 rax tmp-ra.19340 rbp) (tmp-ra.19340 rax rbp) (rax rbp)) ((tmp-ra.19340 rax rbp) (rax rbp))) ((tmp-ra.19340 rax rbp) (rax rbp))))) (conflicts ((tmp.19329 (rbp tmp-ra.19340 tmp.19306 tmp.19307)) (tmp.19307 (rbp tmp-ra.19340 tmp.19306 tmp.19330 tmp.19329 tmp.19332 tmp.19331)) (tmp.19330 (rbp tmp-ra.19340 tmp.19306 tmp.19307)) (tmp-ra.19340 (tmp.19307 tmp.19306 rbp rsi rdi tmp.19330 tmp.19329 tmp.19332 tmp.19331 tmp.19333 rax)) (tmp.19333 (rax rbp tmp-ra.19340 tmp.19306)) (tmp.19332 (rbp tmp-ra.19340 tmp.19306 tmp.19307)) (tmp.19306 (tmp.19307 rbp tmp-ra.19340 rsi tmp.19330 tmp.19329 tmp.19332 tmp.19331 tmp.19333)) (tmp.19331 (rbp tmp-ra.19340 tmp.19306 tmp.19307)) (rax (tmp.19333 rbp tmp-ra.19340)) (rbp (tmp.19307 tmp.19306 tmp-ra.19340 tmp.19330 tmp.19329 tmp.19332 tmp.19331 tmp.19333 rax)) (rdi (tmp-ra.19340)) (rsi (tmp.19306 tmp-ra.19340)))) (assignment ((tmp-ra.19340 r15) (tmp.19306 r14) (tmp.19307 r13) (tmp.19329 r9) (tmp.19330 r9) (tmp.19333 r13) (tmp.19332 r9) (tmp.19331 r9)))) (begin (set! tmp-ra.19340 r15) (set! tmp.19306 rdi) (set! tmp.19307 rsi) (if (begin (if (begin (begin (set! tmp.19330 tmp.19307) (set! tmp.19330 (bitwise-and tmp.19330 7))) (= tmp.19330 0)) (set! tmp.19329 14) (set! tmp.19329 6)) (!= tmp.19329 6)) (if (begin (if (begin (begin (set! tmp.19332 tmp.19306) (set! tmp.19332 (bitwise-and tmp.19332 7))) (= tmp.19332 0)) (set! tmp.19331 14) (set! tmp.19331 6)) (!= tmp.19331 6)) (begin (set! tmp.19333 tmp.19307) (set! tmp.19333 (arithmetic-shift-right tmp.19333 3)) (set! rax tmp.19306) (set! rax (* rax tmp.19333)) (jump tmp-ra.19340 rbp rax)) (begin (set! rax 62) (jump tmp-ra.19340 rbp rax))) (begin (set! rax 62) (jump tmp-ra.19340 rbp rax))))) (define L.+.2430 ((locals ()) (undead-out ((rdi rsi tmp-ra.19341 rbp) (rsi tmp.19308 tmp-ra.19341 rbp) (tmp.19308 tmp.19309 tmp-ra.19341 rbp) ((((((tmp.19335 tmp.19308 tmp.19309 tmp-ra.19341 rbp) (tmp.19335 tmp.19308 tmp.19309 tmp-ra.19341 rbp)) (tmp.19308 tmp.19309 tmp-ra.19341 rbp)) (tmp.19334 tmp.19308 tmp.19309 tmp-ra.19341 rbp) (tmp.19334 tmp.19308 tmp.19309 tmp-ra.19341 rbp)) (tmp.19308 tmp.19309 tmp-ra.19341 rbp)) ((((((tmp.19337 tmp.19308 tmp.19309 tmp-ra.19341 rbp) (tmp.19337 tmp.19308 tmp.19309 tmp-ra.19341 rbp)) (tmp.19308 tmp.19309 tmp-ra.19341 rbp)) (tmp.19336 tmp.19308 tmp.19309 tmp-ra.19341 rbp) (tmp.19336 tmp.19308 tmp.19309 tmp-ra.19341 rbp)) (tmp.19308 tmp.19309 tmp-ra.19341 rbp)) ((tmp.19309 rax tmp-ra.19341 rbp) (tmp-ra.19341 rax rbp) (rax rbp)) ((tmp-ra.19341 rax rbp) (rax rbp))) ((tmp-ra.19341 rax rbp) (rax rbp))))) (conflicts ((tmp.19334 (rbp tmp-ra.19341 tmp.19309 tmp.19308)) (tmp.19309 (rbp tmp-ra.19341 tmp.19308 tmp.19335 tmp.19334 tmp.19337 tmp.19336 rax)) (tmp.19335 (rbp tmp-ra.19341 tmp.19309 tmp.19308)) (tmp-ra.19341 (tmp.19309 tmp.19308 rbp rsi rdi tmp.19335 tmp.19334 tmp.19337 tmp.19336 rax)) (tmp.19337 (rbp tmp-ra.19341 tmp.19309 tmp.19308)) (tmp.19308 (tmp.19309 rbp tmp-ra.19341 rsi tmp.19335 tmp.19334 tmp.19337 tmp.19336)) (tmp.19336 (rbp tmp-ra.19341 tmp.19309 tmp.19308)) (rax (tmp.19309 rbp tmp-ra.19341)) (rbp (tmp.19309 tmp.19308 tmp-ra.19341 tmp.19335 tmp.19334 tmp.19337 tmp.19336 rax)) (rdi (tmp-ra.19341)) (rsi (tmp.19308 tmp-ra.19341)))) (assignment ((tmp-ra.19341 r15) (tmp.19309 r14) (tmp.19308 r13) (tmp.19334 r9) (tmp.19335 r9) (tmp.19337 r9) (tmp.19336 r9)))) (begin (set! tmp-ra.19341 r15) (set! tmp.19308 rdi) (set! tmp.19309 rsi) (if (begin (if (begin (begin (set! tmp.19335 tmp.19309) (set! tmp.19335 (bitwise-and tmp.19335 7))) (= tmp.19335 0)) (set! tmp.19334 14) (set! tmp.19334 6)) (!= tmp.19334 6)) (if (begin (if (begin (begin (set! tmp.19337 tmp.19308) (set! tmp.19337 (bitwise-and tmp.19337 7))) (= tmp.19337 0)) (set! tmp.19336 14) (set! tmp.19336 6)) (!= tmp.19336 6)) (begin (set! rax tmp.19308) (set! rax (+ rax tmp.19309)) (jump tmp-ra.19341 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19341 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19341 rbp rax))))) (begin (set! tmp-ra.19342 r15) (begin (set! rbp (- rbp 16)) (return-point L.rp.2432 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2432) (jump L.+.2430 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.19338 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2433 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2433) (jump L.*.2431 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.19339 rax) (set! rsi tmp.19339) (set! rdi tmp.19338) (set! r15 tmp-ra.19342) (jump L.+.2430 rbp r15 rdi rsi))) (module ((locals ()) (undead-out ((tmp-ra.19373 rbp) (((((((rax tmp-ra.19373 rbp) ((rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.19371 tmp-ra.19373 rbp)) (tmp-ra.19373 rbp)) (tmp.19370 tmp-ra.19373 rbp) (tmp.19370 tmp-ra.19373 rbp)) (tmp-ra.19373 rbp)) ((tmp-ra.19373 rax rbp) (rax rbp)) ((tmp-ra.19373 rax rbp) (rax rbp))))) (conflicts ((tmp.19370 (rbp tmp-ra.19373)) (tmp.19371 (rbp tmp-ra.19373)) (tmp-ra.19373 (rbp tmp.19371 tmp.19370 rax)) (rax (rbp tmp-ra.19373)) (rbp (tmp-ra.19373 r15 rdi rsi tmp.19371 tmp.19370 rax)) (rsi (r15 rdi rbp)) (rdi (r15 rbp rsi)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.19373 fv0) (tmp.19370 r15) (tmp.19371 r15)))) (define L.+.2434 ((locals ()) (undead-out ((rdi rsi tmp-ra.19372 rbp) (rsi tmp.19345 tmp-ra.19372 rbp) (tmp.19345 tmp.19346 tmp-ra.19372 rbp) ((((((tmp.19367 tmp.19345 tmp.19346 tmp-ra.19372 rbp) (tmp.19367 tmp.19345 tmp.19346 tmp-ra.19372 rbp)) (tmp.19345 tmp.19346 tmp-ra.19372 rbp)) (tmp.19366 tmp.19345 tmp.19346 tmp-ra.19372 rbp) (tmp.19366 tmp.19345 tmp.19346 tmp-ra.19372 rbp)) (tmp.19345 tmp.19346 tmp-ra.19372 rbp)) ((((((tmp.19369 tmp.19345 tmp.19346 tmp-ra.19372 rbp) (tmp.19369 tmp.19345 tmp.19346 tmp-ra.19372 rbp)) (tmp.19345 tmp.19346 tmp-ra.19372 rbp)) (tmp.19368 tmp.19345 tmp.19346 tmp-ra.19372 rbp) (tmp.19368 tmp.19345 tmp.19346 tmp-ra.19372 rbp)) (tmp.19345 tmp.19346 tmp-ra.19372 rbp)) ((tmp.19346 rax tmp-ra.19372 rbp) (tmp-ra.19372 rax rbp) (rax rbp)) ((tmp-ra.19372 rax rbp) (rax rbp))) ((tmp-ra.19372 rax rbp) (rax rbp))))) (conflicts ((tmp.19366 (rbp tmp-ra.19372 tmp.19346 tmp.19345)) (tmp.19346 (rbp tmp-ra.19372 tmp.19345 tmp.19367 tmp.19366 tmp.19369 tmp.19368 rax)) (tmp.19367 (rbp tmp-ra.19372 tmp.19346 tmp.19345)) (tmp-ra.19372 (tmp.19346 tmp.19345 rbp rsi rdi tmp.19367 tmp.19366 tmp.19369 tmp.19368 rax)) (tmp.19369 (rbp tmp-ra.19372 tmp.19346 tmp.19345)) (tmp.19345 (tmp.19346 rbp tmp-ra.19372 rsi tmp.19367 tmp.19366 tmp.19369 tmp.19368)) (tmp.19368 (rbp tmp-ra.19372 tmp.19346 tmp.19345)) (rax (tmp.19346 rbp tmp-ra.19372)) (rbp (tmp.19346 tmp.19345 tmp-ra.19372 tmp.19367 tmp.19366 tmp.19369 tmp.19368 rax)) (rdi (tmp-ra.19372)) (rsi (tmp.19345 tmp-ra.19372)))) (assignment ((tmp-ra.19372 r15) (tmp.19346 r14) (tmp.19345 r13) (tmp.19366 r9) (tmp.19367 r9) (tmp.19369 r9) (tmp.19368 r9)))) (begin (set! tmp-ra.19372 r15) (set! tmp.19345 rdi) (set! tmp.19346 rsi) (if (begin (if (begin (begin (set! tmp.19367 tmp.19346) (set! tmp.19367 (bitwise-and tmp.19367 7))) (= tmp.19367 0)) (set! tmp.19366 14) (set! tmp.19366 6)) (!= tmp.19366 6)) (if (begin (if (begin (begin (set! tmp.19369 tmp.19345) (set! tmp.19369 (bitwise-and tmp.19369 7))) (= tmp.19369 0)) (set! tmp.19368 14) (set! tmp.19368 6)) (!= tmp.19368 6)) (begin (set! rax tmp.19345) (set! rax (+ rax tmp.19346)) (jump tmp-ra.19372 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19372 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19372 rbp rax))))) (begin (set! tmp-ra.19373 r15) (if (begin (if (begin (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2435 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2435) (jump L.+.2434 rbp r15 rdi rsi))) (set! rbp (+ rbp 8))) (set! tmp.19371 rax)) (= tmp.19371 88)) (set! tmp.19370 14) (set! tmp.19370 6)) (!= tmp.19370 6)) (begin (set! rax 32) (jump tmp-ra.19373 rbp rax)) (begin (set! rax 48) (jump tmp-ra.19373 rbp rax))))) (module ((locals ()) (undead-out ((tmp-ra.19397 rbp) (tmp-ra.19397 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19397 (rax rbp)) (rbp (rax tmp-ra.19397)) (rax (rbp tmp-ra.19397)))) (assignment ((tmp-ra.19397 r15)))) (begin (set! tmp-ra.19397 r15) (set! rax 14) (jump tmp-ra.19397 rbp rax))) (module ((locals ()) (undead-out ((tmp-ra.19421 rbp) (tmp-ra.19421 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19421 (rax rbp)) (rbp (rax tmp-ra.19421)) (rax (rbp tmp-ra.19421)))) (assignment ((tmp-ra.19421 r15)))) (begin (set! tmp-ra.19421 r15) (set! rax 6) (jump tmp-ra.19421 rbp rax))) (module ((locals ()) (undead-out ((tmp-ra.19445 rbp) (tmp-ra.19445 rax rbp) (rax rbp))) (conflicts ((tmp-ra.19445 (rax rbp)) (rbp (rax tmp-ra.19445)) (rax (rbp tmp-ra.19445)))) (assignment ((tmp-ra.19445 r15)))) (begin (set! tmp-ra.19445 r15) (set! rax 22) (jump tmp-ra.19445 rbp rax))) (module ((locals ()) (undead-out ((tmp-ra.19511 rbp) (tmp-ra.19511 fv0 rbp) (tmp-ra.19511 fv0 r9 rbp) (tmp-ra.19511 fv0 r9 r8 rbp) (tmp-ra.19511 fv0 r9 r8 rcx rbp) (tmp-ra.19511 fv0 r9 r8 rcx rdx rbp) (tmp-ra.19511 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.19511 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.19511 (rdi rsi rdx rcx r8 r9 fv0 rbp)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 tmp-ra.19511)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp tmp-ra.19511)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 tmp-ra.19511)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 tmp-ra.19511)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 tmp-ra.19511)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 tmp-ra.19511)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 tmp-ra.19511)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 tmp-ra.19511)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0)))) (assignment ((tmp-ra.19511 r15)))) (define L.+.2439 ((locals ()) (undead-out ((rdi rsi tmp-ra.19505 rbp) (rsi tmp.19479 tmp-ra.19505 rbp) (tmp.19479 tmp.19480 tmp-ra.19505 rbp) ((((((tmp.19501 tmp.19479 tmp.19480 tmp-ra.19505 rbp) (tmp.19501 tmp.19479 tmp.19480 tmp-ra.19505 rbp)) (tmp.19479 tmp.19480 tmp-ra.19505 rbp)) (tmp.19500 tmp.19479 tmp.19480 tmp-ra.19505 rbp) (tmp.19500 tmp.19479 tmp.19480 tmp-ra.19505 rbp)) (tmp.19479 tmp.19480 tmp-ra.19505 rbp)) ((((((tmp.19503 tmp.19479 tmp.19480 tmp-ra.19505 rbp) (tmp.19503 tmp.19479 tmp.19480 tmp-ra.19505 rbp)) (tmp.19479 tmp.19480 tmp-ra.19505 rbp)) (tmp.19502 tmp.19479 tmp.19480 tmp-ra.19505 rbp) (tmp.19502 tmp.19479 tmp.19480 tmp-ra.19505 rbp)) (tmp.19479 tmp.19480 tmp-ra.19505 rbp)) ((tmp.19480 rax tmp-ra.19505 rbp) (tmp-ra.19505 rax rbp) (rax rbp)) ((tmp-ra.19505 rax rbp) (rax rbp))) ((tmp-ra.19505 rax rbp) (rax rbp))))) (conflicts ((tmp.19500 (rbp tmp-ra.19505 tmp.19480 tmp.19479)) (tmp.19480 (rbp tmp-ra.19505 tmp.19479 tmp.19501 tmp.19500 tmp.19503 tmp.19502 rax)) (tmp.19501 (rbp tmp-ra.19505 tmp.19480 tmp.19479)) (tmp-ra.19505 (tmp.19480 tmp.19479 rbp rsi rdi tmp.19501 tmp.19500 tmp.19503 tmp.19502 rax)) (tmp.19503 (rbp tmp-ra.19505 tmp.19480 tmp.19479)) (tmp.19479 (tmp.19480 rbp tmp-ra.19505 rsi tmp.19501 tmp.19500 tmp.19503 tmp.19502)) (tmp.19502 (rbp tmp-ra.19505 tmp.19480 tmp.19479)) (rax (tmp.19480 rbp tmp-ra.19505)) (rbp (tmp.19480 tmp.19479 tmp-ra.19505 tmp.19501 tmp.19500 tmp.19503 tmp.19502 rax)) (rdi (tmp-ra.19505)) (rsi (tmp.19479 tmp-ra.19505)))) (assignment ((tmp-ra.19505 r15) (tmp.19480 r14) (tmp.19479 r13) (tmp.19500 r9) (tmp.19501 r9) (tmp.19503 r9) (tmp.19502 r9)))) (begin (set! tmp-ra.19505 r15) (set! tmp.19479 rdi) (set! tmp.19480 rsi) (if (begin (if (begin (begin (set! tmp.19501 tmp.19480) (set! tmp.19501 (bitwise-and tmp.19501 7))) (= tmp.19501 0)) (set! tmp.19500 14) (set! tmp.19500 6)) (!= tmp.19500 6)) (if (begin (if (begin (begin (set! tmp.19503 tmp.19479) (set! tmp.19503 (bitwise-and tmp.19503 7))) (= tmp.19503 0)) (set! tmp.19502 14) (set! tmp.19502 6)) (!= tmp.19502 6)) (begin (set! rax tmp.19479) (set! rax (+ rax tmp.19480)) (jump tmp-ra.19505 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19505 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19505 rbp rax))))) (define L.F.2436 ((locals ()) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 tmp-ra.19506 rbp) (rsi rdx rcx r8 r9 fv0 a.19452 tmp-ra.19506 rbp) (rdx rcx r8 r9 fv0 a.19452 b.19451 tmp-ra.19506 rbp) (rcx r8 r9 fv0 a.19452 b.19451 c.19450 tmp-ra.19506 rbp) (r8 r9 fv0 a.19452 b.19451 c.19450 d.19449 tmp-ra.19506 rbp) (r9 fv0 a.19452 b.19451 c.19450 d.19449 e.19448 tmp-ra.19506 rbp) (fv0 a.19452 b.19451 c.19450 d.19449 e.19448 f.19447 tmp-ra.19506 rbp) (a.19452 b.19451 c.19450 d.19449 e.19448 f.19447 g.19446 tmp-ra.19506 rbp) ((rax tmp-ra.19506 rbp) ((g.19446 f.19447 e.19448 d.19449 c.19450 b.19451 a.19452 nfv.19508 rbp) (f.19447 e.19448 d.19449 c.19450 b.19451 a.19452 nfv.19508 nfv.19507 rbp) (e.19448 d.19449 c.19450 b.19451 a.19452 nfv.19508 nfv.19507 r9 rbp) (d.19449 c.19450 b.19451 a.19452 nfv.19508 nfv.19507 r9 r8 rbp) (c.19450 b.19451 a.19452 nfv.19508 nfv.19507 r9 r8 rcx rbp) (b.19451 a.19452 nfv.19508 nfv.19507 r9 r8 rcx rdx rbp) (a.19452 nfv.19508 nfv.19507 r9 r8 rcx rdx rsi rbp) (nfv.19508 nfv.19507 r9 r8 rcx rdx rsi rdi rbp) (nfv.19508 nfv.19507 r9 r8 rcx rdx rsi rdi r15 rbp) (nfv.19508 nfv.19507 r9 r8 rcx rdx rsi rdi r15 rbp))) (tmp.19504 tmp-ra.19506 rbp) (tmp-ra.19506 rsi rbp) (tmp-ra.19506 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.19506 (tmp.19504 g.19446 f.19447 e.19448 d.19449 c.19450 b.19451 a.19452 rbp fv0 r9 r8 rcx rdx rsi rdi)) (a.19452 (nfv.19507 nfv.19508 g.19446 f.19447 e.19448 d.19449 c.19450 b.19451 rbp tmp-ra.19506 fv0 r9 r8 rcx rdx rsi)) (b.19451 (nfv.19507 nfv.19508 g.19446 f.19447 e.19448 d.19449 c.19450 rbp tmp-ra.19506 a.19452 fv0 r9 r8 rcx rdx)) (c.19450 (nfv.19507 nfv.19508 g.19446 f.19447 e.19448 d.19449 rbp tmp-ra.19506 b.19451 a.19452 fv0 r9 r8 rcx)) (d.19449 (nfv.19507 nfv.19508 g.19446 f.19447 e.19448 rbp tmp-ra.19506 c.19450 b.19451 a.19452 fv0 r9 r8)) (e.19448 (nfv.19507 nfv.19508 g.19446 f.19447 rbp tmp-ra.19506 d.19449 c.19450 b.19451 a.19452 fv0 r9)) (f.19447 (nfv.19507 nfv.19508 g.19446 rbp tmp-ra.19506 e.19448 d.19449 c.19450 b.19451 a.19452 fv0)) (g.19446 (nfv.19508 rbp tmp-ra.19506 f.19447 e.19448 d.19449 c.19450 b.19451 a.19452)) (nfv.19507 (r15 rdi rsi rdx rcx r8 r9 rbp nfv.19508 a.19452 b.19451 c.19450 d.19449 e.19448 f.19447)) (nfv.19508 (r15 rdi rsi rdx rcx r8 r9 nfv.19507 rbp a.19452 b.19451 c.19450 d.19449 e.19448 f.19447 g.19446)) (tmp.19504 (rbp tmp-ra.19506)) (rdi (r15 rbp rsi rdx rcx r8 r9 nfv.19507 nfv.19508 tmp-ra.19506)) (rsi (r15 rdi rbp rdx rcx r8 r9 nfv.19507 nfv.19508 a.19452 tmp-ra.19506)) (rdx (r15 rdi rsi rbp rcx r8 r9 nfv.19507 nfv.19508 b.19451 a.19452 tmp-ra.19506)) (rcx (r15 rdi rsi rdx rbp r8 r9 nfv.19507 nfv.19508 c.19450 b.19451 a.19452 tmp-ra.19506)) (r8 (r15 rdi rsi rdx rcx rbp r9 nfv.19507 nfv.19508 d.19449 c.19450 b.19451 a.19452 tmp-ra.19506)) (r9 (r15 rdi rsi rdx rcx r8 rbp nfv.19507 nfv.19508 e.19448 d.19449 c.19450 b.19451 a.19452 tmp-ra.19506)) (fv0 (f.19447 e.19448 d.19449 c.19450 b.19451 a.19452 tmp-ra.19506)) (rbp (tmp.19504 r15 rdi rsi rdx rcx r8 r9 nfv.19507 nfv.19508 g.19446 f.19447 e.19448 d.19449 c.19450 b.19451 a.19452 tmp-ra.19506)) (r15 (rbp rdi rsi rdx rcx r8 r9 nfv.19507 nfv.19508)))) (assignment ((tmp-ra.19506 fv1) (nfv.19507 fv2) (nfv.19508 fv3) (a.19452 r15) (b.19451 r14) (c.19450 r13) (d.19449 rdi) (e.19448 r8) (f.19447 r9) (g.19446 rsi) (tmp.19504 r15)))) (begin (set! tmp-ra.19506 r15) (set! a.19452 rdi) (set! b.19451 rsi) (set! c.19450 rdx) (set! d.19449 rcx) (set! e.19448 r8) (set! f.19447 r9) (set! g.19446 fv0) (begin (set! rbp (- rbp 16)) (return-point L.rp.2440 (begin (set! nfv.19508 64) (set! nfv.19507 g.19446) (set! r9 f.19447) (set! r8 e.19448) (set! rcx d.19449) (set! rdx c.19450) (set! rsi b.19451) (set! rdi a.19452) (set! r15 L.rp.2440) (jump L.G.2437 rbp r15 rdi rsi rdx rcx r8 r9 nfv.19507 nfv.19508))) (set! rbp (+ rbp 16))) (set! tmp.19504 rax) (set! rsi tmp.19504) (set! rdi 80) (set! r15 tmp-ra.19506) (jump L.+.2439 rbp r15 rdi rsi))) (define L.G.2437 ((locals ()) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 tmp-ra.19509 rbp) (rsi rdx rcx r8 r9 fv0 fv1 a.19460 tmp-ra.19509 rbp) (rdx rcx r8 r9 fv0 fv1 b.19459 a.19460 tmp-ra.19509 rbp) (rcx r8 r9 fv0 fv1 c.19458 b.19459 a.19460 tmp-ra.19509 rbp) (r8 r9 fv0 fv1 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 rbp) (r9 fv0 fv1 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 rbp) (fv0 fv1 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 rbp) (fv1 g.19454 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 rbp) (h.19453 g.19454 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 rbp) (h.19453 g.19454 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 fv2 rbp) (g.19454 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 fv2 fv1 rbp) (f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 fv2 fv1 fv0 rbp) (e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 fv2 fv1 fv0 r9 rbp) (d.19457 c.19458 b.19459 a.19460 tmp-ra.19509 fv2 fv1 fv0 r9 r8 rbp) (c.19458 b.19459 a.19460 tmp-ra.19509 fv2 fv1 fv0 r9 r8 rcx rbp) (b.19459 a.19460 tmp-ra.19509 fv2 fv1 fv0 r9 r8 rcx rdx rbp) (a.19460 tmp-ra.19509 fv2 fv1 fv0 r9 r8 rcx rdx rsi rbp) (tmp-ra.19509 fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp) (fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.19509 (fv2 h.19453 g.19454 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 rbp fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.19460 (fv2 h.19453 g.19454 f.19455 e.19456 d.19457 c.19458 b.19459 rbp tmp-ra.19509 fv1 fv0 r9 r8 rcx rdx rsi)) (b.19459 (fv2 h.19453 g.19454 f.19455 e.19456 d.19457 c.19458 rbp tmp-ra.19509 a.19460 fv1 fv0 r9 r8 rcx rdx)) (c.19458 (fv2 h.19453 g.19454 f.19455 e.19456 d.19457 rbp tmp-ra.19509 a.19460 b.19459 fv1 fv0 r9 r8 rcx)) (d.19457 (fv2 h.19453 g.19454 f.19455 e.19456 rbp tmp-ra.19509 a.19460 b.19459 c.19458 fv1 fv0 r9 r8)) (e.19456 (fv2 h.19453 g.19454 f.19455 rbp tmp-ra.19509 a.19460 b.19459 c.19458 d.19457 fv1 fv0 r9)) (f.19455 (fv2 h.19453 g.19454 rbp tmp-ra.19509 a.19460 b.19459 c.19458 d.19457 e.19456 fv1 fv0)) (g.19454 (fv2 h.19453 rbp tmp-ra.19509 a.19460 b.19459 c.19458 d.19457 e.19456 f.19455 fv1)) (h.19453 (fv2 rbp tmp-ra.19509 a.19460 b.19459 c.19458 d.19457 e.19456 f.19455 g.19454)) (rdi (r15 rbp rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.19509)) (rsi (r15 rdi rbp rdx rcx r8 r9 fv0 fv1 fv2 a.19460 tmp-ra.19509)) (rdx (r15 rdi rsi rbp rcx r8 r9 fv0 fv1 fv2 b.19459 a.19460 tmp-ra.19509)) (rcx (r15 rdi rsi rdx rbp r8 r9 fv0 fv1 fv2 c.19458 b.19459 a.19460 tmp-ra.19509)) (r8 (r15 rdi rsi rdx rcx rbp r9 fv0 fv1 fv2 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509)) (r9 (r15 rdi rsi rdx rcx r8 rbp fv0 fv1 fv2 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509)) (fv0 (r15 rdi rsi rdx rcx r8 r9 rbp fv1 fv2 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509)) (fv1 (r15 rdi rsi rdx rcx r8 r9 fv0 rbp fv2 g.19454 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509)) (rbp (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 h.19453 g.19454 f.19455 e.19456 d.19457 c.19458 b.19459 a.19460 tmp-ra.19509)) (fv2 (r15 rdi rsi rdx rcx r8 r9 fv0 fv1 rbp tmp-ra.19509 a.19460 b.19459 c.19458 d.19457 e.19456 f.19455 g.19454 h.19453)) (r15 (rbp rdi rsi rdx rcx r8 r9 fv0 fv1 fv2)))) (assignment ((tmp-ra.19509 r15) (a.19460 r14) (b.19459 r13) (c.19458 rdi) (d.19457 rsi) (e.19456 r8) (f.19455 r9) (g.19454 rdx) (h.19453 rcx)))) (begin (set! tmp-ra.19509 r15) (set! a.19460 rdi) (set! b.19459 rsi) (set! c.19458 rdx) (set! d.19457 rcx) (set! e.19456 r8) (set! f.19455 r9) (set! g.19454 fv0) (set! h.19453 fv1) (set! fv2 72) (set! fv1 h.19453) (set! fv0 g.19454) (set! r9 f.19455) (set! r8 e.19456) (set! rcx d.19457) (set! rdx c.19458) (set! rsi b.19459) (set! rdi a.19460) (set! r15 tmp-ra.19509) (jump L.H.2438 rbp r15 rdi rsi rdx rcx r8 r9 fv0 fv1 fv2))) (define L.H.2438 ((locals ()) (undead-out ((rdi rsi rdx rcx r8 r9 fv0 fv1 fv2 tmp-ra.19510 rbp) (rsi rdx rcx r8 r9 fv0 fv1 fv2 a.19469 tmp-ra.19510 rbp) (rdx rcx r8 r9 fv0 fv1 fv2 a.19469 b.19468 tmp-ra.19510 rbp) (rcx r8 r9 fv0 fv1 fv2 a.19469 b.19468 c.19467 tmp-ra.19510 rbp) (r8 r9 fv0 fv1 fv2 a.19469 b.19468 c.19467 d.19466 tmp-ra.19510 rbp) (r9 fv0 fv1 fv2 a.19469 b.19468 c.19467 d.19466 e.19465 tmp-ra.19510 rbp) (fv0 fv1 fv2 a.19469 b.19468 c.19467 d.19466 e.19465 f.19464 tmp-ra.19510 rbp) (fv1 fv2 a.19469 b.19468 c.19467 d.19466 e.19465 f.19464 g.19463 tmp-ra.19510 rbp) (fv2 a.19469 b.19468 c.19467 d.19466 e.19465 f.19464 g.19463 h.19462 tmp-ra.19510 rbp) (a.19469 b.19468 c.19467 d.19466 e.19465 f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((rax c.19467 d.19466 e.19465 f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((a.19469 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r1.19470 c.19467 d.19466 e.19465 f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((rax d.19466 e.19465 f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((r1.19470 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r2.19471 d.19466 e.19465 f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((rax e.19465 f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((r2.19471 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r3.19472 e.19465 f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((rax f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((r3.19472 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r4.19473 f.19464 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((rax g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((r4.19473 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r5.19474 g.19463 h.19462 j.19461 tmp-ra.19510 rbp) ((rax h.19462 j.19461 tmp-ra.19510 rbp) ((r5.19474 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (r6.19475 h.19462 j.19461 tmp-ra.19510 rbp) ((rax j.19461 tmp-ra.19510 rbp) ((r6.19475 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (j.19461 r7.19476 tmp-ra.19510 rbp) (r7.19476 tmp-ra.19510 rsi rbp) (tmp-ra.19510 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.19510 (r7.19476 r6.19475 r5.19474 r4.19473 r3.19472 r2.19471 r1.19470 j.19461 h.19462 g.19463 f.19464 e.19465 d.19466 c.19467 b.19468 a.19469 rbp fv2 fv1 fv0 r9 r8 rcx rdx rsi rdi)) (a.19469 (j.19461 h.19462 g.19463 f.19464 e.19465 d.19466 c.19467 b.19468 rbp tmp-ra.19510 fv2 fv1 fv0 r9 r8 rcx rdx rsi)) (b.19468 (j.19461 h.19462 g.19463 f.19464 e.19465 d.19466 c.19467 rbp tmp-ra.19510 a.19469 fv2 fv1 fv0 r9 r8 rcx rdx)) (c.19467 (r1.19470 j.19461 h.19462 g.19463 f.19464 e.19465 d.19466 rbp tmp-ra.19510 b.19468 a.19469 fv2 fv1 fv0 r9 r8 rcx)) (d.19466 (r2.19471 r1.19470 j.19461 h.19462 g.19463 f.19464 e.19465 rbp tmp-ra.19510 c.19467 b.19468 a.19469 fv2 fv1 fv0 r9 r8)) (e.19465 (r3.19472 r2.19471 r1.19470 j.19461 h.19462 g.19463 f.19464 rbp tmp-ra.19510 d.19466 c.19467 b.19468 a.19469 fv2 fv1 fv0 r9)) (f.19464 (r4.19473 r3.19472 r2.19471 r1.19470 j.19461 h.19462 g.19463 rbp tmp-ra.19510 e.19465 d.19466 c.19467 b.19468 a.19469 fv2 fv1 fv0)) (g.19463 (r5.19474 r4.19473 r3.19472 r2.19471 r1.19470 j.19461 h.19462 rbp tmp-ra.19510 f.19464 e.19465 d.19466 c.19467 b.19468 a.19469 fv2 fv1)) (h.19462 (r6.19475 r5.19474 r4.19473 r3.19472 r2.19471 r1.19470 j.19461 rbp tmp-ra.19510 g.19463 f.19464 e.19465 d.19466 c.19467 b.19468 a.19469 fv2)) (j.19461 (r7.19476 r6.19475 r5.19474 r4.19473 r3.19472 r2.19471 r1.19470 rbp tmp-ra.19510 h.19462 g.19463 f.19464 e.19465 d.19466 c.19467 b.19468 a.19469)) (r1.19470 (rsi rbp tmp-ra.19510 j.19461 h.19462 g.19463 f.19464 e.19465 d.19466 c.19467)) (r2.19471 (rsi rbp tmp-ra.19510 j.19461 h.19462 g.19463 f.19464 e.19465 d.19466)) (r3.19472 (rsi rbp tmp-ra.19510 j.19461 h.19462 g.19463 f.19464 e.19465)) (r4.19473 (rsi rbp tmp-ra.19510 j.19461 h.19462 g.19463 f.19464)) (r5.19474 (rsi rbp tmp-ra.19510 j.19461 h.19462 g.19463)) (r6.19475 (rsi rbp tmp-ra.19510 j.19461 h.19462)) (r7.19476 (rsi rbp tmp-ra.19510 j.19461)) (rdi (r15 rbp rsi tmp-ra.19510)) (rsi (r7.19476 r6.19475 r5.19474 r4.19473 r3.19472 r2.19471 r1.19470 r15 rdi rbp a.19469 tmp-ra.19510)) (rdx (b.19468 a.19469 tmp-ra.19510)) (rcx (c.19467 b.19468 a.19469 tmp-ra.19510)) (r8 (d.19466 c.19467 b.19468 a.19469 tmp-ra.19510)) (r9 (e.19465 d.19466 c.19467 b.19468 a.19469 tmp-ra.19510)) (fv0 (f.19464 e.19465 d.19466 c.19467 b.19468 a.19469 tmp-ra.19510)) (fv1 (g.19463 f.19464 e.19465 d.19466 c.19467 b.19468 a.19469 tmp-ra.19510)) (fv2 (h.19462 g.19463 f.19464 e.19465 d.19466 c.19467 b.19468 a.19469 tmp-ra.19510)) (rbp (r7.19476 r6.19475 r5.19474 r4.19473 r3.19472 r2.19471 r1.19470 r15 rdi rsi j.19461 h.19462 g.19463 f.19464 e.19465 d.19466 c.19467 b.19468 a.19469 tmp-ra.19510)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.19510 fv3) (j.19461 fv0) (h.19462 fv1) (g.19463 fv4) (f.19464 fv5) (e.19465 fv6) (d.19466 fv7) (c.19467 fv8) (a.19469 r15) (b.19468 r14) (r1.19470 r15) (r2.19471 r15) (r3.19472 r15) (r4.19473 r15) (r5.19474 r15) (r6.19475 r15) (r7.19476 r15)))) (begin (set! tmp-ra.19510 r15) (set! a.19469 rdi) (set! b.19468 rsi) (set! c.19467 rdx) (set! d.19466 rcx) (set! e.19465 r8) (set! f.19464 r9) (set! g.19463 fv0) (set! h.19462 fv1) (set! j.19461 fv2) (begin (set! rbp (- rbp 72)) (return-point L.rp.2441 (begin (set! rsi b.19468) (set! rdi a.19469) (set! r15 L.rp.2441) (jump L.+.2439 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r1.19470 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2442 (begin (set! rsi c.19467) (set! rdi r1.19470) (set! r15 L.rp.2442) (jump L.+.2439 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r2.19471 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2443 (begin (set! rsi d.19466) (set! rdi r2.19471) (set! r15 L.rp.2443) (jump L.+.2439 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r3.19472 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2444 (begin (set! rsi e.19465) (set! rdi r3.19472) (set! r15 L.rp.2444) (jump L.+.2439 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r4.19473 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2445 (begin (set! rsi f.19464) (set! rdi r4.19473) (set! r15 L.rp.2445) (jump L.+.2439 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r5.19474 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2446 (begin (set! rsi g.19463) (set! rdi r5.19474) (set! r15 L.rp.2446) (jump L.+.2439 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r6.19475 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2447 (begin (set! rsi h.19462) (set! rdi r6.19475) (set! r15 L.rp.2447) (jump L.+.2439 rbp r15 rdi rsi))) (set! rbp (+ rbp 72))) (set! r7.19476 rax) (set! rsi j.19461) (set! rdi r7.19476) (set! r15 tmp-ra.19510) (jump L.+.2439 rbp r15 rdi rsi))) (begin (set! tmp-ra.19511 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.19511) (jump L.F.2436 rbp r15 rdi rsi rdx rcx r8 r9 fv0))) (module ((locals ()) (undead-out ((tmp-ra.19544 rbp) (tmp-ra.19544 rsi rbp) (tmp-ra.19544 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.19544 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.19544)) (rsi (r15 rdi rbp tmp-ra.19544)) (rdi (r15 rbp rsi tmp-ra.19544)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.19544 r15)))) (define L.<.2449 ((locals ()) (undead-out ((rdi rsi tmp-ra.19542 rbp) (rsi tmp.19520 tmp-ra.19542 rbp) (tmp.19521 tmp.19520 tmp-ra.19542 rbp) ((((((tmp.19538 tmp.19521 tmp.19520 tmp-ra.19542 rbp) (tmp.19538 tmp.19521 tmp.19520 tmp-ra.19542 rbp)) (tmp.19521 tmp.19520 tmp-ra.19542 rbp)) (tmp.19537 tmp.19521 tmp.19520 tmp-ra.19542 rbp) (tmp.19537 tmp.19521 tmp.19520 tmp-ra.19542 rbp)) (tmp.19521 tmp.19520 tmp-ra.19542 rbp)) ((((((tmp.19540 tmp.19521 tmp.19520 tmp-ra.19542 rbp) (tmp.19540 tmp.19521 tmp.19520 tmp-ra.19542 rbp)) (tmp.19521 tmp.19520 tmp-ra.19542 rbp)) (tmp.19539 tmp.19521 tmp.19520 tmp-ra.19542 rbp) (tmp.19539 tmp.19521 tmp.19520 tmp-ra.19542 rbp)) (tmp.19521 tmp.19520 tmp-ra.19542 rbp)) ((tmp-ra.19542 rbp) ((tmp-ra.19542 rax rbp) (rax rbp)) ((tmp-ra.19542 rax rbp) (rax rbp))) ((tmp-ra.19542 rax rbp) (rax rbp))) ((tmp-ra.19542 rax rbp) (rax rbp))))) (conflicts ((tmp.19537 (rbp tmp-ra.19542 tmp.19520 tmp.19521)) (tmp.19521 (rbp tmp-ra.19542 tmp.19520 tmp.19538 tmp.19537 tmp.19540 tmp.19539)) (tmp.19538 (rbp tmp-ra.19542 tmp.19520 tmp.19521)) (tmp-ra.19542 (tmp.19521 tmp.19520 rbp rsi rdi tmp.19538 tmp.19537 tmp.19540 tmp.19539 rax)) (tmp.19540 (rbp tmp-ra.19542 tmp.19520 tmp.19521)) (tmp.19520 (tmp.19521 rbp tmp-ra.19542 rsi tmp.19538 tmp.19537 tmp.19540 tmp.19539)) (tmp.19539 (rbp tmp-ra.19542 tmp.19520 tmp.19521)) (rax (rbp tmp-ra.19542)) (rbp (tmp.19521 tmp.19520 tmp-ra.19542 tmp.19538 tmp.19537 tmp.19540 tmp.19539 rax)) (rdi (tmp-ra.19542)) (rsi (tmp.19520 tmp-ra.19542)))) (assignment ((tmp-ra.19542 r15) (tmp.19520 r14) (tmp.19521 r13) (tmp.19537 r9) (tmp.19538 r9) (tmp.19540 r9) (tmp.19539 r9)))) (begin (set! tmp-ra.19542 r15) (set! tmp.19520 rdi) (set! tmp.19521 rsi) (if (begin (if (begin (begin (set! tmp.19538 tmp.19521) (set! tmp.19538 (bitwise-and tmp.19538 7))) (= tmp.19538 0)) (set! tmp.19537 14) (set! tmp.19537 6)) (!= tmp.19537 6)) (if (begin (if (begin (begin (set! tmp.19540 tmp.19520) (set! tmp.19540 (bitwise-and tmp.19540 7))) (= tmp.19540 0)) (set! tmp.19539 14) (set! tmp.19539 6)) (!= tmp.19539 6)) (if (< tmp.19520 tmp.19521) (begin (set! rax 14) (jump tmp-ra.19542 rbp rax)) (begin (set! rax 6) (jump tmp-ra.19542 rbp rax))) (begin (set! rax 830) (jump tmp-ra.19542 rbp rax))) (begin (set! rax 830) (jump tmp-ra.19542 rbp rax))))) (define L.swap.2448 ((locals ()) (undead-out ((rdi rsi tmp-ra.19543 rbp) (rsi x.19513 tmp-ra.19543 rbp) (y.19512 x.19513 tmp-ra.19543 rbp) (((((rax y.19512 x.19513 tmp-ra.19543 rbp) ((y.19512 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.19541 y.19512 x.19513 tmp-ra.19543 rbp)) (y.19512 x.19513 tmp-ra.19543 rbp)) ((tmp-ra.19543 rax rbp) (rax rbp)) ((y.19512 tmp-ra.19543 rsi rbp) (tmp-ra.19543 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.19541 (rbp tmp-ra.19543 x.19513 y.19512)) (y.19512 (rbp tmp-ra.19543 x.19513 tmp.19541 rsi)) (x.19513 (y.19512 rbp tmp-ra.19543 rsi tmp.19541)) (tmp-ra.19543 (y.19512 x.19513 rbp tmp.19541 rax rdi rsi)) (rsi (x.19513 r15 rdi rbp tmp-ra.19543 y.19512)) (rbp (y.19512 x.19513 tmp-ra.19543 tmp.19541 rax r15 rdi rsi)) (rdi (r15 rbp rsi tmp-ra.19543)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.19543)))) (assignment ((tmp-ra.19543 fv0) (x.19513 fv1) (y.19512 fv2) (tmp.19541 r15)))) (begin (set! tmp-ra.19543 r15) (set! x.19513 rdi) (set! y.19512 rsi) (if (begin (begin (begin (set! rbp (- rbp 24)) (return-point L.rp.2450 (begin (set! rsi x.19513) (set! rdi y.19512) (set! r15 L.rp.2450) (jump L.<.2449 rbp r15 rdi rsi))) (set! rbp (+ rbp 24))) (set! tmp.19541 rax)) (!= tmp.19541 6)) (begin (set! rax x.19513) (jump tmp-ra.19543 rbp rax)) (begin (set! rsi x.19513) (set! rdi y.19512) (set! r15 tmp-ra.19543) (jump L.swap.2448 rbp r15 rdi rsi))))) (begin (set! tmp-ra.19544 r15) (set! rsi 16) (set! rdi 8) (set! r15 tmp-ra.19544) (jump L.swap.2448 rbp r15 rdi rsi))) (module ((locals ()) (undead-out ((tmp-ra.19585 rbp) (tmp-ra.19585 rsi rbp) (tmp-ra.19585 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (conflicts ((tmp-ra.19585 (rdi rsi rbp)) (rbp (r15 rdi rsi tmp-ra.19585)) (rsi (r15 rdi rbp tmp-ra.19585)) (rdi (r15 rbp rsi tmp-ra.19585)) (r15 (rbp rdi rsi)))) (assignment ((tmp-ra.19585 r15)))) (define L.*.2453 ((locals ()) (undead-out ((rdi rsi tmp-ra.19582 rbp) (rsi tmp.19547 tmp-ra.19582 rbp) (tmp.19548 tmp.19547 tmp-ra.19582 rbp) ((((((tmp.19571 tmp.19548 tmp.19547 tmp-ra.19582 rbp) (tmp.19571 tmp.19548 tmp.19547 tmp-ra.19582 rbp)) (tmp.19548 tmp.19547 tmp-ra.19582 rbp)) (tmp.19570 tmp.19548 tmp.19547 tmp-ra.19582 rbp) (tmp.19570 tmp.19548 tmp.19547 tmp-ra.19582 rbp)) (tmp.19548 tmp.19547 tmp-ra.19582 rbp)) ((((((tmp.19573 tmp.19548 tmp.19547 tmp-ra.19582 rbp) (tmp.19573 tmp.19548 tmp.19547 tmp-ra.19582 rbp)) (tmp.19548 tmp.19547 tmp-ra.19582 rbp)) (tmp.19572 tmp.19548 tmp.19547 tmp-ra.19582 rbp) (tmp.19572 tmp.19548 tmp.19547 tmp-ra.19582 rbp)) (tmp.19548 tmp.19547 tmp-ra.19582 rbp)) ((tmp.19574 tmp.19547 tmp-ra.19582 rbp) (tmp.19547 tmp.19574 tmp-ra.19582 rbp) (tmp.19574 rax tmp-ra.19582 rbp) (tmp-ra.19582 rax rbp) (rax rbp)) ((tmp-ra.19582 rax rbp) (rax rbp))) ((tmp-ra.19582 rax rbp) (rax rbp))))) (conflicts ((tmp.19570 (rbp tmp-ra.19582 tmp.19547 tmp.19548)) (tmp.19548 (rbp tmp-ra.19582 tmp.19547 tmp.19571 tmp.19570 tmp.19573 tmp.19572)) (tmp.19571 (rbp tmp-ra.19582 tmp.19547 tmp.19548)) (tmp-ra.19582 (tmp.19548 tmp.19547 rbp rsi rdi tmp.19571 tmp.19570 tmp.19573 tmp.19572 tmp.19574 rax)) (tmp.19574 (rax rbp tmp-ra.19582 tmp.19547)) (tmp.19573 (rbp tmp-ra.19582 tmp.19547 tmp.19548)) (tmp.19547 (tmp.19548 rbp tmp-ra.19582 rsi tmp.19571 tmp.19570 tmp.19573 tmp.19572 tmp.19574)) (tmp.19572 (rbp tmp-ra.19582 tmp.19547 tmp.19548)) (rax (tmp.19574 rbp tmp-ra.19582)) (rbp (tmp.19548 tmp.19547 tmp-ra.19582 tmp.19571 tmp.19570 tmp.19573 tmp.19572 tmp.19574 rax)) (rdi (tmp-ra.19582)) (rsi (tmp.19547 tmp-ra.19582)))) (assignment ((tmp-ra.19582 r15) (tmp.19547 r14) (tmp.19548 r13) (tmp.19570 r9) (tmp.19571 r9) (tmp.19574 r13) (tmp.19573 r9) (tmp.19572 r9)))) (begin (set! tmp-ra.19582 r15) (set! tmp.19547 rdi) (set! tmp.19548 rsi) (if (begin (if (begin (begin (set! tmp.19571 tmp.19548) (set! tmp.19571 (bitwise-and tmp.19571 7))) (= tmp.19571 0)) (set! tmp.19570 14) (set! tmp.19570 6)) (!= tmp.19570 6)) (if (begin (if (begin (begin (set! tmp.19573 tmp.19547) (set! tmp.19573 (bitwise-and tmp.19573 7))) (= tmp.19573 0)) (set! tmp.19572 14) (set! tmp.19572 6)) (!= tmp.19572 6)) (begin (set! tmp.19574 tmp.19548) (set! tmp.19574 (arithmetic-shift-right tmp.19574 3)) (set! rax tmp.19547) (set! rax (* rax tmp.19574)) (jump tmp-ra.19582 rbp rax)) (begin (set! rax 62) (jump tmp-ra.19582 rbp rax))) (begin (set! rax 62) (jump tmp-ra.19582 rbp rax))))) (define L.-.2452 ((locals ()) (undead-out ((rdi rsi tmp-ra.19583 rbp) (rsi tmp.19551 tmp-ra.19583 rbp) (tmp.19551 tmp.19552 tmp-ra.19583 rbp) ((((((tmp.19576 tmp.19551 tmp.19552 tmp-ra.19583 rbp) (tmp.19576 tmp.19551 tmp.19552 tmp-ra.19583 rbp)) (tmp.19551 tmp.19552 tmp-ra.19583 rbp)) (tmp.19575 tmp.19551 tmp.19552 tmp-ra.19583 rbp) (tmp.19575 tmp.19551 tmp.19552 tmp-ra.19583 rbp)) (tmp.19551 tmp.19552 tmp-ra.19583 rbp)) ((((((tmp.19578 tmp.19551 tmp.19552 tmp-ra.19583 rbp) (tmp.19578 tmp.19551 tmp.19552 tmp-ra.19583 rbp)) (tmp.19551 tmp.19552 tmp-ra.19583 rbp)) (tmp.19577 tmp.19551 tmp.19552 tmp-ra.19583 rbp) (tmp.19577 tmp.19551 tmp.19552 tmp-ra.19583 rbp)) (tmp.19551 tmp.19552 tmp-ra.19583 rbp)) ((tmp.19552 rax tmp-ra.19583 rbp) (tmp-ra.19583 rax rbp) (rax rbp)) ((tmp-ra.19583 rax rbp) (rax rbp))) ((tmp-ra.19583 rax rbp) (rax rbp))))) (conflicts ((tmp.19575 (rbp tmp-ra.19583 tmp.19552 tmp.19551)) (tmp.19552 (rbp tmp-ra.19583 tmp.19551 tmp.19576 tmp.19575 tmp.19578 tmp.19577 rax)) (tmp.19576 (rbp tmp-ra.19583 tmp.19552 tmp.19551)) (tmp-ra.19583 (tmp.19552 tmp.19551 rbp rsi rdi tmp.19576 tmp.19575 tmp.19578 tmp.19577 rax)) (tmp.19578 (rbp tmp-ra.19583 tmp.19552 tmp.19551)) (tmp.19551 (tmp.19552 rbp tmp-ra.19583 rsi tmp.19576 tmp.19575 tmp.19578 tmp.19577)) (tmp.19577 (rbp tmp-ra.19583 tmp.19552 tmp.19551)) (rax (tmp.19552 rbp tmp-ra.19583)) (rbp (tmp.19552 tmp.19551 tmp-ra.19583 tmp.19576 tmp.19575 tmp.19578 tmp.19577 rax)) (rdi (tmp-ra.19583)) (rsi (tmp.19551 tmp-ra.19583)))) (assignment ((tmp-ra.19583 r15) (tmp.19552 r14) (tmp.19551 r13) (tmp.19575 r9) (tmp.19576 r9) (tmp.19578 r9) (tmp.19577 r9)))) (begin (set! tmp-ra.19583 r15) (set! tmp.19551 rdi) (set! tmp.19552 rsi) (if (begin (if (begin (begin (set! tmp.19576 tmp.19552) (set! tmp.19576 (bitwise-and tmp.19576 7))) (= tmp.19576 0)) (set! tmp.19575 14) (set! tmp.19575 6)) (!= tmp.19575 6)) (if (begin (if (begin (begin (set! tmp.19578 tmp.19551) (set! tmp.19578 (bitwise-and tmp.19578 7))) (= tmp.19578 0)) (set! tmp.19577 14) (set! tmp.19577 6)) (!= tmp.19577 6)) (begin (set! rax tmp.19551) (set! rax (- rax tmp.19552)) (jump tmp-ra.19583 rbp rax)) (begin (set! rax 574) (jump tmp-ra.19583 rbp rax))) (begin (set! rax 574) (jump tmp-ra.19583 rbp rax))))) (define L.fact_loop.2451 ((locals ()) (undead-out ((rdi rsi tmp-ra.19584 rbp) (rsi n.19546 tmp-ra.19584 rbp) (n.19546 acc.19545 tmp-ra.19584 rbp) ((((n.19546 acc.19545 tmp-ra.19584 rbp) (tmp.19579 n.19546 acc.19545 tmp-ra.19584 rbp) (tmp.19579 n.19546 acc.19545 tmp-ra.19584 rbp)) (n.19546 acc.19545 tmp-ra.19584 rbp)) ((tmp-ra.19584 rax rbp) (rax rbp)) (((rax acc.19545 n.19546 tmp-ra.19584 rbp) ((n.19546 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc.19545 n.19546 tmp.19580 tmp-ra.19584 rbp) ((rax tmp.19580 tmp-ra.19584 rbp) ((acc.19545 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.19581 tmp.19580 tmp-ra.19584 rbp) (tmp.19580 tmp-ra.19584 rsi rbp) (tmp-ra.19584 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.19579 (rbp tmp-ra.19584 acc.19545 n.19546)) (n.19546 (acc.19545 rbp tmp-ra.19584 tmp.19579 tmp.19580 rsi)) (acc.19545 (rbp tmp-ra.19584 n.19546 tmp.19579 rsi tmp.19580)) (tmp-ra.19584 (acc.19545 n.19546 rbp tmp.19579 rax rdi rsi tmp.19581 tmp.19580)) (tmp.19581 (rbp tmp-ra.19584 tmp.19580)) (tmp.19580 (rsi tmp.19581 rbp tmp-ra.19584 n.19546 acc.19545)) (rsi (tmp-ra.19584 tmp.19580 acc.19545 r15 rdi rbp n.19546)) (rbp (acc.19545 n.19546 tmp-ra.19584 tmp.19579 rax tmp.19581 tmp.19580 r15 rdi rsi)) (rdi (tmp-ra.19584 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.19584)))) (assignment ((tmp-ra.19584 fv0) (n.19546 fv1) (acc.19545 fv2) (tmp.19580 fv3) (tmp.19579 r15) (tmp.19581 r15)))) (begin (set! tmp-ra.19584 r15) (set! n.19546 rdi) (set! acc.19545 rsi) (if (begin (if (= n.19546 0) (set! tmp.19579 14) (set! tmp.19579 6)) (!= tmp.19579 6)) (begin (set! rax acc.19545) (jump tmp-ra.19584 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2454 (begin (set! rsi 8) (set! rdi n.19546) (set! r15 L.rp.2454) (jump L.-.2452 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! tmp.19580 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2455 (begin (set! rsi n.19546) (set! rdi acc.19545) (set! r15 L.rp.2455) (jump L.*.2453 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! tmp.19581 rax) (set! rsi tmp.19581) (set! rdi tmp.19580) (set! r15 tmp-ra.19584) (jump L.fact_loop.2451 rbp r15 rdi rsi))))) (begin (set! tmp-ra.19585 r15) (set! rsi 8) (set! rdi 40) (set! r15 tmp-ra.19585) (jump L.fact_loop.2451 rbp r15 rdi rsi))) (module ((locals ()) (undead-out ((tmp-ra.19625 rbp) (tmp-ra.19625 rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (conflicts ((tmp-ra.19625 (rdi rbp)) (rbp (r15 rdi tmp-ra.19625)) (rdi (r15 rbp tmp-ra.19625)) (r15 (rbp rdi)))) (assignment ((tmp-ra.19625 r15)))) (define L.*.2458 ((locals ()) (undead-out ((rdi rsi tmp-ra.19622 rbp) (rsi tmp.19587 tmp-ra.19622 rbp) (tmp.19588 tmp.19587 tmp-ra.19622 rbp) ((((((tmp.19611 tmp.19588 tmp.19587 tmp-ra.19622 rbp) (tmp.19611 tmp.19588 tmp.19587 tmp-ra.19622 rbp)) (tmp.19588 tmp.19587 tmp-ra.19622 rbp)) (tmp.19610 tmp.19588 tmp.19587 tmp-ra.19622 rbp) (tmp.19610 tmp.19588 tmp.19587 tmp-ra.19622 rbp)) (tmp.19588 tmp.19587 tmp-ra.19622 rbp)) ((((((tmp.19613 tmp.19588 tmp.19587 tmp-ra.19622 rbp) (tmp.19613 tmp.19588 tmp.19587 tmp-ra.19622 rbp)) (tmp.19588 tmp.19587 tmp-ra.19622 rbp)) (tmp.19612 tmp.19588 tmp.19587 tmp-ra.19622 rbp) (tmp.19612 tmp.19588 tmp.19587 tmp-ra.19622 rbp)) (tmp.19588 tmp.19587 tmp-ra.19622 rbp)) ((tmp.19614 tmp.19587 tmp-ra.19622 rbp) (tmp.19587 tmp.19614 tmp-ra.19622 rbp) (tmp.19614 rax tmp-ra.19622 rbp) (tmp-ra.19622 rax rbp) (rax rbp)) ((tmp-ra.19622 rax rbp) (rax rbp))) ((tmp-ra.19622 rax rbp) (rax rbp))))) (conflicts ((tmp.19610 (rbp tmp-ra.19622 tmp.19587 tmp.19588)) (tmp.19588 (rbp tmp-ra.19622 tmp.19587 tmp.19611 tmp.19610 tmp.19613 tmp.19612)) (tmp.19611 (rbp tmp-ra.19622 tmp.19587 tmp.19588)) (tmp-ra.19622 (tmp.19588 tmp.19587 rbp rsi rdi tmp.19611 tmp.19610 tmp.19613 tmp.19612 tmp.19614 rax)) (tmp.19614 (rax rbp tmp-ra.19622 tmp.19587)) (tmp.19613 (rbp tmp-ra.19622 tmp.19587 tmp.19588)) (tmp.19587 (tmp.19588 rbp tmp-ra.19622 rsi tmp.19611 tmp.19610 tmp.19613 tmp.19612 tmp.19614)) (tmp.19612 (rbp tmp-ra.19622 tmp.19587 tmp.19588)) (rax (tmp.19614 rbp tmp-ra.19622)) (rbp (tmp.19588 tmp.19587 tmp-ra.19622 tmp.19611 tmp.19610 tmp.19613 tmp.19612 tmp.19614 rax)) (rdi (tmp-ra.19622)) (rsi (tmp.19587 tmp-ra.19622)))) (assignment ((tmp-ra.19622 r15) (tmp.19587 r14) (tmp.19588 r13) (tmp.19610 r9) (tmp.19611 r9) (tmp.19614 r13) (tmp.19613 r9) (tmp.19612 r9)))) (begin (set! tmp-ra.19622 r15) (set! tmp.19587 rdi) (set! tmp.19588 rsi) (if (begin (if (begin (begin (set! tmp.19611 tmp.19588) (set! tmp.19611 (bitwise-and tmp.19611 7))) (= tmp.19611 0)) (set! tmp.19610 14) (set! tmp.19610 6)) (!= tmp.19610 6)) (if (begin (if (begin (begin (set! tmp.19613 tmp.19587) (set! tmp.19613 (bitwise-and tmp.19613 7))) (= tmp.19613 0)) (set! tmp.19612 14) (set! tmp.19612 6)) (!= tmp.19612 6)) (begin (set! tmp.19614 tmp.19588) (set! tmp.19614 (arithmetic-shift-right tmp.19614 3)) (set! rax tmp.19587) (set! rax (* rax tmp.19614)) (jump tmp-ra.19622 rbp rax)) (begin (set! rax 62) (jump tmp-ra.19622 rbp rax))) (begin (set! rax 62) (jump tmp-ra.19622 rbp rax))))) (define L.-.2457 ((locals ()) (undead-out ((rdi rsi tmp-ra.19623 rbp) (rsi tmp.19591 tmp-ra.19623 rbp) (tmp.19591 tmp.19592 tmp-ra.19623 rbp) ((((((tmp.19616 tmp.19591 tmp.19592 tmp-ra.19623 rbp) (tmp.19616 tmp.19591 tmp.19592 tmp-ra.19623 rbp)) (tmp.19591 tmp.19592 tmp-ra.19623 rbp)) (tmp.19615 tmp.19591 tmp.19592 tmp-ra.19623 rbp) (tmp.19615 tmp.19591 tmp.19592 tmp-ra.19623 rbp)) (tmp.19591 tmp.19592 tmp-ra.19623 rbp)) ((((((tmp.19618 tmp.19591 tmp.19592 tmp-ra.19623 rbp) (tmp.19618 tmp.19591 tmp.19592 tmp-ra.19623 rbp)) (tmp.19591 tmp.19592 tmp-ra.19623 rbp)) (tmp.19617 tmp.19591 tmp.19592 tmp-ra.19623 rbp) (tmp.19617 tmp.19591 tmp.19592 tmp-ra.19623 rbp)) (tmp.19591 tmp.19592 tmp-ra.19623 rbp)) ((tmp.19592 rax tmp-ra.19623 rbp) (tmp-ra.19623 rax rbp) (rax rbp)) ((tmp-ra.19623 rax rbp) (rax rbp))) ((tmp-ra.19623 rax rbp) (rax rbp))))) (conflicts ((tmp.19615 (rbp tmp-ra.19623 tmp.19592 tmp.19591)) (tmp.19592 (rbp tmp-ra.19623 tmp.19591 tmp.19616 tmp.19615 tmp.19618 tmp.19617 rax)) (tmp.19616 (rbp tmp-ra.19623 tmp.19592 tmp.19591)) (tmp-ra.19623 (tmp.19592 tmp.19591 rbp rsi rdi tmp.19616 tmp.19615 tmp.19618 tmp.19617 rax)) (tmp.19618 (rbp tmp-ra.19623 tmp.19592 tmp.19591)) (tmp.19591 (tmp.19592 rbp tmp-ra.19623 rsi tmp.19616 tmp.19615 tmp.19618 tmp.19617)) (tmp.19617 (rbp tmp-ra.19623 tmp.19592 tmp.19591)) (rax (tmp.19592 rbp tmp-ra.19623)) (rbp (tmp.19592 tmp.19591 tmp-ra.19623 tmp.19616 tmp.19615 tmp.19618 tmp.19617 rax)) (rdi (tmp-ra.19623)) (rsi (tmp.19591 tmp-ra.19623)))) (assignment ((tmp-ra.19623 r15) (tmp.19592 r14) (tmp.19591 r13) (tmp.19615 r9) (tmp.19616 r9) (tmp.19618 r9) (tmp.19617 r9)))) (begin (set! tmp-ra.19623 r15) (set! tmp.19591 rdi) (set! tmp.19592 rsi) (if (begin (if (begin (begin (set! tmp.19616 tmp.19592) (set! tmp.19616 (bitwise-and tmp.19616 7))) (= tmp.19616 0)) (set! tmp.19615 14) (set! tmp.19615 6)) (!= tmp.19615 6)) (if (begin (if (begin (begin (set! tmp.19618 tmp.19591) (set! tmp.19618 (bitwise-and tmp.19618 7))) (= tmp.19618 0)) (set! tmp.19617 14) (set! tmp.19617 6)) (!= tmp.19617 6)) (begin (set! rax tmp.19591) (set! rax (- rax tmp.19592)) (jump tmp-ra.19623 rbp rax)) (begin (set! rax 574) (jump tmp-ra.19623 rbp rax))) (begin (set! rax 574) (jump tmp-ra.19623 rbp rax))))) (define L.fact.2456 ((locals ()) (undead-out ((rdi tmp-ra.19624 rbp) (x.19586 tmp-ra.19624 rbp) ((((x.19586 tmp-ra.19624 rbp) (tmp.19619 x.19586 tmp-ra.19624 rbp) (tmp.19619 x.19586 tmp-ra.19624 rbp)) (x.19586 tmp-ra.19624 rbp)) ((tmp-ra.19624 rax rbp) (rax rbp)) (((rax x.19586 tmp-ra.19624 rbp) ((x.19586 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (tmp.19621 x.19586 tmp-ra.19624 rbp) ((rax x.19586 tmp-ra.19624 rbp) ((rdi rbp) (rdi r15 rbp) (rdi r15 rbp))) (tmp.19620 x.19586 tmp-ra.19624 rbp) (x.19586 tmp-ra.19624 rsi rbp) (tmp-ra.19624 rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))))) (conflicts ((tmp.19619 (rbp tmp-ra.19624 x.19586)) (x.19586 (rbp tmp-ra.19624 tmp.19619 tmp.19620 tmp.19621 rsi)) (tmp-ra.19624 (x.19586 rbp tmp.19619 rax rdi rsi tmp.19620 tmp.19621)) (tmp.19620 (rbp tmp-ra.19624 x.19586)) (tmp.19621 (rbp tmp-ra.19624 x.19586)) (rsi (tmp-ra.19624 r15 rdi rbp x.19586)) (rbp (x.19586 tmp-ra.19624 tmp.19619 rax tmp.19620 tmp.19621 r15 rdi rsi)) (rdi (tmp-ra.19624 r15 rbp rsi)) (r15 (rbp rdi rsi)) (rax (rbp tmp-ra.19624)))) (assignment ((tmp-ra.19624 fv0) (x.19586 fv1) (tmp.19619 r15) (tmp.19620 r15) (tmp.19621 r15)))) (begin (set! tmp-ra.19624 r15) (set! x.19586 rdi) (if (begin (if (= x.19586 0) (set! tmp.19619 14) (set! tmp.19619 6)) (!= tmp.19619 6)) (begin (set! rax 8) (jump tmp-ra.19624 rbp rax)) (begin (begin (set! rbp (- rbp 16)) (return-point L.rp.2459 (begin (set! rsi 8) (set! rdi x.19586) (set! r15 L.rp.2459) (jump L.-.2457 rbp r15 rdi rsi))) (set! rbp (+ rbp 16))) (set! tmp.19621 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2460 (begin (set! rdi tmp.19621) (set! r15 L.rp.2460) (jump L.fact.2456 rbp r15 rdi))) (set! rbp (+ rbp 16))) (set! tmp.19620 rax) (set! rsi tmp.19620) (set! rdi x.19586) (set! r15 tmp-ra.19624) (jump L.*.2458 rbp r15 rdi rsi))))) (begin (set! tmp-ra.19625 r15) (set! rdi 40) (set! r15 tmp-ra.19625) (jump L.fact.2456 rbp r15 rdi))) (module ((locals ()) (undead-out ((tmp-ra.19662 rbp) (tmp-ra.19662 rdx rbp) (tmp-ra.19662 rdx rsi rbp) (tmp-ra.19662 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.19662 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.19662)) (rdx (r15 rdi rsi rbp tmp-ra.19662)) (rsi (r15 rdi rbp rdx tmp-ra.19662)) (rdi (r15 rbp rsi rdx tmp-ra.19662)) (r15 (rbp rdi rsi rdx)))) (assignment ((tmp-ra.19662 r15)))) (define L.+.2462 ((locals ()) (undead-out ((rdi rsi tmp-ra.19660 rbp) (rsi tmp.19633 tmp-ra.19660 rbp) (tmp.19633 tmp.19634 tmp-ra.19660 rbp) ((((((tmp.19655 tmp.19633 tmp.19634 tmp-ra.19660 rbp) (tmp.19655 tmp.19633 tmp.19634 tmp-ra.19660 rbp)) (tmp.19633 tmp.19634 tmp-ra.19660 rbp)) (tmp.19654 tmp.19633 tmp.19634 tmp-ra.19660 rbp) (tmp.19654 tmp.19633 tmp.19634 tmp-ra.19660 rbp)) (tmp.19633 tmp.19634 tmp-ra.19660 rbp)) ((((((tmp.19657 tmp.19633 tmp.19634 tmp-ra.19660 rbp) (tmp.19657 tmp.19633 tmp.19634 tmp-ra.19660 rbp)) (tmp.19633 tmp.19634 tmp-ra.19660 rbp)) (tmp.19656 tmp.19633 tmp.19634 tmp-ra.19660 rbp) (tmp.19656 tmp.19633 tmp.19634 tmp-ra.19660 rbp)) (tmp.19633 tmp.19634 tmp-ra.19660 rbp)) ((tmp.19634 rax tmp-ra.19660 rbp) (tmp-ra.19660 rax rbp) (rax rbp)) ((tmp-ra.19660 rax rbp) (rax rbp))) ((tmp-ra.19660 rax rbp) (rax rbp))))) (conflicts ((tmp.19654 (rbp tmp-ra.19660 tmp.19634 tmp.19633)) (tmp.19634 (rbp tmp-ra.19660 tmp.19633 tmp.19655 tmp.19654 tmp.19657 tmp.19656 rax)) (tmp.19655 (rbp tmp-ra.19660 tmp.19634 tmp.19633)) (tmp-ra.19660 (tmp.19634 tmp.19633 rbp rsi rdi tmp.19655 tmp.19654 tmp.19657 tmp.19656 rax)) (tmp.19657 (rbp tmp-ra.19660 tmp.19634 tmp.19633)) (tmp.19633 (tmp.19634 rbp tmp-ra.19660 rsi tmp.19655 tmp.19654 tmp.19657 tmp.19656)) (tmp.19656 (rbp tmp-ra.19660 tmp.19634 tmp.19633)) (rax (tmp.19634 rbp tmp-ra.19660)) (rbp (tmp.19634 tmp.19633 tmp-ra.19660 tmp.19655 tmp.19654 tmp.19657 tmp.19656 rax)) (rdi (tmp-ra.19660)) (rsi (tmp.19633 tmp-ra.19660)))) (assignment ((tmp-ra.19660 r15) (tmp.19634 r14) (tmp.19633 r13) (tmp.19654 r9) (tmp.19655 r9) (tmp.19657 r9) (tmp.19656 r9)))) (begin (set! tmp-ra.19660 r15) (set! tmp.19633 rdi) (set! tmp.19634 rsi) (if (begin (if (begin (begin (set! tmp.19655 tmp.19634) (set! tmp.19655 (bitwise-and tmp.19655 7))) (= tmp.19655 0)) (set! tmp.19654 14) (set! tmp.19654 6)) (!= tmp.19654 6)) (if (begin (if (begin (begin (set! tmp.19657 tmp.19633) (set! tmp.19657 (bitwise-and tmp.19657 7))) (= tmp.19657 0)) (set! tmp.19656 14) (set! tmp.19656 6)) (!= tmp.19656 6)) (begin (set! rax tmp.19633) (set! rax (+ rax tmp.19634)) (jump tmp-ra.19660 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19660 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19660 rbp rax))))) (define L.fib_loop.2461 ((locals ()) (undead-out ((rdi rsi rdx tmp-ra.19661 rbp) (rsi rdx n.19628 tmp-ra.19661 rbp) (rdx n.19628 acc1.19627 tmp-ra.19661 rbp) (acc2.19626 n.19628 acc1.19627 tmp-ra.19661 rbp) ((((acc2.19626 n.19628 acc1.19627 tmp-ra.19661 rbp) (tmp.19658 acc2.19626 n.19628 acc1.19627 tmp-ra.19661 rbp) (tmp.19658 acc2.19626 n.19628 acc1.19627 tmp-ra.19661 rbp)) (acc2.19626 n.19628 acc1.19627 tmp-ra.19661 rbp)) ((tmp-ra.19661 rax rbp) (rax rbp)) ((((acc1.19627 n.19628 acc2.19626 tmp-ra.19661 rbp) (tmp.19659 acc1.19627 n.19628 acc2.19626 tmp-ra.19661 rbp) (tmp.19659 acc1.19627 n.19628 acc2.19626 tmp-ra.19661 rbp)) (acc1.19627 n.19628 acc2.19626 tmp-ra.19661 rbp)) ((tmp-ra.19661 rax rbp) (rax rbp)) (((rax acc1.19627 acc2.19626 tmp-ra.19661 rbp) ((n.19628 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.19627 acc2.19626 new-n.19629 tmp-ra.19661 rbp) ((rax acc2.19626 new-n.19629 tmp-ra.19661 rbp) ((acc1.19627 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.19630 acc2.19626 new-n.19629 tmp-ra.19661 rbp) (acc2.19626 new-n.19629 tmp-ra.19661 rdx rbp) (new-n.19629 tmp-ra.19661 rdx rsi rbp) (tmp-ra.19661 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (conflicts ((tmp.19658 (rbp tmp-ra.19661 acc1.19627 n.19628 acc2.19626)) (n.19628 (acc2.19626 acc1.19627 rbp tmp-ra.19661 rdx tmp.19658 tmp.19659 rsi)) (acc1.19627 (acc2.19626 rbp tmp-ra.19661 n.19628 rdx tmp.19658 tmp.19659 rsi new-n.19629)) (tmp-ra.19661 (acc2.19626 acc1.19627 n.19628 rbp tmp.19658 tmp.19659 rax rdi rsi rdx new-acc2.19630 new-n.19629)) (new-n.19629 (rsi rdx new-acc2.19630 rbp tmp-ra.19661 acc2.19626 acc1.19627)) (new-acc2.19630 (rbp tmp-ra.19661 new-n.19629 acc2.19626)) (acc2.19626 (rbp tmp-ra.19661 acc1.19627 n.19628 tmp.19658 tmp.19659 rdx new-acc2.19630 new-n.19629)) (tmp.19659 (rbp tmp-ra.19661 acc2.19626 n.19628 acc1.19627)) (rsi (rdx tmp-ra.19661 new-n.19629 acc1.19627 r15 rdi rbp n.19628)) (rbp (acc2.19626 acc1.19627 n.19628 tmp-ra.19661 tmp.19658 tmp.19659 rax rdx new-acc2.19630 new-n.19629 r15 rdi rsi)) (rdi (rdx tmp-ra.19661 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.19627 n.19628 r15 rdi rsi rbp tmp-ra.19661 new-n.19629 acc2.19626)) (rax (rbp tmp-ra.19661)))) (assignment ((tmp-ra.19661 fv0) (acc2.19626 fv1) (acc1.19627 fv2) (new-n.19629 fv3) (n.19628 r15) (tmp.19658 r14) (tmp.19659 r14) (new-acc2.19630 r15)))) (begin (set! tmp-ra.19661 r15) (set! n.19628 rdi) (set! acc1.19627 rsi) (set! acc2.19626 rdx) (if (begin (if (= n.19628 0) (set! tmp.19658 14) (set! tmp.19658 6)) (!= tmp.19658 6)) (begin (set! rax acc1.19627) (jump tmp-ra.19661 rbp rax)) (if (begin (if (= n.19628 8) (set! tmp.19659 14) (set! tmp.19659 6)) (!= tmp.19659 6)) (begin (set! rax acc2.19626) (jump tmp-ra.19661 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2463 (begin (set! rsi -8) (set! rdi n.19628) (set! r15 L.rp.2463) (jump L.+.2462 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-n.19629 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2464 (begin (set! rsi acc2.19626) (set! rdi acc1.19627) (set! r15 L.rp.2464) (jump L.+.2462 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-acc2.19630 rax) (set! rdx new-acc2.19630) (set! rsi acc2.19626) (set! rdi new-n.19629) (set! r15 tmp-ra.19661) (jump L.fib_loop.2461 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.19662 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.19662) (jump L.fib_loop.2461 rbp r15 rdi rsi rdx))) (module ((locals ()) (undead-out ((tmp-ra.19699 rbp) (tmp-ra.19699 rdx rbp) (tmp-ra.19699 rdx rsi rbp) (tmp-ra.19699 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp))) (conflicts ((tmp-ra.19699 (rdi rsi rdx rbp)) (rbp (r15 rdi rsi rdx tmp-ra.19699)) (rdx (r15 rdi rsi rbp tmp-ra.19699)) (rsi (r15 rdi rbp rdx tmp-ra.19699)) (rdi (r15 rbp rsi rdx tmp-ra.19699)) (r15 (rbp rdi rsi rdx)))) (assignment ((tmp-ra.19699 r15)))) (define L.+.2466 ((locals ()) (undead-out ((rdi rsi tmp-ra.19697 rbp) (rsi tmp.19670 tmp-ra.19697 rbp) (tmp.19670 tmp.19671 tmp-ra.19697 rbp) ((((((tmp.19692 tmp.19670 tmp.19671 tmp-ra.19697 rbp) (tmp.19692 tmp.19670 tmp.19671 tmp-ra.19697 rbp)) (tmp.19670 tmp.19671 tmp-ra.19697 rbp)) (tmp.19691 tmp.19670 tmp.19671 tmp-ra.19697 rbp) (tmp.19691 tmp.19670 tmp.19671 tmp-ra.19697 rbp)) (tmp.19670 tmp.19671 tmp-ra.19697 rbp)) ((((((tmp.19694 tmp.19670 tmp.19671 tmp-ra.19697 rbp) (tmp.19694 tmp.19670 tmp.19671 tmp-ra.19697 rbp)) (tmp.19670 tmp.19671 tmp-ra.19697 rbp)) (tmp.19693 tmp.19670 tmp.19671 tmp-ra.19697 rbp) (tmp.19693 tmp.19670 tmp.19671 tmp-ra.19697 rbp)) (tmp.19670 tmp.19671 tmp-ra.19697 rbp)) ((tmp.19671 rax tmp-ra.19697 rbp) (tmp-ra.19697 rax rbp) (rax rbp)) ((tmp-ra.19697 rax rbp) (rax rbp))) ((tmp-ra.19697 rax rbp) (rax rbp))))) (conflicts ((tmp.19691 (rbp tmp-ra.19697 tmp.19671 tmp.19670)) (tmp.19671 (rbp tmp-ra.19697 tmp.19670 tmp.19692 tmp.19691 tmp.19694 tmp.19693 rax)) (tmp.19692 (rbp tmp-ra.19697 tmp.19671 tmp.19670)) (tmp-ra.19697 (tmp.19671 tmp.19670 rbp rsi rdi tmp.19692 tmp.19691 tmp.19694 tmp.19693 rax)) (tmp.19694 (rbp tmp-ra.19697 tmp.19671 tmp.19670)) (tmp.19670 (tmp.19671 rbp tmp-ra.19697 rsi tmp.19692 tmp.19691 tmp.19694 tmp.19693)) (tmp.19693 (rbp tmp-ra.19697 tmp.19671 tmp.19670)) (rax (tmp.19671 rbp tmp-ra.19697)) (rbp (tmp.19671 tmp.19670 tmp-ra.19697 tmp.19692 tmp.19691 tmp.19694 tmp.19693 rax)) (rdi (tmp-ra.19697)) (rsi (tmp.19670 tmp-ra.19697)))) (assignment ((tmp-ra.19697 r15) (tmp.19671 r14) (tmp.19670 r13) (tmp.19691 r9) (tmp.19692 r9) (tmp.19694 r9) (tmp.19693 r9)))) (begin (set! tmp-ra.19697 r15) (set! tmp.19670 rdi) (set! tmp.19671 rsi) (if (begin (if (begin (begin (set! tmp.19692 tmp.19671) (set! tmp.19692 (bitwise-and tmp.19692 7))) (= tmp.19692 0)) (set! tmp.19691 14) (set! tmp.19691 6)) (!= tmp.19691 6)) (if (begin (if (begin (begin (set! tmp.19694 tmp.19670) (set! tmp.19694 (bitwise-and tmp.19694 7))) (= tmp.19694 0)) (set! tmp.19693 14) (set! tmp.19693 6)) (!= tmp.19693 6)) (begin (set! rax tmp.19670) (set! rax (+ rax tmp.19671)) (jump tmp-ra.19697 rbp rax)) (begin (set! rax 318) (jump tmp-ra.19697 rbp rax))) (begin (set! rax 318) (jump tmp-ra.19697 rbp rax))))) (define L.fib_loop.2465 ((locals ()) (undead-out ((rdi rsi rdx tmp-ra.19698 rbp) (rsi rdx n.19665 tmp-ra.19698 rbp) (rdx n.19665 acc1.19664 tmp-ra.19698 rbp) (acc2.19663 n.19665 acc1.19664 tmp-ra.19698 rbp) ((((acc2.19663 n.19665 acc1.19664 tmp-ra.19698 rbp) (tmp.19695 acc2.19663 n.19665 acc1.19664 tmp-ra.19698 rbp) (tmp.19695 acc2.19663 n.19665 acc1.19664 tmp-ra.19698 rbp)) (acc2.19663 n.19665 acc1.19664 tmp-ra.19698 rbp)) ((tmp-ra.19698 rax rbp) (rax rbp)) ((((acc1.19664 n.19665 acc2.19663 tmp-ra.19698 rbp) (tmp.19696 acc1.19664 n.19665 acc2.19663 tmp-ra.19698 rbp) (tmp.19696 acc1.19664 n.19665 acc2.19663 tmp-ra.19698 rbp)) (acc1.19664 n.19665 acc2.19663 tmp-ra.19698 rbp)) ((tmp-ra.19698 rax rbp) (rax rbp)) (((rax acc1.19664 acc2.19663 tmp-ra.19698 rbp) ((n.19665 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (acc1.19664 acc2.19663 new-n.19666 tmp-ra.19698 rbp) ((rax acc2.19663 new-n.19666 tmp-ra.19698 rbp) ((acc1.19664 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp))) (new-acc2.19667 acc2.19663 new-n.19666 tmp-ra.19698 rbp) (acc2.19663 new-n.19666 tmp-ra.19698 rdx rbp) (new-n.19666 tmp-ra.19698 rdx rsi rbp) (tmp-ra.19698 rdx rsi rdi rbp) (rdx rsi rdi r15 rbp) (rdx rsi rdi r15 rbp)))))) (conflicts ((tmp.19695 (rbp tmp-ra.19698 acc1.19664 n.19665 acc2.19663)) (n.19665 (acc2.19663 acc1.19664 rbp tmp-ra.19698 rdx tmp.19695 tmp.19696 rsi)) (acc1.19664 (acc2.19663 rbp tmp-ra.19698 n.19665 rdx tmp.19695 tmp.19696 rsi new-n.19666)) (tmp-ra.19698 (acc2.19663 acc1.19664 n.19665 rbp tmp.19695 tmp.19696 rax rdi rsi rdx new-acc2.19667 new-n.19666)) (new-n.19666 (rsi rdx new-acc2.19667 rbp tmp-ra.19698 acc2.19663 acc1.19664)) (new-acc2.19667 (rbp tmp-ra.19698 new-n.19666 acc2.19663)) (acc2.19663 (rbp tmp-ra.19698 acc1.19664 n.19665 tmp.19695 tmp.19696 rdx new-acc2.19667 new-n.19666)) (tmp.19696 (rbp tmp-ra.19698 acc2.19663 n.19665 acc1.19664)) (rsi (rdx tmp-ra.19698 new-n.19666 acc1.19664 r15 rdi rbp n.19665)) (rbp (acc2.19663 acc1.19664 n.19665 tmp-ra.19698 tmp.19695 tmp.19696 rax rdx new-acc2.19667 new-n.19666 r15 rdi rsi)) (rdi (rdx tmp-ra.19698 r15 rbp rsi)) (r15 (rdx rbp rdi rsi)) (rdx (acc1.19664 n.19665 r15 rdi rsi rbp tmp-ra.19698 new-n.19666 acc2.19663)) (rax (rbp tmp-ra.19698)))) (assignment ((tmp-ra.19698 fv0) (acc2.19663 fv1) (acc1.19664 fv2) (new-n.19666 fv3) (n.19665 r15) (tmp.19695 r14) (tmp.19696 r14) (new-acc2.19667 r15)))) (begin (set! tmp-ra.19698 r15) (set! n.19665 rdi) (set! acc1.19664 rsi) (set! acc2.19663 rdx) (if (begin (if (= n.19665 0) (set! tmp.19695 14) (set! tmp.19695 6)) (!= tmp.19695 6)) (begin (set! rax acc1.19664) (jump tmp-ra.19698 rbp rax)) (if (begin (if (= n.19665 8) (set! tmp.19696 14) (set! tmp.19696 6)) (!= tmp.19696 6)) (begin (set! rax acc2.19663) (jump tmp-ra.19698 rbp rax)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2467 (begin (set! rsi -8) (set! rdi n.19665) (set! r15 L.rp.2467) (jump L.+.2466 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-n.19666 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2468 (begin (set! rsi acc2.19663) (set! rdi acc1.19664) (set! r15 L.rp.2468) (jump L.+.2466 rbp r15 rdi rsi))) (set! rbp (+ rbp 32))) (set! new-acc2.19667 rax) (set! rdx new-acc2.19667) (set! rsi acc2.19663) (set! rdi new-n.19666) (set! r15 tmp-ra.19698) (jump L.fib_loop.2465 rbp r15 rdi rsi rdx)))))) (begin (set! tmp-ra.19699 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 tmp-ra.19699) (jump L.fib_loop.2465 rbp r15 rdi rsi rdx)))) ((module (define L.id.2469 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.id.2469))) (module (define L.+.2471 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.id.2470 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! fv0 r15) (begin (set! rbp (- rbp 8)) (return-point L.rp.2472 (begin (set! rdi 40) (set! r15 L.rp.2472) (jump L.id.2470))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rsi r15) (set! rdi 40) (set! r15 fv0) (jump L.+.2471))) (module (define L.+.2475 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.odd?.2473 (begin (set! fv0 r15) (set! r15 rdi) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax 0) (jump fv0)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2476 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2476) (jump L.+.2475))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 fv0) (jump L.even?.2474))))) (define L.even?.2474 (begin (set! fv0 r15) (set! r15 rdi) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax 8) (jump fv0)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2477 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2477) (jump L.+.2475))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 fv0) (jump L.odd?.2473))))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.even?.2474))) (module (define L.zero.2478 (begin (set! r15 r15) (set! r14 rdi) (set! r14 rsi) (set! r14 rdx) (set! r14 rcx) (set! rax 0) (jump r15))) (begin (set! r15 r15) (set! rax 0) (jump r15))) (module (define L.id.2479 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (set! r14 L.id.2479) (set! rdi 40) (set! r15 r15) (jump r14))) (module (define L.id1.2480 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.id2.2481 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (if (begin (set! r14 14) (!= r14 6)) (set! r14 L.id1.2480) (set! r14 L.id2.2481)) (set! rdi 40) (set! r15 r15) (jump r14))) (module (define L.*.2483 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.+.2482 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (begin (set! fv0 r15) (begin (set! rbp (- rbp 16)) (return-point L.rp.2484 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2484) (jump L.+.2482))) (set! rbp (+ rbp 16))) (set! fv1 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2485 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2485) (jump L.*.2483))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi fv1) (set! r15 fv0) (jump L.+.2482))) (module (define L.+.2486 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (begin (set! fv0 r15) (if (begin (if (begin (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2487 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2487) (jump L.+.2486))) (set! rbp (+ rbp 8))) (set! r15 rax)) (= r15 88)) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax 32) (jump fv0)) (begin (set! rax 48) (jump fv0))))) (module (begin (set! r15 r15) (set! rax 14) (jump r15))) (module (begin (set! r15 r15) (set! rax 6) (jump r15))) (module (begin (set! r15 r15) (set! rax 22) (jump r15))) (module (define L.+.2491 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.F.2488 (begin (set! fv1 r15) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! rdi rcx) (set! r8 r8) (set! r9 r9) (set! rsi fv0) (begin (set! rbp (- rbp 16)) (return-point L.rp.2492 (begin (set! fv3 64) (set! fv2 rsi) (set! r9 r9) (set! r8 r8) (set! rcx rdi) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2492) (jump L.G.2489))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi 80) (set! r15 fv1) (jump L.+.2491))) (define L.G.2489 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! rdi rdx) (set! rsi rcx) (set! r8 r8) (set! r9 r9) (set! rdx fv0) (set! rcx fv1) (set! fv2 72) (set! fv1 rcx) (set! fv0 rdx) (set! r9 r9) (set! r8 r8) (set! rcx rsi) (set! rdx rdi) (set! rsi r13) (set! rdi r14) (set! r15 r15) (jump L.H.2490))) (define L.H.2490 (begin (set! fv3 r15) (set! r15 rdi) (set! r14 rsi) (set! fv8 rdx) (set! fv7 rcx) (set! fv6 r8) (set! fv5 r9) (set! fv4 fv0) (set! fv1 fv1) (set! fv0 fv2) (begin (set! rbp (- rbp 72)) (return-point L.rp.2493 (begin (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2493) (jump L.+.2491))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2494 (begin (set! rsi fv8) (set! rdi r15) (set! r15 L.rp.2494) (jump L.+.2491))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2495 (begin (set! rsi fv7) (set! rdi r15) (set! r15 L.rp.2495) (jump L.+.2491))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2496 (begin (set! rsi fv6) (set! rdi r15) (set! r15 L.rp.2496) (jump L.+.2491))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2497 (begin (set! rsi fv5) (set! rdi r15) (set! r15 L.rp.2497) (jump L.+.2491))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2498 (begin (set! rsi fv4) (set! rdi r15) (set! r15 L.rp.2498) (jump L.+.2491))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2499 (begin (set! rsi fv1) (set! rdi r15) (set! r15 L.rp.2499) (jump L.+.2491))) (set! rbp (+ rbp 72))) (set! r15 rax) (set! rsi fv0) (set! rdi r15) (set! r15 fv3) (jump L.+.2491))) (begin (set! r15 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.F.2488))) (module (define L.<.2501 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 830) (jump r15))) (begin (set! rax 830) (jump r15))))) (define L.swap.2500 (begin (set! fv0 r15) (set! fv1 rdi) (set! fv2 rsi) (if (begin (begin (begin (set! rbp (- rbp 24)) (return-point L.rp.2502 (begin (set! rsi fv1) (set! rdi fv2) (set! r15 L.rp.2502) (jump L.<.2501))) (set! rbp (+ rbp 24))) (set! r15 rax)) (!= r15 6)) (begin (set! rax fv1) (jump fv0)) (begin (set! rsi fv1) (set! rdi fv2) (set! r15 fv0) (jump L.swap.2500))))) (begin (set! r15 r15) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.swap.2500))) (module (define L.*.2505 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.-.2504 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (- rax r14)) (jump r15)) (begin (set! rax 574) (jump r15))) (begin (set! rax 574) (jump r15))))) (define L.fact_loop.2503 (begin (set! fv0 r15) (set! fv1 rdi) (set! fv2 rsi) (if (begin (if (= fv1 0) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax fv2) (jump fv0)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2506 (begin (set! rsi 8) (set! rdi fv1) (set! r15 L.rp.2506) (jump L.-.2504))) (set! rbp (+ rbp 32))) (set! fv3 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2507 (begin (set! rsi fv1) (set! rdi fv2) (set! r15 L.rp.2507) (jump L.*.2505))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rsi r15) (set! rdi fv3) (set! r15 fv0) (jump L.fact_loop.2503))))) (begin (set! r15 r15) (set! rsi 8) (set! rdi 40) (set! r15 r15) (jump L.fact_loop.2503))) (module (define L.*.2510 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.-.2509 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (- rax r14)) (jump r15)) (begin (set! rax 574) (jump r15))) (begin (set! rax 574) (jump r15))))) (define L.fact.2508 (begin (set! fv0 r15) (set! fv1 rdi) (if (begin (if (= fv1 0) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax 8) (jump fv0)) (begin (begin (set! rbp (- rbp 16)) (return-point L.rp.2511 (begin (set! rsi 8) (set! rdi fv1) (set! r15 L.rp.2511) (jump L.-.2509))) (set! rbp (+ rbp 16))) (set! r15 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2512 (begin (set! rdi r15) (set! r15 L.rp.2512) (jump L.fact.2508))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi fv1) (set! r15 fv0) (jump L.*.2510))))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.fact.2508))) (module (define L.+.2514 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.fib_loop.2513 (begin (set! fv0 r15) (set! r15 rdi) (set! fv2 rsi) (set! fv1 rdx) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax fv2) (jump fv0)) (if (begin (if (= r15 8) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax fv1) (jump fv0)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2515 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2515) (jump L.+.2514))) (set! rbp (+ rbp 32))) (set! fv3 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2516 (begin (set! rsi fv1) (set! rdi fv2) (set! r15 L.rp.2516) (jump L.+.2514))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi fv1) (set! rdi fv3) (set! r15 fv0) (jump L.fib_loop.2513)))))) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.2513))) (module (define L.+.2518 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.fib_loop.2517 (begin (set! fv0 r15) (set! r15 rdi) (set! fv2 rsi) (set! fv1 rdx) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax fv2) (jump fv0)) (if (begin (if (= r15 8) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax fv1) (jump fv0)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2519 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2519) (jump L.+.2518))) (set! rbp (+ rbp 32))) (set! fv3 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2520 (begin (set! rsi fv1) (set! rdi fv2) (set! r15 L.rp.2520) (jump L.+.2518))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi fv1) (set! rdi fv3) (set! r15 fv0) (jump L.fib_loop.2517)))))) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.2517)))) ((module (define L.id.2521 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.id.2521))) (module (define L.+.2523 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.id.2522 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! fv0 r15) (begin (set! rbp (- rbp 8)) (return-point L.rp.2524 (begin (set! rdi 40) (set! r15 L.rp.2524) (jump L.id.2522))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rsi r15) (set! rdi 40) (set! r15 fv0) (jump L.+.2523))) (module (define L.+.2527 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.odd?.2525 (begin (set! fv0 r15) (set! r15 rdi) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax 0) (jump fv0)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2528 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2528) (jump L.+.2527))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 fv0) (jump L.even?.2526))))) (define L.even?.2526 (begin (set! fv0 r15) (set! r15 rdi) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax 8) (jump fv0)) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2529 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2529) (jump L.+.2527))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 fv0) (jump L.odd?.2525))))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.even?.2526))) (module (define L.zero.2530 (begin (set! r15 r15) (set! r14 rdi) (set! r14 rsi) (set! r14 rdx) (set! r14 rcx) (set! rax 0) (jump r15))) (begin (set! r15 r15) (set! rax 0) (jump r15))) (module (define L.id.2531 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (set! r14 L.id.2531) (set! rdi 40) (set! r15 r15) (jump r14))) (module (define L.id1.2532 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.id2.2533 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (if (begin (set! r14 14) (true)) (set! r14 L.id1.2532) (set! r14 L.id2.2533)) (set! rdi 40) (set! r15 r15) (jump r14))) (module (define L.*.2535 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.+.2534 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (begin (set! fv0 r15) (begin (set! rbp (- rbp 16)) (return-point L.rp.2536 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2536) (jump L.+.2534))) (set! rbp (+ rbp 16))) (set! fv1 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2537 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2537) (jump L.*.2535))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi fv1) (set! r15 fv0) (jump L.+.2534))) (module (define L.+.2538 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (begin (set! fv0 r15) (if (begin (if (begin (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2539 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2539) (jump L.+.2538))) (set! rbp (+ rbp 8))) (set! r15 rax)) (= r15 88)) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax 32) (jump fv0)) (begin (set! rax 48) (jump fv0))))) (module (begin (set! r15 r15) (set! rax 14) (jump r15))) (module (begin (set! r15 r15) (set! rax 6) (jump r15))) (module (begin (set! r15 r15) (set! rax 22) (jump r15))) (module (define L.+.2543 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.F.2540 (begin (set! fv1 r15) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! rdi rcx) (set! r8 r8) (set! r9 r9) (set! rsi fv0) (begin (set! rbp (- rbp 16)) (return-point L.rp.2544 (begin (set! fv3 64) (set! fv2 rsi) (set! r9 r9) (set! r8 r8) (set! rcx rdi) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2544) (jump L.G.2541))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi 80) (set! r15 fv1) (jump L.+.2543))) (define L.G.2541 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! rdi rdx) (set! rsi rcx) (set! r8 r8) (set! r9 r9) (set! rdx fv0) (set! rcx fv1) (set! fv2 72) (set! fv1 rcx) (set! fv0 rdx) (set! r9 r9) (set! r8 r8) (set! rcx rsi) (set! rdx rdi) (set! rsi r13) (set! rdi r14) (set! r15 r15) (jump L.H.2542))) (define L.H.2542 (begin (set! fv3 r15) (set! r15 rdi) (set! r14 rsi) (set! fv8 rdx) (set! fv7 rcx) (set! fv6 r8) (set! fv5 r9) (set! fv4 fv0) (set! fv1 fv1) (set! fv0 fv2) (begin (set! rbp (- rbp 72)) (return-point L.rp.2545 (begin (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2545) (jump L.+.2543))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2546 (begin (set! rsi fv8) (set! rdi r15) (set! r15 L.rp.2546) (jump L.+.2543))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2547 (begin (set! rsi fv7) (set! rdi r15) (set! r15 L.rp.2547) (jump L.+.2543))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2548 (begin (set! rsi fv6) (set! rdi r15) (set! r15 L.rp.2548) (jump L.+.2543))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2549 (begin (set! rsi fv5) (set! rdi r15) (set! r15 L.rp.2549) (jump L.+.2543))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2550 (begin (set! rsi fv4) (set! rdi r15) (set! r15 L.rp.2550) (jump L.+.2543))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2551 (begin (set! rsi fv1) (set! rdi r15) (set! r15 L.rp.2551) (jump L.+.2543))) (set! rbp (+ rbp 72))) (set! r15 rax) (set! rsi fv0) (set! rdi r15) (set! r15 fv3) (jump L.+.2543))) (begin (set! r15 r15) (set! fv0 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.F.2540))) (module (define L.<.2553 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 830) (jump r15))) (begin (set! rax 830) (jump r15))))) (define L.swap.2552 (begin (set! fv0 r15) (set! fv1 rdi) (set! fv2 rsi) (if (begin (begin (begin (set! rbp (- rbp 24)) (return-point L.rp.2554 (begin (set! rsi fv1) (set! rdi fv2) (set! r15 L.rp.2554) (jump L.<.2553))) (set! rbp (+ rbp 24))) (set! r15 rax)) (!= r15 6)) (begin (set! rax fv1) (jump fv0)) (begin (set! rsi fv1) (set! rdi fv2) (set! r15 fv0) (jump L.swap.2552))))) (begin (set! r15 r15) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.swap.2552))) (module (define L.*.2557 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.-.2556 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (- rax r14)) (jump r15)) (begin (set! rax 574) (jump r15))) (begin (set! rax 574) (jump r15))))) (define L.fact_loop.2555 (begin (set! fv0 r15) (set! fv1 rdi) (set! fv2 rsi) (if (begin (if (= fv1 0) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax fv2) (jump fv0)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2558 (begin (set! rsi 8) (set! rdi fv1) (set! r15 L.rp.2558) (jump L.-.2556))) (set! rbp (+ rbp 32))) (set! fv3 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2559 (begin (set! rsi fv1) (set! rdi fv2) (set! r15 L.rp.2559) (jump L.*.2557))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rsi r15) (set! rdi fv3) (set! r15 fv0) (jump L.fact_loop.2555))))) (begin (set! r15 r15) (set! rsi 8) (set! rdi 40) (set! r15 r15) (jump L.fact_loop.2555))) (module (define L.*.2562 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.-.2561 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (- rax r14)) (jump r15)) (begin (set! rax 574) (jump r15))) (begin (set! rax 574) (jump r15))))) (define L.fact.2560 (begin (set! fv0 r15) (set! fv1 rdi) (if (begin (if (= fv1 0) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax 8) (jump fv0)) (begin (begin (set! rbp (- rbp 16)) (return-point L.rp.2563 (begin (set! rsi 8) (set! rdi fv1) (set! r15 L.rp.2563) (jump L.-.2561))) (set! rbp (+ rbp 16))) (set! r15 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2564 (begin (set! rdi r15) (set! r15 L.rp.2564) (jump L.fact.2560))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi fv1) (set! r15 fv0) (jump L.*.2562))))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.fact.2560))) (module (define L.+.2566 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.fib_loop.2565 (begin (set! fv0 r15) (set! r15 rdi) (set! fv2 rsi) (set! fv1 rdx) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax fv2) (jump fv0)) (if (begin (if (= r15 8) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax fv1) (jump fv0)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2567 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2567) (jump L.+.2566))) (set! rbp (+ rbp 32))) (set! fv3 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2568 (begin (set! rsi fv1) (set! rdi fv2) (set! r15 L.rp.2568) (jump L.+.2566))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi fv1) (set! rdi fv3) (set! r15 fv0) (jump L.fib_loop.2565)))))) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.2565))) (module (define L.+.2570 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.fib_loop.2569 (begin (set! fv0 r15) (set! r15 rdi) (set! fv2 rsi) (set! fv1 rdx) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax fv2) (jump fv0)) (if (begin (if (= r15 8) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax fv1) (jump fv0)) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2571 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2571) (jump L.+.2570))) (set! rbp (+ rbp 32))) (set! fv3 rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2572 (begin (set! rsi fv1) (set! rdi fv2) (set! r15 L.rp.2572) (jump L.+.2570))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi fv1) (set! rdi fv3) (set! r15 fv0) (jump L.fib_loop.2569)))))) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.2569)))) ((module (define L.id.2573 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.id.2573))) (module (define L.+.2575 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.id.2574 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! (rbp - 0) r15) (begin (set! rbp (- rbp 8)) (return-point L.rp.2576 (begin (set! rdi 40) (set! r15 L.rp.2576) (jump L.id.2574))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rsi r15) (set! rdi 40) (set! r15 (rbp - 0)) (jump L.+.2575))) (module (define L.+.2579 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.odd?.2577 (begin (set! (rbp - 0) r15) (set! r15 rdi) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax 0) (jump (rbp - 0))) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2580 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2580) (jump L.+.2579))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.even?.2578))))) (define L.even?.2578 (begin (set! (rbp - 0) r15) (set! r15 rdi) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax 8) (jump (rbp - 0))) (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2581 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2581) (jump L.+.2579))) (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.odd?.2577))))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.even?.2578))) (module (define L.zero.2582 (begin (set! r15 r15) (set! r14 rdi) (set! r14 rsi) (set! r14 rdx) (set! r14 rcx) (set! rax 0) (jump r15))) (begin (set! r15 r15) (set! rax 0) (jump r15))) (module (define L.id.2583 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (set! r14 L.id.2583) (set! rdi 40) (set! r15 r15) (jump r14))) (module (define L.id1.2584 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.id2.2585 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (begin (set! r15 r15) (if (begin (set! r14 14) (true)) (set! r14 L.id1.2584) (set! r14 L.id2.2585)) (set! rdi 40) (set! r15 r15) (jump r14))) (module (define L.*.2587 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.+.2586 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (begin (set! (rbp - 0) r15) (begin (set! rbp (- rbp 16)) (return-point L.rp.2588 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2588) (jump L.+.2586))) (set! rbp (+ rbp 16))) (set! (rbp - 8) rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2589 (begin (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2589) (jump L.*.2587))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.+.2586))) (module (define L.+.2590 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (begin (set! (rbp - 0) r15) (if (begin (if (begin (begin (begin (set! rbp (- rbp 8)) (return-point L.rp.2591 (begin (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2591) (jump L.+.2590))) (set! rbp (+ rbp 8))) (set! r15 rax)) (= r15 88)) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax 32) (jump (rbp - 0))) (begin (set! rax 48) (jump (rbp - 0)))))) (module (begin (set! r15 r15) (set! rax 14) (jump r15))) (module (begin (set! r15 r15) (set! rax 6) (jump r15))) (module (begin (set! r15 r15) (set! rax 22) (jump r15))) (module (define L.+.2595 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.F.2592 (begin (set! (rbp - 8) r15) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! rdi rcx) (set! r8 r8) (set! r9 r9) (set! rsi (rbp - 0)) (begin (set! rbp (- rbp 16)) (return-point L.rp.2596 (begin (set! (rbp - 8) 64) (set! (rbp - 0) rsi) (set! r9 r9) (set! r8 r8) (set! rcx rdi) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2596) (jump L.G.2593))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi 80) (set! r15 (rbp - 8)) (jump L.+.2595))) (define L.G.2593 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! rdi rdx) (set! rsi rcx) (set! r8 r8) (set! r9 r9) (set! rdx (rbp - 0)) (set! rcx (rbp - 8)) (set! (rbp - 16) 72) (set! (rbp - 8) rcx) (set! (rbp - 0) rdx) (set! r9 r9) (set! r8 r8) (set! rcx rsi) (set! rdx rdi) (set! rsi r13) (set! rdi r14) (set! r15 r15) (jump L.H.2594))) (define L.H.2594 (begin (set! (rbp - 24) r15) (set! r15 rdi) (set! r14 rsi) (set! (rbp - 64) rdx) (set! (rbp - 56) rcx) (set! (rbp - 48) r8) (set! (rbp - 40) r9) (set! (rbp - 32) (rbp - 0)) (set! (rbp - 8) (rbp - 8)) (set! (rbp - 0) (rbp - 16)) (begin (set! rbp (- rbp 72)) (return-point L.rp.2597 (begin (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2597) (jump L.+.2595))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2598 (begin (set! rsi (rbp - -8)) (set! rdi r15) (set! r15 L.rp.2598) (jump L.+.2595))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2599 (begin (set! rsi (rbp - -16)) (set! rdi r15) (set! r15 L.rp.2599) (jump L.+.2595))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2600 (begin (set! rsi (rbp - -24)) (set! rdi r15) (set! r15 L.rp.2600) (jump L.+.2595))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2601 (begin (set! rsi (rbp - -32)) (set! rdi r15) (set! r15 L.rp.2601) (jump L.+.2595))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2602 (begin (set! rsi (rbp - -40)) (set! rdi r15) (set! r15 L.rp.2602) (jump L.+.2595))) (set! rbp (+ rbp 72))) (set! r15 rax) (begin (set! rbp (- rbp 72)) (return-point L.rp.2603 (begin (set! rsi (rbp - -64)) (set! rdi r15) (set! r15 L.rp.2603) (jump L.+.2595))) (set! rbp (+ rbp 72))) (set! r15 rax) (set! rsi (rbp - 0)) (set! rdi r15) (set! r15 (rbp - 24)) (jump L.+.2595))) (begin (set! r15 r15) (set! (rbp - 0) 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.F.2592))) (module (define L.<.2605 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (< r14 r13) (begin (set! rax 14) (jump r15)) (begin (set! rax 6) (jump r15))) (begin (set! rax 830) (jump r15))) (begin (set! rax 830) (jump r15))))) (define L.swap.2604 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (set! (rbp - 16) rsi) (if (begin (begin (begin (set! rbp (- rbp 24)) (return-point L.rp.2606 (begin (set! rsi (rbp - -16)) (set! rdi (rbp - -8)) (set! r15 L.rp.2606) (jump L.<.2605))) (set! rbp (+ rbp 24))) (set! r15 rax)) (!= r15 6)) (begin (set! rax (rbp - 8)) (jump (rbp - 0))) (begin (set! rsi (rbp - 8)) (set! rdi (rbp - 16)) (set! r15 (rbp - 0)) (jump L.swap.2604))))) (begin (set! r15 r15) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.swap.2604))) (module (define L.*.2609 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.-.2608 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (- rax r14)) (jump r15)) (begin (set! rax 574) (jump r15))) (begin (set! rax 574) (jump r15))))) (define L.fact_loop.2607 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (set! (rbp - 16) rsi) (if (begin (if (= (rbp - 8) 0) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax (rbp - 16)) (jump (rbp - 0))) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2610 (begin (set! rsi 8) (set! rdi (rbp - -24)) (set! r15 L.rp.2610) (jump L.-.2608))) (set! rbp (+ rbp 32))) (set! (rbp - 24) rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2611 (begin (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.2611) (jump L.*.2609))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fact_loop.2607))))) (begin (set! r15 r15) (set! rsi 8) (set! rdi 40) (set! r15 r15) (jump L.fact_loop.2607))) (module (define L.*.2614 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15)) (begin (set! rax 62) (jump r15))) (begin (set! rax 62) (jump r15))))) (define L.-.2613 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (- rax r14)) (jump r15)) (begin (set! rax 574) (jump r15))) (begin (set! rax 574) (jump r15))))) (define L.fact.2612 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (if (begin (if (= (rbp - 8) 0) (set! r15 14) (set! r15 6)) (!= r15 6)) (begin (set! rax 8) (jump (rbp - 0))) (begin (begin (set! rbp (- rbp 16)) (return-point L.rp.2615 (begin (set! rsi 8) (set! rdi (rbp - -8)) (set! r15 L.rp.2615) (jump L.-.2613))) (set! rbp (+ rbp 16))) (set! r15 rax) (begin (set! rbp (- rbp 16)) (return-point L.rp.2616 (begin (set! rdi r15) (set! r15 L.rp.2616) (jump L.fact.2612))) (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.*.2614))))) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.fact.2612))) (module (define L.+.2618 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.fib_loop.2617 (begin (set! (rbp - 0) r15) (set! r15 rdi) (set! (rbp - 16) rsi) (set! (rbp - 8) rdx) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax (rbp - 16)) (jump (rbp - 0))) (if (begin (if (= r15 8) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax (rbp - 8)) (jump (rbp - 0))) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2619 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2619) (jump L.+.2618))) (set! rbp (+ rbp 32))) (set! (rbp - 24) rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2620 (begin (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.2620) (jump L.+.2618))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.2617)))))) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.2617))) (module (define L.+.2622 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (if (begin (if (begin (begin (set! r9 r14) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (if (begin (if (begin (begin (set! r9 r13) (set! r9 (bitwise-and r9 7))) (= r9 0)) (set! r9 14) (set! r9 6)) (!= r9 6)) (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15)) (begin (set! rax 318) (jump r15))) (begin (set! rax 318) (jump r15))))) (define L.fib_loop.2621 (begin (set! (rbp - 0) r15) (set! r15 rdi) (set! (rbp - 16) rsi) (set! (rbp - 8) rdx) (if (begin (if (= r15 0) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax (rbp - 16)) (jump (rbp - 0))) (if (begin (if (= r15 8) (set! r14 14) (set! r14 6)) (!= r14 6)) (begin (set! rax (rbp - 8)) (jump (rbp - 0))) (begin (begin (set! rbp (- rbp 32)) (return-point L.rp.2623 (begin (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2623) (jump L.+.2622))) (set! rbp (+ rbp 32))) (set! (rbp - 24) rax) (begin (set! rbp (- rbp 32)) (return-point L.rp.2624 (begin (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.2624) (jump L.+.2622))) (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.2621)))))) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.2621)))) ((module (define L.__main.2626 (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.id.2625))) (define L.id.2625 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15)))) (module (define L.__main.2630 (begin (set! (rbp - 0) r15) (set! rbp (- rbp 8)) (set! rdi 40) (set! r15 L.rp.2629) (jump L.id.2627))) (define L.+.2628 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2638) (jump L.tmp.2639)))) (define L.tmp.2638 (begin (set! r9 14) (jump L.tmp.2640))) (define L.tmp.2639 (begin (set! r9 6) (jump L.tmp.2640))) (define L.tmp.2640 (if (!= r9 6) (jump L.__nested.2631) (jump L.__nested.2632))) (define L.tmp.2635 (begin (set! r9 14) (jump L.tmp.2637))) (define L.tmp.2636 (begin (set! r9 6) (jump L.tmp.2637))) (define L.tmp.2637 (if (!= r9 6) (jump L.__nested.2633) (jump L.__nested.2634))) (define L.__nested.2633 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2634 (begin (set! rax 318) (jump r15))) (define L.__nested.2631 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2635) (jump L.tmp.2636)))) (define L.__nested.2632 (begin (set! rax 318) (jump r15))) (define L.id.2627 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.rp.2629 (begin (set! rbp (+ rbp 8)) (set! r15 rax) (set! rsi r15) (set! rdi 40) (set! r15 (rbp - 0)) (jump L.+.2628)))) (module (define L.__main.2646 (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.even?.2642))) (define L.+.2643 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2654) (jump L.tmp.2655)))) (define L.tmp.2654 (begin (set! r9 14) (jump L.tmp.2656))) (define L.tmp.2655 (begin (set! r9 6) (jump L.tmp.2656))) (define L.tmp.2656 (if (!= r9 6) (jump L.__nested.2647) (jump L.__nested.2648))) (define L.tmp.2651 (begin (set! r9 14) (jump L.tmp.2653))) (define L.tmp.2652 (begin (set! r9 6) (jump L.tmp.2653))) (define L.tmp.2653 (if (!= r9 6) (jump L.__nested.2649) (jump L.__nested.2650))) (define L.__nested.2649 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2650 (begin (set! rax 318) (jump r15))) (define L.__nested.2647 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2651) (jump L.tmp.2652)))) (define L.__nested.2648 (begin (set! rax 318) (jump r15))) (define L.odd?.2641 (begin (set! (rbp - 0) r15) (set! r15 rdi) (if (= r15 0) (jump L.tmp.2659) (jump L.tmp.2660)))) (define L.tmp.2659 (begin (set! r14 14) (jump L.tmp.2661))) (define L.tmp.2660 (begin (set! r14 6) (jump L.tmp.2661))) (define L.tmp.2661 (if (!= r14 6) (jump L.__nested.2657) (jump L.__nested.2658))) (define L.rp.2644 (begin (set! rbp (+ rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.even?.2642))) (define L.__nested.2657 (begin (set! rax 0) (jump (rbp - 0)))) (define L.__nested.2658 (begin (set! rbp (- rbp 8)) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2644) (jump L.+.2643))) (define L.even?.2642 (begin (set! (rbp - 0) r15) (set! r15 rdi) (if (= r15 0) (jump L.tmp.2664) (jump L.tmp.2665)))) (define L.tmp.2664 (begin (set! r14 14) (jump L.tmp.2666))) (define L.tmp.2665 (begin (set! r14 6) (jump L.tmp.2666))) (define L.tmp.2666 (if (!= r14 6) (jump L.__nested.2662) (jump L.__nested.2663))) (define L.rp.2645 (begin (set! rbp (+ rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.odd?.2641))) (define L.__nested.2662 (begin (set! rax 8) (jump (rbp - 0)))) (define L.__nested.2663 (begin (set! rbp (- rbp 8)) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2645) (jump L.+.2643)))) (module (define L.__main.2668 (begin (set! r15 r15) (set! rax 0) (jump r15))) (define L.zero.2667 (begin (set! r15 r15) (set! r14 rdi) (set! r14 rsi) (set! r14 rdx) (set! r14 rcx) (set! rax 0) (jump r15)))) (module (define L.__main.2670 (begin (set! r15 r15) (set! r14 L.id.2669) (set! rdi 40) (set! r15 r15) (jump r14))) (define L.id.2669 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15)))) (module (define L.__main.2676 (begin (set! r15 r15) (set! r14 14) (if (true) (jump L.tmp.2673) (jump L.tmp.2674)))) (define L.id1.2671 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.id2.2672 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.tmp.2673 (begin (set! r14 L.id1.2671) (jump L.tmp.2675))) (define L.tmp.2674 (begin (set! r14 L.id2.2672) (jump L.tmp.2675))) (define L.tmp.2675 (begin (set! rdi 40) (set! r15 r15) (jump r14)))) (module (define L.__main.2681 (begin (set! (rbp - 0) r15) (set! rbp (- rbp 16)) (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2679) (jump L.+.2677))) (define L.*.2678 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2689) (jump L.tmp.2690)))) (define L.tmp.2689 (begin (set! r9 14) (jump L.tmp.2691))) (define L.tmp.2690 (begin (set! r9 6) (jump L.tmp.2691))) (define L.tmp.2691 (if (!= r9 6) (jump L.__nested.2682) (jump L.__nested.2683))) (define L.tmp.2686 (begin (set! r9 14) (jump L.tmp.2688))) (define L.tmp.2687 (begin (set! r9 6) (jump L.tmp.2688))) (define L.tmp.2688 (if (!= r9 6) (jump L.__nested.2684) (jump L.__nested.2685))) (define L.__nested.2684 (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15))) (define L.__nested.2685 (begin (set! rax 62) (jump r15))) (define L.__nested.2682 (begin (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2686) (jump L.tmp.2687)))) (define L.__nested.2683 (begin (set! rax 62) (jump r15))) (define L.+.2677 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2699) (jump L.tmp.2700)))) (define L.tmp.2699 (begin (set! r9 14) (jump L.tmp.2701))) (define L.tmp.2700 (begin (set! r9 6) (jump L.tmp.2701))) (define L.tmp.2701 (if (!= r9 6) (jump L.__nested.2692) (jump L.__nested.2693))) (define L.tmp.2696 (begin (set! r9 14) (jump L.tmp.2698))) (define L.tmp.2697 (begin (set! r9 6) (jump L.tmp.2698))) (define L.tmp.2698 (if (!= r9 6) (jump L.__nested.2694) (jump L.__nested.2695))) (define L.__nested.2694 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2695 (begin (set! rax 318) (jump r15))) (define L.__nested.2692 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2696) (jump L.tmp.2697)))) (define L.__nested.2693 (begin (set! rax 318) (jump r15))) (define L.rp.2679 (begin (set! rbp (+ rbp 16)) (set! (rbp - 8) rax) (set! rbp (- rbp 16)) (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2680) (jump L.*.2678))) (define L.rp.2680 (begin (set! rbp (+ rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.+.2677)))) (module (define L.__main.2709 (begin (set! (rbp - 0) r15) (set! rbp (- rbp 8)) (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2703) (jump L.+.2702))) (define L.+.2702 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2717) (jump L.tmp.2718)))) (define L.tmp.2717 (begin (set! r9 14) (jump L.tmp.2719))) (define L.tmp.2718 (begin (set! r9 6) (jump L.tmp.2719))) (define L.tmp.2719 (if (!= r9 6) (jump L.__nested.2710) (jump L.__nested.2711))) (define L.tmp.2714 (begin (set! r9 14) (jump L.tmp.2716))) (define L.tmp.2715 (begin (set! r9 6) (jump L.tmp.2716))) (define L.tmp.2716 (if (!= r9 6) (jump L.__nested.2712) (jump L.__nested.2713))) (define L.__nested.2712 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2713 (begin (set! rax 318) (jump r15))) (define L.__nested.2710 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2714) (jump L.tmp.2715)))) (define L.__nested.2711 (begin (set! rax 318) (jump r15))) (define L.rp.2703 (begin (set! rbp (+ rbp 8)) (set! r15 rax) (if (= r15 88) (jump L.tmp.2706) (jump L.tmp.2707)))) (define L.tmp.2706 (begin (set! r15 14) (jump L.tmp.2708))) (define L.tmp.2707 (begin (set! r15 6) (jump L.tmp.2708))) (define L.tmp.2708 (if (!= r15 6) (jump L.__nested.2704) (jump L.__nested.2705))) (define L.__nested.2704 (begin (set! rax 32) (jump (rbp - 0)))) (define L.__nested.2705 (begin (set! rax 48) (jump (rbp - 0))))) (module (define L.__main.2720 (begin (set! r15 r15) (set! rax 14) (jump r15)))) (module (define L.__main.2721 (begin (set! r15 r15) (set! rax 6) (jump r15)))) (module (define L.__main.2722 (begin (set! r15 r15) (set! rax 22) (jump r15)))) (module (define L.__main.2735 (begin (set! r15 r15) (set! (rbp - 0) 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.F.2723))) (define L.+.2726 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2743) (jump L.tmp.2744)))) (define L.tmp.2743 (begin (set! r9 14) (jump L.tmp.2745))) (define L.tmp.2744 (begin (set! r9 6) (jump L.tmp.2745))) (define L.tmp.2745 (if (!= r9 6) (jump L.__nested.2736) (jump L.__nested.2737))) (define L.tmp.2740 (begin (set! r9 14) (jump L.tmp.2742))) (define L.tmp.2741 (begin (set! r9 6) (jump L.tmp.2742))) (define L.tmp.2742 (if (!= r9 6) (jump L.__nested.2738) (jump L.__nested.2739))) (define L.__nested.2738 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2739 (begin (set! rax 318) (jump r15))) (define L.__nested.2736 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2740) (jump L.tmp.2741)))) (define L.__nested.2737 (begin (set! rax 318) (jump r15))) (define L.F.2723 (begin (set! (rbp - 8) r15) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! rdi rcx) (set! r8 r8) (set! r9 r9) (set! rsi (rbp - 0)) (set! rbp (- rbp 16)) (set! (rbp - 8) 64) (set! (rbp - 0) rsi) (set! r9 r9) (set! r8 r8) (set! rcx rdi) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2727) (jump L.G.2724))) (define L.rp.2727 (begin (set! rbp (+ rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi 80) (set! r15 (rbp - 8)) (jump L.+.2726))) (define L.G.2724 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! rdi rdx) (set! rsi rcx) (set! r8 r8) (set! r9 r9) (set! rdx (rbp - 0)) (set! rcx (rbp - 8)) (set! (rbp - 16) 72) (set! (rbp - 8) rcx) (set! (rbp - 0) rdx) (set! r9 r9) (set! r8 r8) (set! rcx rsi) (set! rdx rdi) (set! rsi r13) (set! rdi r14) (set! r15 r15) (jump L.H.2725))) (define L.H.2725 (begin (set! (rbp - 24) r15) (set! r15 rdi) (set! r14 rsi) (set! (rbp - 64) rdx) (set! (rbp - 56) rcx) (set! (rbp - 48) r8) (set! (rbp - 40) r9) (set! (rbp - 32) (rbp - 0)) (set! (rbp - 8) (rbp - 8)) (set! (rbp - 0) (rbp - 16)) (set! rbp (- rbp 72)) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2728) (jump L.+.2726))) (define L.rp.2728 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -8)) (set! rdi r15) (set! r15 L.rp.2729) (jump L.+.2726))) (define L.rp.2729 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -16)) (set! rdi r15) (set! r15 L.rp.2730) (jump L.+.2726))) (define L.rp.2730 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -24)) (set! rdi r15) (set! r15 L.rp.2731) (jump L.+.2726))) (define L.rp.2731 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -32)) (set! rdi r15) (set! r15 L.rp.2732) (jump L.+.2726))) (define L.rp.2732 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -40)) (set! rdi r15) (set! r15 L.rp.2733) (jump L.+.2726))) (define L.rp.2733 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -64)) (set! rdi r15) (set! r15 L.rp.2734) (jump L.+.2726))) (define L.rp.2734 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rsi (rbp - 0)) (set! rdi r15) (set! r15 (rbp - 24)) (jump L.+.2726)))) (module (define L.__main.2749 (begin (set! r15 r15) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.swap.2746))) (define L.<.2747 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2759) (jump L.tmp.2760)))) (define L.tmp.2759 (begin (set! r9 14) (jump L.tmp.2761))) (define L.tmp.2760 (begin (set! r9 6) (jump L.tmp.2761))) (define L.tmp.2761 (if (!= r9 6) (jump L.__nested.2750) (jump L.__nested.2751))) (define L.tmp.2756 (begin (set! r9 14) (jump L.tmp.2758))) (define L.tmp.2757 (begin (set! r9 6) (jump L.tmp.2758))) (define L.tmp.2758 (if (!= r9 6) (jump L.__nested.2752) (jump L.__nested.2753))) (define L.__nested.2754 (begin (set! rax 14) (jump r15))) (define L.__nested.2755 (begin (set! rax 6) (jump r15))) (define L.__nested.2752 (if (< r14 r13) (jump L.__nested.2754) (jump L.__nested.2755))) (define L.__nested.2753 (begin (set! rax 830) (jump r15))) (define L.__nested.2750 (begin (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2756) (jump L.tmp.2757)))) (define L.__nested.2751 (begin (set! rax 830) (jump r15))) (define L.swap.2746 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (set! (rbp - 16) rsi) (set! rbp (- rbp 24)) (set! rsi (rbp - -16)) (set! rdi (rbp - -8)) (set! r15 L.rp.2748) (jump L.<.2747))) (define L.rp.2748 (begin (set! rbp (+ rbp 24)) (set! r15 rax) (if (!= r15 6) (jump L.__nested.2762) (jump L.__nested.2763)))) (define L.__nested.2762 (begin (set! rax (rbp - 8)) (jump (rbp - 0)))) (define L.__nested.2763 (begin (set! rsi (rbp - 8)) (set! rdi (rbp - 16)) (set! r15 (rbp - 0)) (jump L.swap.2746)))) (module (define L.__main.2769 (begin (set! r15 r15) (set! rsi 8) (set! rdi 40) (set! r15 r15) (jump L.fact_loop.2764))) (define L.*.2766 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2777) (jump L.tmp.2778)))) (define L.tmp.2777 (begin (set! r9 14) (jump L.tmp.2779))) (define L.tmp.2778 (begin (set! r9 6) (jump L.tmp.2779))) (define L.tmp.2779 (if (!= r9 6) (jump L.__nested.2770) (jump L.__nested.2771))) (define L.tmp.2774 (begin (set! r9 14) (jump L.tmp.2776))) (define L.tmp.2775 (begin (set! r9 6) (jump L.tmp.2776))) (define L.tmp.2776 (if (!= r9 6) (jump L.__nested.2772) (jump L.__nested.2773))) (define L.__nested.2772 (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15))) (define L.__nested.2773 (begin (set! rax 62) (jump r15))) (define L.__nested.2770 (begin (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2774) (jump L.tmp.2775)))) (define L.__nested.2771 (begin (set! rax 62) (jump r15))) (define L.-.2765 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2787) (jump L.tmp.2788)))) (define L.tmp.2787 (begin (set! r9 14) (jump L.tmp.2789))) (define L.tmp.2788 (begin (set! r9 6) (jump L.tmp.2789))) (define L.tmp.2789 (if (!= r9 6) (jump L.__nested.2780) (jump L.__nested.2781))) (define L.tmp.2784 (begin (set! r9 14) (jump L.tmp.2786))) (define L.tmp.2785 (begin (set! r9 6) (jump L.tmp.2786))) (define L.tmp.2786 (if (!= r9 6) (jump L.__nested.2782) (jump L.__nested.2783))) (define L.__nested.2782 (begin (set! rax r13) (set! rax (- rax r14)) (jump r15))) (define L.__nested.2783 (begin (set! rax 574) (jump r15))) (define L.__nested.2780 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2784) (jump L.tmp.2785)))) (define L.__nested.2781 (begin (set! rax 574) (jump r15))) (define L.fact_loop.2764 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (set! (rbp - 16) rsi) (if (= (rbp - 8) 0) (jump L.tmp.2792) (jump L.tmp.2793)))) (define L.tmp.2792 (begin (set! r15 14) (jump L.tmp.2794))) (define L.tmp.2793 (begin (set! r15 6) (jump L.tmp.2794))) (define L.tmp.2794 (if (!= r15 6) (jump L.__nested.2790) (jump L.__nested.2791))) (define L.rp.2767 (begin (set! rbp (+ rbp 32)) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.2768) (jump L.*.2766))) (define L.rp.2768 (begin (set! rbp (+ rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fact_loop.2764))) (define L.__nested.2790 (begin (set! rax (rbp - 16)) (jump (rbp - 0)))) (define L.__nested.2791 (begin (set! rbp (- rbp 32)) (set! rsi 8) (set! rdi (rbp - -24)) (set! r15 L.rp.2767) (jump L.-.2765)))) (module (define L.__main.2800 (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.fact.2795))) (define L.*.2797 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2808) (jump L.tmp.2809)))) (define L.tmp.2808 (begin (set! r9 14) (jump L.tmp.2810))) (define L.tmp.2809 (begin (set! r9 6) (jump L.tmp.2810))) (define L.tmp.2810 (if (!= r9 6) (jump L.__nested.2801) (jump L.__nested.2802))) (define L.tmp.2805 (begin (set! r9 14) (jump L.tmp.2807))) (define L.tmp.2806 (begin (set! r9 6) (jump L.tmp.2807))) (define L.tmp.2807 (if (!= r9 6) (jump L.__nested.2803) (jump L.__nested.2804))) (define L.__nested.2803 (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15))) (define L.__nested.2804 (begin (set! rax 62) (jump r15))) (define L.__nested.2801 (begin (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2805) (jump L.tmp.2806)))) (define L.__nested.2802 (begin (set! rax 62) (jump r15))) (define L.-.2796 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2818) (jump L.tmp.2819)))) (define L.tmp.2818 (begin (set! r9 14) (jump L.tmp.2820))) (define L.tmp.2819 (begin (set! r9 6) (jump L.tmp.2820))) (define L.tmp.2820 (if (!= r9 6) (jump L.__nested.2811) (jump L.__nested.2812))) (define L.tmp.2815 (begin (set! r9 14) (jump L.tmp.2817))) (define L.tmp.2816 (begin (set! r9 6) (jump L.tmp.2817))) (define L.tmp.2817 (if (!= r9 6) (jump L.__nested.2813) (jump L.__nested.2814))) (define L.__nested.2813 (begin (set! rax r13) (set! rax (- rax r14)) (jump r15))) (define L.__nested.2814 (begin (set! rax 574) (jump r15))) (define L.__nested.2811 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2815) (jump L.tmp.2816)))) (define L.__nested.2812 (begin (set! rax 574) (jump r15))) (define L.fact.2795 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (if (= (rbp - 8) 0) (jump L.tmp.2823) (jump L.tmp.2824)))) (define L.tmp.2823 (begin (set! r15 14) (jump L.tmp.2825))) (define L.tmp.2824 (begin (set! r15 6) (jump L.tmp.2825))) (define L.tmp.2825 (if (!= r15 6) (jump L.__nested.2821) (jump L.__nested.2822))) (define L.rp.2798 (begin (set! rbp (+ rbp 16)) (set! r15 rax) (set! rbp (- rbp 16)) (set! rdi r15) (set! r15 L.rp.2799) (jump L.fact.2795))) (define L.rp.2799 (begin (set! rbp (+ rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.*.2797))) (define L.__nested.2821 (begin (set! rax 8) (jump (rbp - 0)))) (define L.__nested.2822 (begin (set! rbp (- rbp 16)) (set! rsi 8) (set! rdi (rbp - -8)) (set! r15 L.rp.2798) (jump L.-.2796)))) (module (define L.__main.2830 (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.2826))) (define L.+.2827 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2838) (jump L.tmp.2839)))) (define L.tmp.2838 (begin (set! r9 14) (jump L.tmp.2840))) (define L.tmp.2839 (begin (set! r9 6) (jump L.tmp.2840))) (define L.tmp.2840 (if (!= r9 6) (jump L.__nested.2831) (jump L.__nested.2832))) (define L.tmp.2835 (begin (set! r9 14) (jump L.tmp.2837))) (define L.tmp.2836 (begin (set! r9 6) (jump L.tmp.2837))) (define L.tmp.2837 (if (!= r9 6) (jump L.__nested.2833) (jump L.__nested.2834))) (define L.__nested.2833 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2834 (begin (set! rax 318) (jump r15))) (define L.__nested.2831 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2835) (jump L.tmp.2836)))) (define L.__nested.2832 (begin (set! rax 318) (jump r15))) (define L.fib_loop.2826 (begin (set! (rbp - 0) r15) (set! r15 rdi) (set! (rbp - 16) rsi) (set! (rbp - 8) rdx) (if (= r15 0) (jump L.tmp.2848) (jump L.tmp.2849)))) (define L.tmp.2848 (begin (set! r14 14) (jump L.tmp.2850))) (define L.tmp.2849 (begin (set! r14 6) (jump L.tmp.2850))) (define L.tmp.2850 (if (!= r14 6) (jump L.__nested.2841) (jump L.__nested.2842))) (define L.tmp.2845 (begin (set! r14 14) (jump L.tmp.2847))) (define L.tmp.2846 (begin (set! r14 6) (jump L.tmp.2847))) (define L.tmp.2847 (if (!= r14 6) (jump L.__nested.2843) (jump L.__nested.2844))) (define L.rp.2828 (begin (set! rbp (+ rbp 32)) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.2829) (jump L.+.2827))) (define L.rp.2829 (begin (set! rbp (+ rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.2826))) (define L.__nested.2843 (begin (set! rax (rbp - 8)) (jump (rbp - 0)))) (define L.__nested.2844 (begin (set! rbp (- rbp 32)) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2828) (jump L.+.2827))) (define L.__nested.2841 (begin (set! rax (rbp - 16)) (jump (rbp - 0)))) (define L.__nested.2842 (if (= r15 8) (jump L.tmp.2845) (jump L.tmp.2846)))) (module (define L.__main.2855 (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.2851))) (define L.+.2852 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2863) (jump L.tmp.2864)))) (define L.tmp.2863 (begin (set! r9 14) (jump L.tmp.2865))) (define L.tmp.2864 (begin (set! r9 6) (jump L.tmp.2865))) (define L.tmp.2865 (if (!= r9 6) (jump L.__nested.2856) (jump L.__nested.2857))) (define L.tmp.2860 (begin (set! r9 14) (jump L.tmp.2862))) (define L.tmp.2861 (begin (set! r9 6) (jump L.tmp.2862))) (define L.tmp.2862 (if (!= r9 6) (jump L.__nested.2858) (jump L.__nested.2859))) (define L.__nested.2858 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2859 (begin (set! rax 318) (jump r15))) (define L.__nested.2856 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2860) (jump L.tmp.2861)))) (define L.__nested.2857 (begin (set! rax 318) (jump r15))) (define L.fib_loop.2851 (begin (set! (rbp - 0) r15) (set! r15 rdi) (set! (rbp - 16) rsi) (set! (rbp - 8) rdx) (if (= r15 0) (jump L.tmp.2873) (jump L.tmp.2874)))) (define L.tmp.2873 (begin (set! r14 14) (jump L.tmp.2875))) (define L.tmp.2874 (begin (set! r14 6) (jump L.tmp.2875))) (define L.tmp.2875 (if (!= r14 6) (jump L.__nested.2866) (jump L.__nested.2867))) (define L.tmp.2870 (begin (set! r14 14) (jump L.tmp.2872))) (define L.tmp.2871 (begin (set! r14 6) (jump L.tmp.2872))) (define L.tmp.2872 (if (!= r14 6) (jump L.__nested.2868) (jump L.__nested.2869))) (define L.rp.2853 (begin (set! rbp (+ rbp 32)) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.2854) (jump L.+.2852))) (define L.rp.2854 (begin (set! rbp (+ rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.2851))) (define L.__nested.2868 (begin (set! rax (rbp - 8)) (jump (rbp - 0)))) (define L.__nested.2869 (begin (set! rbp (- rbp 32)) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2853) (jump L.+.2852))) (define L.__nested.2866 (begin (set! rax (rbp - 16)) (jump (rbp - 0)))) (define L.__nested.2867 (if (= r15 8) (jump L.tmp.2870) (jump L.tmp.2871))))) ((module (define L.__main.2877 (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.id.2876))) (define L.id.2876 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15)))) (module (define L.__main.2881 (begin (set! (rbp - 0) r15) (set! rbp (- rbp 8)) (set! rdi 40) (set! r15 L.rp.2880) (jump L.id.2878))) (define L.+.2879 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2889) (jump L.tmp.2890)))) (define L.tmp.2889 (begin (set! r9 14) (jump L.tmp.2891))) (define L.tmp.2890 (begin (set! r9 6) (jump L.tmp.2891))) (define L.tmp.2891 (if (!= r9 6) (jump L.__nested.2882) (jump L.__nested.2883))) (define L.tmp.2886 (begin (set! r9 14) (jump L.tmp.2888))) (define L.tmp.2887 (begin (set! r9 6) (jump L.tmp.2888))) (define L.tmp.2888 (if (!= r9 6) (jump L.__nested.2884) (jump L.__nested.2885))) (define L.__nested.2884 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2885 (begin (set! rax 318) (jump r15))) (define L.__nested.2882 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2886) (jump L.tmp.2887)))) (define L.__nested.2883 (begin (set! rax 318) (jump r15))) (define L.id.2878 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.rp.2880 (begin (set! rbp (+ rbp 8)) (set! r15 rax) (set! rsi r15) (set! rdi 40) (set! r15 (rbp - 0)) (jump L.+.2879)))) (module (define L.__main.2897 (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.even?.2893))) (define L.+.2894 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2905) (jump L.tmp.2906)))) (define L.tmp.2905 (begin (set! r9 14) (jump L.tmp.2907))) (define L.tmp.2906 (begin (set! r9 6) (jump L.tmp.2907))) (define L.tmp.2907 (if (!= r9 6) (jump L.__nested.2898) (jump L.__nested.2899))) (define L.tmp.2902 (begin (set! r9 14) (jump L.tmp.2904))) (define L.tmp.2903 (begin (set! r9 6) (jump L.tmp.2904))) (define L.tmp.2904 (if (!= r9 6) (jump L.__nested.2900) (jump L.__nested.2901))) (define L.__nested.2900 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2901 (begin (set! rax 318) (jump r15))) (define L.__nested.2898 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2902) (jump L.tmp.2903)))) (define L.__nested.2899 (begin (set! rax 318) (jump r15))) (define L.odd?.2892 (begin (set! (rbp - 0) r15) (set! r15 rdi) (if (= r15 0) (jump L.tmp.2910) (jump L.tmp.2911)))) (define L.tmp.2910 (begin (set! r14 14) (jump L.tmp.2912))) (define L.tmp.2911 (begin (set! r14 6) (jump L.tmp.2912))) (define L.tmp.2912 (if (!= r14 6) (jump L.__nested.2908) (jump L.__nested.2909))) (define L.rp.2895 (begin (set! rbp (+ rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.even?.2893))) (define L.__nested.2908 (begin (set! rax 0) (jump (rbp - 0)))) (define L.__nested.2909 (begin (set! rbp (- rbp 8)) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2895) (jump L.+.2894))) (define L.even?.2893 (begin (set! (rbp - 0) r15) (set! r15 rdi) (if (= r15 0) (jump L.tmp.2915) (jump L.tmp.2916)))) (define L.tmp.2915 (begin (set! r14 14) (jump L.tmp.2917))) (define L.tmp.2916 (begin (set! r14 6) (jump L.tmp.2917))) (define L.tmp.2917 (if (!= r14 6) (jump L.__nested.2913) (jump L.__nested.2914))) (define L.rp.2896 (begin (set! rbp (+ rbp 8)) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.odd?.2892))) (define L.__nested.2913 (begin (set! rax 8) (jump (rbp - 0)))) (define L.__nested.2914 (begin (set! rbp (- rbp 8)) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.2896) (jump L.+.2894)))) (module (define L.__main.2919 (begin (set! r15 r15) (set! rax 0) (jump r15))) (define L.zero.2918 (begin (set! r15 r15) (set! r14 rdi) (set! r14 rsi) (set! r14 rdx) (set! r14 rcx) (set! rax 0) (jump r15)))) (module (define L.__main.2921 (begin (set! r15 r15) (set! r14 L.id.2920) (set! rdi 40) (set! r15 r15) (jump r14))) (define L.id.2920 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15)))) (module (define L.__main.2927 (begin (set! r15 r15) (set! r14 14) (jump L.tmp.2924))) (define L.id1.2922 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.id2.2923 (begin (set! r15 r15) (set! r14 rdi) (set! rax r14) (jump r15))) (define L.tmp.2924 (begin (set! r14 L.id1.2922) (jump L.tmp.2926))) (define L.tmp.2925 (begin (set! r14 L.id2.2923) (jump L.tmp.2926))) (define L.tmp.2926 (begin (set! rdi 40) (set! r15 r15) (jump r14)))) (module (define L.__main.2932 (begin (set! (rbp - 0) r15) (set! rbp (- rbp 16)) (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2930) (jump L.+.2928))) (define L.*.2929 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2940) (jump L.tmp.2941)))) (define L.tmp.2940 (begin (set! r9 14) (jump L.tmp.2942))) (define L.tmp.2941 (begin (set! r9 6) (jump L.tmp.2942))) (define L.tmp.2942 (if (!= r9 6) (jump L.__nested.2933) (jump L.__nested.2934))) (define L.tmp.2937 (begin (set! r9 14) (jump L.tmp.2939))) (define L.tmp.2938 (begin (set! r9 6) (jump L.tmp.2939))) (define L.tmp.2939 (if (!= r9 6) (jump L.__nested.2935) (jump L.__nested.2936))) (define L.__nested.2935 (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15))) (define L.__nested.2936 (begin (set! rax 62) (jump r15))) (define L.__nested.2933 (begin (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2937) (jump L.tmp.2938)))) (define L.__nested.2934 (begin (set! rax 62) (jump r15))) (define L.+.2928 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2950) (jump L.tmp.2951)))) (define L.tmp.2950 (begin (set! r9 14) (jump L.tmp.2952))) (define L.tmp.2951 (begin (set! r9 6) (jump L.tmp.2952))) (define L.tmp.2952 (if (!= r9 6) (jump L.__nested.2943) (jump L.__nested.2944))) (define L.tmp.2947 (begin (set! r9 14) (jump L.tmp.2949))) (define L.tmp.2948 (begin (set! r9 6) (jump L.tmp.2949))) (define L.tmp.2949 (if (!= r9 6) (jump L.__nested.2945) (jump L.__nested.2946))) (define L.__nested.2945 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2946 (begin (set! rax 318) (jump r15))) (define L.__nested.2943 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2947) (jump L.tmp.2948)))) (define L.__nested.2944 (begin (set! rax 318) (jump r15))) (define L.rp.2930 (begin (set! rbp (+ rbp 16)) (set! (rbp - 8) rax) (set! rbp (- rbp 16)) (set! rsi 40) (set! rdi 32) (set! r15 L.rp.2931) (jump L.*.2929))) (define L.rp.2931 (begin (set! rbp (+ rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.+.2928)))) (module (define L.__main.2960 (begin (set! (rbp - 0) r15) (set! rbp (- rbp 8)) (set! rsi 48) (set! rdi 40) (set! r15 L.rp.2954) (jump L.+.2953))) (define L.+.2953 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2968) (jump L.tmp.2969)))) (define L.tmp.2968 (begin (set! r9 14) (jump L.tmp.2970))) (define L.tmp.2969 (begin (set! r9 6) (jump L.tmp.2970))) (define L.tmp.2970 (if (!= r9 6) (jump L.__nested.2961) (jump L.__nested.2962))) (define L.tmp.2965 (begin (set! r9 14) (jump L.tmp.2967))) (define L.tmp.2966 (begin (set! r9 6) (jump L.tmp.2967))) (define L.tmp.2967 (if (!= r9 6) (jump L.__nested.2963) (jump L.__nested.2964))) (define L.__nested.2963 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2964 (begin (set! rax 318) (jump r15))) (define L.__nested.2961 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2965) (jump L.tmp.2966)))) (define L.__nested.2962 (begin (set! rax 318) (jump r15))) (define L.rp.2954 (begin (set! rbp (+ rbp 8)) (set! r15 rax) (if (= r15 88) (jump L.tmp.2957) (jump L.tmp.2958)))) (define L.tmp.2957 (begin (set! r15 14) (jump L.tmp.2959))) (define L.tmp.2958 (begin (set! r15 6) (jump L.tmp.2959))) (define L.tmp.2959 (if (!= r15 6) (jump L.__nested.2955) (jump L.__nested.2956))) (define L.__nested.2955 (begin (set! rax 32) (jump (rbp - 0)))) (define L.__nested.2956 (begin (set! rax 48) (jump (rbp - 0))))) (module (define L.__main.2971 (begin (set! r15 r15) (set! rax 14) (jump r15)))) (module (define L.__main.2972 (begin (set! r15 r15) (set! rax 6) (jump r15)))) (module (define L.__main.2973 (begin (set! r15 r15) (set! rax 22) (jump r15)))) (module (define L.__main.2986 (begin (set! r15 r15) (set! (rbp - 0) 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.F.2974))) (define L.+.2977 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2994) (jump L.tmp.2995)))) (define L.tmp.2994 (begin (set! r9 14) (jump L.tmp.2996))) (define L.tmp.2995 (begin (set! r9 6) (jump L.tmp.2996))) (define L.tmp.2996 (if (!= r9 6) (jump L.__nested.2987) (jump L.__nested.2988))) (define L.tmp.2991 (begin (set! r9 14) (jump L.tmp.2993))) (define L.tmp.2992 (begin (set! r9 6) (jump L.tmp.2993))) (define L.tmp.2993 (if (!= r9 6) (jump L.__nested.2989) (jump L.__nested.2990))) (define L.__nested.2989 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.2990 (begin (set! rax 318) (jump r15))) (define L.__nested.2987 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.2991) (jump L.tmp.2992)))) (define L.__nested.2988 (begin (set! rax 318) (jump r15))) (define L.F.2974 (begin (set! (rbp - 8) r15) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! rdi rcx) (set! r8 r8) (set! r9 r9) (set! rsi (rbp - 0)) (set! rbp (- rbp 16)) (set! (rbp - 8) 64) (set! (rbp - 0) rsi) (set! r9 r9) (set! r8 r8) (set! rcx rdi) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2978) (jump L.G.2975))) (define L.rp.2978 (begin (set! rbp (+ rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi 80) (set! r15 (rbp - 8)) (jump L.+.2977))) (define L.G.2975 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! rdi rdx) (set! rsi rcx) (set! r8 r8) (set! r9 r9) (set! rdx (rbp - 0)) (set! rcx (rbp - 8)) (set! (rbp - 16) 72) (set! (rbp - 8) rcx) (set! (rbp - 0) rdx) (set! r9 r9) (set! r8 r8) (set! rcx rsi) (set! rdx rdi) (set! rsi r13) (set! rdi r14) (set! r15 r15) (jump L.H.2976))) (define L.H.2976 (begin (set! (rbp - 24) r15) (set! r15 rdi) (set! r14 rsi) (set! (rbp - 64) rdx) (set! (rbp - 56) rcx) (set! (rbp - 48) r8) (set! (rbp - 40) r9) (set! (rbp - 32) (rbp - 0)) (set! (rbp - 8) (rbp - 8)) (set! (rbp - 0) (rbp - 16)) (set! rbp (- rbp 72)) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.2979) (jump L.+.2977))) (define L.rp.2979 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -8)) (set! rdi r15) (set! r15 L.rp.2980) (jump L.+.2977))) (define L.rp.2980 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -16)) (set! rdi r15) (set! r15 L.rp.2981) (jump L.+.2977))) (define L.rp.2981 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -24)) (set! rdi r15) (set! r15 L.rp.2982) (jump L.+.2977))) (define L.rp.2982 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -32)) (set! rdi r15) (set! r15 L.rp.2983) (jump L.+.2977))) (define L.rp.2983 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -40)) (set! rdi r15) (set! r15 L.rp.2984) (jump L.+.2977))) (define L.rp.2984 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -64)) (set! rdi r15) (set! r15 L.rp.2985) (jump L.+.2977))) (define L.rp.2985 (begin (set! rbp (+ rbp 72)) (set! r15 rax) (set! rsi (rbp - 0)) (set! rdi r15) (set! r15 (rbp - 24)) (jump L.+.2977)))) (module (define L.__main.3000 (begin (set! r15 r15) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.swap.2997))) (define L.<.2998 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3010) (jump L.tmp.3011)))) (define L.tmp.3010 (begin (set! r9 14) (jump L.tmp.3012))) (define L.tmp.3011 (begin (set! r9 6) (jump L.tmp.3012))) (define L.tmp.3012 (if (!= r9 6) (jump L.__nested.3001) (jump L.__nested.3002))) (define L.tmp.3007 (begin (set! r9 14) (jump L.tmp.3009))) (define L.tmp.3008 (begin (set! r9 6) (jump L.tmp.3009))) (define L.tmp.3009 (if (!= r9 6) (jump L.__nested.3003) (jump L.__nested.3004))) (define L.__nested.3005 (begin (set! rax 14) (jump r15))) (define L.__nested.3006 (begin (set! rax 6) (jump r15))) (define L.__nested.3003 (if (< r14 r13) (jump L.__nested.3005) (jump L.__nested.3006))) (define L.__nested.3004 (begin (set! rax 830) (jump r15))) (define L.__nested.3001 (begin (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3007) (jump L.tmp.3008)))) (define L.__nested.3002 (begin (set! rax 830) (jump r15))) (define L.swap.2997 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (set! (rbp - 16) rsi) (set! rbp (- rbp 24)) (set! rsi (rbp - -16)) (set! rdi (rbp - -8)) (set! r15 L.rp.2999) (jump L.<.2998))) (define L.rp.2999 (begin (set! rbp (+ rbp 24)) (set! r15 rax) (if (!= r15 6) (jump L.__nested.3013) (jump L.__nested.3014)))) (define L.__nested.3013 (begin (set! rax (rbp - 8)) (jump (rbp - 0)))) (define L.__nested.3014 (begin (set! rsi (rbp - 8)) (set! rdi (rbp - 16)) (set! r15 (rbp - 0)) (jump L.swap.2997)))) (module (define L.__main.3020 (begin (set! r15 r15) (set! rsi 8) (set! rdi 40) (set! r15 r15) (jump L.fact_loop.3015))) (define L.*.3017 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3028) (jump L.tmp.3029)))) (define L.tmp.3028 (begin (set! r9 14) (jump L.tmp.3030))) (define L.tmp.3029 (begin (set! r9 6) (jump L.tmp.3030))) (define L.tmp.3030 (if (!= r9 6) (jump L.__nested.3021) (jump L.__nested.3022))) (define L.tmp.3025 (begin (set! r9 14) (jump L.tmp.3027))) (define L.tmp.3026 (begin (set! r9 6) (jump L.tmp.3027))) (define L.tmp.3027 (if (!= r9 6) (jump L.__nested.3023) (jump L.__nested.3024))) (define L.__nested.3023 (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15))) (define L.__nested.3024 (begin (set! rax 62) (jump r15))) (define L.__nested.3021 (begin (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3025) (jump L.tmp.3026)))) (define L.__nested.3022 (begin (set! rax 62) (jump r15))) (define L.-.3016 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3038) (jump L.tmp.3039)))) (define L.tmp.3038 (begin (set! r9 14) (jump L.tmp.3040))) (define L.tmp.3039 (begin (set! r9 6) (jump L.tmp.3040))) (define L.tmp.3040 (if (!= r9 6) (jump L.__nested.3031) (jump L.__nested.3032))) (define L.tmp.3035 (begin (set! r9 14) (jump L.tmp.3037))) (define L.tmp.3036 (begin (set! r9 6) (jump L.tmp.3037))) (define L.tmp.3037 (if (!= r9 6) (jump L.__nested.3033) (jump L.__nested.3034))) (define L.__nested.3033 (begin (set! rax r13) (set! rax (- rax r14)) (jump r15))) (define L.__nested.3034 (begin (set! rax 574) (jump r15))) (define L.__nested.3031 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3035) (jump L.tmp.3036)))) (define L.__nested.3032 (begin (set! rax 574) (jump r15))) (define L.fact_loop.3015 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (set! (rbp - 16) rsi) (if (= (rbp - 8) 0) (jump L.tmp.3043) (jump L.tmp.3044)))) (define L.tmp.3043 (begin (set! r15 14) (jump L.tmp.3045))) (define L.tmp.3044 (begin (set! r15 6) (jump L.tmp.3045))) (define L.tmp.3045 (if (!= r15 6) (jump L.__nested.3041) (jump L.__nested.3042))) (define L.rp.3018 (begin (set! rbp (+ rbp 32)) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3019) (jump L.*.3017))) (define L.rp.3019 (begin (set! rbp (+ rbp 32)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fact_loop.3015))) (define L.__nested.3041 (begin (set! rax (rbp - 16)) (jump (rbp - 0)))) (define L.__nested.3042 (begin (set! rbp (- rbp 32)) (set! rsi 8) (set! rdi (rbp - -24)) (set! r15 L.rp.3018) (jump L.-.3016)))) (module (define L.__main.3051 (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.fact.3046))) (define L.*.3048 (begin (set! r15 r15) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3059) (jump L.tmp.3060)))) (define L.tmp.3059 (begin (set! r9 14) (jump L.tmp.3061))) (define L.tmp.3060 (begin (set! r9 6) (jump L.tmp.3061))) (define L.tmp.3061 (if (!= r9 6) (jump L.__nested.3052) (jump L.__nested.3053))) (define L.tmp.3056 (begin (set! r9 14) (jump L.tmp.3058))) (define L.tmp.3057 (begin (set! r9 6) (jump L.tmp.3058))) (define L.tmp.3058 (if (!= r9 6) (jump L.__nested.3054) (jump L.__nested.3055))) (define L.__nested.3054 (begin (set! r13 r13) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15))) (define L.__nested.3055 (begin (set! rax 62) (jump r15))) (define L.__nested.3052 (begin (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3056) (jump L.tmp.3057)))) (define L.__nested.3053 (begin (set! rax 62) (jump r15))) (define L.-.3047 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3069) (jump L.tmp.3070)))) (define L.tmp.3069 (begin (set! r9 14) (jump L.tmp.3071))) (define L.tmp.3070 (begin (set! r9 6) (jump L.tmp.3071))) (define L.tmp.3071 (if (!= r9 6) (jump L.__nested.3062) (jump L.__nested.3063))) (define L.tmp.3066 (begin (set! r9 14) (jump L.tmp.3068))) (define L.tmp.3067 (begin (set! r9 6) (jump L.tmp.3068))) (define L.tmp.3068 (if (!= r9 6) (jump L.__nested.3064) (jump L.__nested.3065))) (define L.__nested.3064 (begin (set! rax r13) (set! rax (- rax r14)) (jump r15))) (define L.__nested.3065 (begin (set! rax 574) (jump r15))) (define L.__nested.3062 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3066) (jump L.tmp.3067)))) (define L.__nested.3063 (begin (set! rax 574) (jump r15))) (define L.fact.3046 (begin (set! (rbp - 0) r15) (set! (rbp - 8) rdi) (if (= (rbp - 8) 0) (jump L.tmp.3074) (jump L.tmp.3075)))) (define L.tmp.3074 (begin (set! r15 14) (jump L.tmp.3076))) (define L.tmp.3075 (begin (set! r15 6) (jump L.tmp.3076))) (define L.tmp.3076 (if (!= r15 6) (jump L.__nested.3072) (jump L.__nested.3073))) (define L.rp.3049 (begin (set! rbp (+ rbp 16)) (set! r15 rax) (set! rbp (- rbp 16)) (set! rdi r15) (set! r15 L.rp.3050) (jump L.fact.3046))) (define L.rp.3050 (begin (set! rbp (+ rbp 16)) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.*.3048))) (define L.__nested.3072 (begin (set! rax 8) (jump (rbp - 0)))) (define L.__nested.3073 (begin (set! rbp (- rbp 16)) (set! rsi 8) (set! rdi (rbp - -8)) (set! r15 L.rp.3049) (jump L.-.3047)))) (module (define L.__main.3081 (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.3077))) (define L.+.3078 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3089) (jump L.tmp.3090)))) (define L.tmp.3089 (begin (set! r9 14) (jump L.tmp.3091))) (define L.tmp.3090 (begin (set! r9 6) (jump L.tmp.3091))) (define L.tmp.3091 (if (!= r9 6) (jump L.__nested.3082) (jump L.__nested.3083))) (define L.tmp.3086 (begin (set! r9 14) (jump L.tmp.3088))) (define L.tmp.3087 (begin (set! r9 6) (jump L.tmp.3088))) (define L.tmp.3088 (if (!= r9 6) (jump L.__nested.3084) (jump L.__nested.3085))) (define L.__nested.3084 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.3085 (begin (set! rax 318) (jump r15))) (define L.__nested.3082 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3086) (jump L.tmp.3087)))) (define L.__nested.3083 (begin (set! rax 318) (jump r15))) (define L.fib_loop.3077 (begin (set! (rbp - 0) r15) (set! r15 rdi) (set! (rbp - 16) rsi) (set! (rbp - 8) rdx) (if (= r15 0) (jump L.tmp.3099) (jump L.tmp.3100)))) (define L.tmp.3099 (begin (set! r14 14) (jump L.tmp.3101))) (define L.tmp.3100 (begin (set! r14 6) (jump L.tmp.3101))) (define L.tmp.3101 (if (!= r14 6) (jump L.__nested.3092) (jump L.__nested.3093))) (define L.tmp.3096 (begin (set! r14 14) (jump L.tmp.3098))) (define L.tmp.3097 (begin (set! r14 6) (jump L.tmp.3098))) (define L.tmp.3098 (if (!= r14 6) (jump L.__nested.3094) (jump L.__nested.3095))) (define L.rp.3079 (begin (set! rbp (+ rbp 32)) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3080) (jump L.+.3078))) (define L.rp.3080 (begin (set! rbp (+ rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.3077))) (define L.__nested.3094 (begin (set! rax (rbp - 8)) (jump (rbp - 0)))) (define L.__nested.3095 (begin (set! rbp (- rbp 32)) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3079) (jump L.+.3078))) (define L.__nested.3092 (begin (set! rax (rbp - 16)) (jump (rbp - 0)))) (define L.__nested.3093 (if (= r15 8) (jump L.tmp.3096) (jump L.tmp.3097)))) (module (define L.__main.3106 (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.3102))) (define L.+.3103 (begin (set! r15 r15) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3114) (jump L.tmp.3115)))) (define L.tmp.3114 (begin (set! r9 14) (jump L.tmp.3116))) (define L.tmp.3115 (begin (set! r9 6) (jump L.tmp.3116))) (define L.tmp.3116 (if (!= r9 6) (jump L.__nested.3107) (jump L.__nested.3108))) (define L.tmp.3111 (begin (set! r9 14) (jump L.tmp.3113))) (define L.tmp.3112 (begin (set! r9 6) (jump L.tmp.3113))) (define L.tmp.3113 (if (!= r9 6) (jump L.__nested.3109) (jump L.__nested.3110))) (define L.__nested.3109 (begin (set! rax r13) (set! rax (+ rax r14)) (jump r15))) (define L.__nested.3110 (begin (set! rax 318) (jump r15))) (define L.__nested.3107 (begin (set! r9 r13) (set! r9 (bitwise-and r9 7)) (if (= r9 0) (jump L.tmp.3111) (jump L.tmp.3112)))) (define L.__nested.3108 (begin (set! rax 318) (jump r15))) (define L.fib_loop.3102 (begin (set! (rbp - 0) r15) (set! r15 rdi) (set! (rbp - 16) rsi) (set! (rbp - 8) rdx) (if (= r15 0) (jump L.tmp.3124) (jump L.tmp.3125)))) (define L.tmp.3124 (begin (set! r14 14) (jump L.tmp.3126))) (define L.tmp.3125 (begin (set! r14 6) (jump L.tmp.3126))) (define L.tmp.3126 (if (!= r14 6) (jump L.__nested.3117) (jump L.__nested.3118))) (define L.tmp.3121 (begin (set! r14 14) (jump L.tmp.3123))) (define L.tmp.3122 (begin (set! r14 6) (jump L.tmp.3123))) (define L.tmp.3123 (if (!= r14 6) (jump L.__nested.3119) (jump L.__nested.3120))) (define L.rp.3104 (begin (set! rbp (+ rbp 32)) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3105) (jump L.+.3103))) (define L.rp.3105 (begin (set! rbp (+ rbp 32)) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.3102))) (define L.__nested.3119 (begin (set! rax (rbp - 8)) (jump (rbp - 0)))) (define L.__nested.3120 (begin (set! rbp (- rbp 32)) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3104) (jump L.+.3103))) (define L.__nested.3117 (begin (set! rax (rbp - 16)) (jump (rbp - 0)))) (define L.__nested.3118 (if (= r15 8) (jump L.tmp.3121) (jump L.tmp.3122))))) ((begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.id.3127) (with-label L.id.3127 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15)) (begin (set! (rbp - 0) r15) (set! rbp (- rbp 8)) (set! rdi 40) (set! r15 L.rp.3131) (jump L.id.3129) (with-label L.+.3130 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3140) (jump L.tmp.3141) (with-label L.tmp.3140 (set! r9 14)) (jump L.tmp.3142) (with-label L.tmp.3141 (set! r9 6)) (jump L.tmp.3142) (with-label L.tmp.3142 (compare r9 6)) (jump-if != L.__nested.3133) (jump L.__nested.3134) (with-label L.tmp.3137 (set! r9 14)) (jump L.tmp.3139) (with-label L.tmp.3138 (set! r9 6)) (jump L.tmp.3139) (with-label L.tmp.3139 (compare r9 6)) (jump-if != L.__nested.3135) (jump L.__nested.3136) (with-label L.__nested.3135 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3136 (set! rax 318)) (jump r15) (with-label L.__nested.3133 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3137) (jump L.tmp.3138) (with-label L.__nested.3134 (set! rax 318)) (jump r15) (with-label L.id.3129 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15) (with-label L.rp.3131 (set! rbp (+ rbp 8))) (set! r15 rax) (set! rsi r15) (set! rdi 40) (set! r15 (rbp - 0)) (jump L.+.3130)) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.even?.3144) (with-label L.+.3145 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3156) (jump L.tmp.3157) (with-label L.tmp.3156 (set! r9 14)) (jump L.tmp.3158) (with-label L.tmp.3157 (set! r9 6)) (jump L.tmp.3158) (with-label L.tmp.3158 (compare r9 6)) (jump-if != L.__nested.3149) (jump L.__nested.3150) (with-label L.tmp.3153 (set! r9 14)) (jump L.tmp.3155) (with-label L.tmp.3154 (set! r9 6)) (jump L.tmp.3155) (with-label L.tmp.3155 (compare r9 6)) (jump-if != L.__nested.3151) (jump L.__nested.3152) (with-label L.__nested.3151 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3152 (set! rax 318)) (jump r15) (with-label L.__nested.3149 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3153) (jump L.tmp.3154) (with-label L.__nested.3150 (set! rax 318)) (jump r15) (with-label L.odd?.3143 (set! (rbp - 0) r15)) (set! r15 rdi) (compare r15 0) (jump-if = L.tmp.3161) (jump L.tmp.3162) (with-label L.tmp.3161 (set! r14 14)) (jump L.tmp.3163) (with-label L.tmp.3162 (set! r14 6)) (jump L.tmp.3163) (with-label L.tmp.3163 (compare r14 6)) (jump-if != L.__nested.3159) (jump L.__nested.3160) (with-label L.rp.3146 (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.even?.3144) (with-label L.__nested.3159 (set! rax 0)) (jump (rbp - 0)) (with-label L.__nested.3160 (set! rbp (- rbp 8))) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3146) (jump L.+.3145) (with-label L.even?.3144 (set! (rbp - 0) r15)) (set! r15 rdi) (compare r15 0) (jump-if = L.tmp.3166) (jump L.tmp.3167) (with-label L.tmp.3166 (set! r14 14)) (jump L.tmp.3168) (with-label L.tmp.3167 (set! r14 6)) (jump L.tmp.3168) (with-label L.tmp.3168 (compare r14 6)) (jump-if != L.__nested.3164) (jump L.__nested.3165) (with-label L.rp.3147 (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.odd?.3143) (with-label L.__nested.3164 (set! rax 8)) (jump (rbp - 0)) (with-label L.__nested.3165 (set! rbp (- rbp 8))) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3147) (jump L.+.3145)) (begin (set! r15 r15) (set! rax 0) (jump r15) (with-label L.zero.3169 (set! r15 r15)) (set! r14 rdi) (set! r14 rsi) (set! r14 rdx) (set! r14 rcx) (set! rax 0) (jump r15)) (begin (set! r15 r15) (set! r14 L.id.3171) (set! rdi 40) (set! r15 r15) (jump r14) (with-label L.id.3171 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15)) (begin (set! r15 r15) (set! r14 14) (jump L.tmp.3175) (with-label L.id1.3173 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15) (with-label L.id2.3174 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15) (with-label L.tmp.3175 (set! r14 L.id1.3173)) (jump L.tmp.3177) (with-label L.tmp.3176 (set! r14 L.id2.3174)) (jump L.tmp.3177) (with-label L.tmp.3177 (set! rdi 40)) (set! r15 r15) (jump r14)) (begin (set! (rbp - 0) r15) (set! rbp (- rbp 16)) (set! rsi 48) (set! rdi 40) (set! r15 L.rp.3181) (jump L.+.3179) (with-label L.*.3180 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3191) (jump L.tmp.3192) (with-label L.tmp.3191 (set! r9 14)) (jump L.tmp.3193) (with-label L.tmp.3192 (set! r9 6)) (jump L.tmp.3193) (with-label L.tmp.3193 (compare r9 6)) (jump-if != L.__nested.3184) (jump L.__nested.3185) (with-label L.tmp.3188 (set! r9 14)) (jump L.tmp.3190) (with-label L.tmp.3189 (set! r9 6)) (jump L.tmp.3190) (with-label L.tmp.3190 (compare r9 6)) (jump-if != L.__nested.3186) (jump L.__nested.3187) (with-label L.__nested.3186 (set! r13 r13)) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15) (with-label L.__nested.3187 (set! rax 62)) (jump r15) (with-label L.__nested.3184 (set! r9 r14)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3188) (jump L.tmp.3189) (with-label L.__nested.3185 (set! rax 62)) (jump r15) (with-label L.+.3179 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3201) (jump L.tmp.3202) (with-label L.tmp.3201 (set! r9 14)) (jump L.tmp.3203) (with-label L.tmp.3202 (set! r9 6)) (jump L.tmp.3203) (with-label L.tmp.3203 (compare r9 6)) (jump-if != L.__nested.3194) (jump L.__nested.3195) (with-label L.tmp.3198 (set! r9 14)) (jump L.tmp.3200) (with-label L.tmp.3199 (set! r9 6)) (jump L.tmp.3200) (with-label L.tmp.3200 (compare r9 6)) (jump-if != L.__nested.3196) (jump L.__nested.3197) (with-label L.__nested.3196 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3197 (set! rax 318)) (jump r15) (with-label L.__nested.3194 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3198) (jump L.tmp.3199) (with-label L.__nested.3195 (set! rax 318)) (jump r15) (with-label L.rp.3181 (set! rbp (+ rbp 16))) (set! (rbp - 8) rax) (set! rbp (- rbp 16)) (set! rsi 40) (set! rdi 32) (set! r15 L.rp.3182) (jump L.*.3180) (with-label L.rp.3182 (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.+.3179)) (begin (set! (rbp - 0) r15) (set! rbp (- rbp 8)) (set! rsi 48) (set! rdi 40) (set! r15 L.rp.3205) (jump L.+.3204) (with-label L.+.3204 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3219) (jump L.tmp.3220) (with-label L.tmp.3219 (set! r9 14)) (jump L.tmp.3221) (with-label L.tmp.3220 (set! r9 6)) (jump L.tmp.3221) (with-label L.tmp.3221 (compare r9 6)) (jump-if != L.__nested.3212) (jump L.__nested.3213) (with-label L.tmp.3216 (set! r9 14)) (jump L.tmp.3218) (with-label L.tmp.3217 (set! r9 6)) (jump L.tmp.3218) (with-label L.tmp.3218 (compare r9 6)) (jump-if != L.__nested.3214) (jump L.__nested.3215) (with-label L.__nested.3214 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3215 (set! rax 318)) (jump r15) (with-label L.__nested.3212 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3216) (jump L.tmp.3217) (with-label L.__nested.3213 (set! rax 318)) (jump r15) (with-label L.rp.3205 (set! rbp (+ rbp 8))) (set! r15 rax) (compare r15 88) (jump-if = L.tmp.3208) (jump L.tmp.3209) (with-label L.tmp.3208 (set! r15 14)) (jump L.tmp.3210) (with-label L.tmp.3209 (set! r15 6)) (jump L.tmp.3210) (with-label L.tmp.3210 (compare r15 6)) (jump-if != L.__nested.3206) (jump L.__nested.3207) (with-label L.__nested.3206 (set! rax 32)) (jump (rbp - 0)) (with-label L.__nested.3207 (set! rax 48)) (jump (rbp - 0))) (begin (set! r15 r15) (set! rax 14) (jump r15)) (begin (set! r15 r15) (set! rax 6) (jump r15)) (begin (set! r15 r15) (set! rax 22) (jump r15)) (begin (set! r15 r15) (set! (rbp - 0) 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.F.3225) (with-label L.+.3228 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3245) (jump L.tmp.3246) (with-label L.tmp.3245 (set! r9 14)) (jump L.tmp.3247) (with-label L.tmp.3246 (set! r9 6)) (jump L.tmp.3247) (with-label L.tmp.3247 (compare r9 6)) (jump-if != L.__nested.3238) (jump L.__nested.3239) (with-label L.tmp.3242 (set! r9 14)) (jump L.tmp.3244) (with-label L.tmp.3243 (set! r9 6)) (jump L.tmp.3244) (with-label L.tmp.3244 (compare r9 6)) (jump-if != L.__nested.3240) (jump L.__nested.3241) (with-label L.__nested.3240 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3241 (set! rax 318)) (jump r15) (with-label L.__nested.3238 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3242) (jump L.tmp.3243) (with-label L.__nested.3239 (set! rax 318)) (jump r15) (with-label L.F.3225 (set! (rbp - 8) r15)) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! rdi rcx) (set! r8 r8) (set! r9 r9) (set! rsi (rbp - 0)) (set! rbp (- rbp 16)) (set! (rbp - 8) 64) (set! (rbp - 0) rsi) (set! r9 r9) (set! r8 r8) (set! rcx rdi) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.3229) (jump L.G.3226) (with-label L.rp.3229 (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi 80) (set! r15 (rbp - 8)) (jump L.+.3228) (with-label L.G.3226 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! rdi rdx) (set! rsi rcx) (set! r8 r8) (set! r9 r9) (set! rdx (rbp - 0)) (set! rcx (rbp - 8)) (set! (rbp - 16) 72) (set! (rbp - 8) rcx) (set! (rbp - 0) rdx) (set! r9 r9) (set! r8 r8) (set! rcx rsi) (set! rdx rdi) (set! rsi r13) (set! rdi r14) (set! r15 r15) (jump L.H.3227) (with-label L.H.3227 (set! (rbp - 24) r15)) (set! r15 rdi) (set! r14 rsi) (set! (rbp - 64) rdx) (set! (rbp - 56) rcx) (set! (rbp - 48) r8) (set! (rbp - 40) r9) (set! (rbp - 32) (rbp - 0)) (set! (rbp - 8) (rbp - 8)) (set! (rbp - 0) (rbp - 16)) (set! rbp (- rbp 72)) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.3230) (jump L.+.3228) (with-label L.rp.3230 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -8)) (set! rdi r15) (set! r15 L.rp.3231) (jump L.+.3228) (with-label L.rp.3231 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -16)) (set! rdi r15) (set! r15 L.rp.3232) (jump L.+.3228) (with-label L.rp.3232 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -24)) (set! rdi r15) (set! r15 L.rp.3233) (jump L.+.3228) (with-label L.rp.3233 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -32)) (set! rdi r15) (set! r15 L.rp.3234) (jump L.+.3228) (with-label L.rp.3234 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -40)) (set! rdi r15) (set! r15 L.rp.3235) (jump L.+.3228) (with-label L.rp.3235 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -64)) (set! rdi r15) (set! r15 L.rp.3236) (jump L.+.3228) (with-label L.rp.3236 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rsi (rbp - 0)) (set! rdi r15) (set! r15 (rbp - 24)) (jump L.+.3228)) (begin (set! r15 r15) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.swap.3248) (with-label L.<.3249 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3261) (jump L.tmp.3262) (with-label L.tmp.3261 (set! r9 14)) (jump L.tmp.3263) (with-label L.tmp.3262 (set! r9 6)) (jump L.tmp.3263) (with-label L.tmp.3263 (compare r9 6)) (jump-if != L.__nested.3252) (jump L.__nested.3253) (with-label L.tmp.3258 (set! r9 14)) (jump L.tmp.3260) (with-label L.tmp.3259 (set! r9 6)) (jump L.tmp.3260) (with-label L.tmp.3260 (compare r9 6)) (jump-if != L.__nested.3254) (jump L.__nested.3255) (with-label L.__nested.3256 (set! rax 14)) (jump r15) (with-label L.__nested.3257 (set! rax 6)) (jump r15) (with-label L.__nested.3254 (compare r14 r13)) (jump-if < L.__nested.3256) (jump L.__nested.3257) (with-label L.__nested.3255 (set! rax 830)) (jump r15) (with-label L.__nested.3252 (set! r9 r14)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3258) (jump L.tmp.3259) (with-label L.__nested.3253 (set! rax 830)) (jump r15) (with-label L.swap.3248 (set! (rbp - 0) r15)) (set! (rbp - 8) rdi) (set! (rbp - 16) rsi) (set! rbp (- rbp 24)) (set! rsi (rbp - -16)) (set! rdi (rbp - -8)) (set! r15 L.rp.3250) (jump L.<.3249) (with-label L.rp.3250 (set! rbp (+ rbp 24))) (set! r15 rax) (compare r15 6) (jump-if != L.__nested.3264) (jump L.__nested.3265) (with-label L.__nested.3264 (set! rax (rbp - 8))) (jump (rbp - 0)) (with-label L.__nested.3265 (set! rsi (rbp - 8))) (set! rdi (rbp - 16)) (set! r15 (rbp - 0)) (jump L.swap.3248)) (begin (set! r15 r15) (set! rsi 8) (set! rdi 40) (set! r15 r15) (jump L.fact_loop.3266) (with-label L.*.3268 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3279) (jump L.tmp.3280) (with-label L.tmp.3279 (set! r9 14)) (jump L.tmp.3281) (with-label L.tmp.3280 (set! r9 6)) (jump L.tmp.3281) (with-label L.tmp.3281 (compare r9 6)) (jump-if != L.__nested.3272) (jump L.__nested.3273) (with-label L.tmp.3276 (set! r9 14)) (jump L.tmp.3278) (with-label L.tmp.3277 (set! r9 6)) (jump L.tmp.3278) (with-label L.tmp.3278 (compare r9 6)) (jump-if != L.__nested.3274) (jump L.__nested.3275) (with-label L.__nested.3274 (set! r13 r13)) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15) (with-label L.__nested.3275 (set! rax 62)) (jump r15) (with-label L.__nested.3272 (set! r9 r14)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3276) (jump L.tmp.3277) (with-label L.__nested.3273 (set! rax 62)) (jump r15) (with-label L.-.3267 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3289) (jump L.tmp.3290) (with-label L.tmp.3289 (set! r9 14)) (jump L.tmp.3291) (with-label L.tmp.3290 (set! r9 6)) (jump L.tmp.3291) (with-label L.tmp.3291 (compare r9 6)) (jump-if != L.__nested.3282) (jump L.__nested.3283) (with-label L.tmp.3286 (set! r9 14)) (jump L.tmp.3288) (with-label L.tmp.3287 (set! r9 6)) (jump L.tmp.3288) (with-label L.tmp.3288 (compare r9 6)) (jump-if != L.__nested.3284) (jump L.__nested.3285) (with-label L.__nested.3284 (set! rax r13)) (set! rax (- rax r14)) (jump r15) (with-label L.__nested.3285 (set! rax 574)) (jump r15) (with-label L.__nested.3282 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3286) (jump L.tmp.3287) (with-label L.__nested.3283 (set! rax 574)) (jump r15) (with-label L.fact_loop.3266 (set! (rbp - 0) r15)) (set! (rbp - 8) rdi) (set! (rbp - 16) rsi) (compare (rbp - 8) 0) (jump-if = L.tmp.3294) (jump L.tmp.3295) (with-label L.tmp.3294 (set! r15 14)) (jump L.tmp.3296) (with-label L.tmp.3295 (set! r15 6)) (jump L.tmp.3296) (with-label L.tmp.3296 (compare r15 6)) (jump-if != L.__nested.3292) (jump L.__nested.3293) (with-label L.rp.3269 (set! rbp (+ rbp 32))) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3270) (jump L.*.3268) (with-label L.rp.3270 (set! rbp (+ rbp 32))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fact_loop.3266) (with-label L.__nested.3292 (set! rax (rbp - 16))) (jump (rbp - 0)) (with-label L.__nested.3293 (set! rbp (- rbp 32))) (set! rsi 8) (set! rdi (rbp - -24)) (set! r15 L.rp.3269) (jump L.-.3267)) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.fact.3297) (with-label L.*.3299 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3310) (jump L.tmp.3311) (with-label L.tmp.3310 (set! r9 14)) (jump L.tmp.3312) (with-label L.tmp.3311 (set! r9 6)) (jump L.tmp.3312) (with-label L.tmp.3312 (compare r9 6)) (jump-if != L.__nested.3303) (jump L.__nested.3304) (with-label L.tmp.3307 (set! r9 14)) (jump L.tmp.3309) (with-label L.tmp.3308 (set! r9 6)) (jump L.tmp.3309) (with-label L.tmp.3309 (compare r9 6)) (jump-if != L.__nested.3305) (jump L.__nested.3306) (with-label L.__nested.3305 (set! r13 r13)) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15) (with-label L.__nested.3306 (set! rax 62)) (jump r15) (with-label L.__nested.3303 (set! r9 r14)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3307) (jump L.tmp.3308) (with-label L.__nested.3304 (set! rax 62)) (jump r15) (with-label L.-.3298 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3320) (jump L.tmp.3321) (with-label L.tmp.3320 (set! r9 14)) (jump L.tmp.3322) (with-label L.tmp.3321 (set! r9 6)) (jump L.tmp.3322) (with-label L.tmp.3322 (compare r9 6)) (jump-if != L.__nested.3313) (jump L.__nested.3314) (with-label L.tmp.3317 (set! r9 14)) (jump L.tmp.3319) (with-label L.tmp.3318 (set! r9 6)) (jump L.tmp.3319) (with-label L.tmp.3319 (compare r9 6)) (jump-if != L.__nested.3315) (jump L.__nested.3316) (with-label L.__nested.3315 (set! rax r13)) (set! rax (- rax r14)) (jump r15) (with-label L.__nested.3316 (set! rax 574)) (jump r15) (with-label L.__nested.3313 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3317) (jump L.tmp.3318) (with-label L.__nested.3314 (set! rax 574)) (jump r15) (with-label L.fact.3297 (set! (rbp - 0) r15)) (set! (rbp - 8) rdi) (compare (rbp - 8) 0) (jump-if = L.tmp.3325) (jump L.tmp.3326) (with-label L.tmp.3325 (set! r15 14)) (jump L.tmp.3327) (with-label L.tmp.3326 (set! r15 6)) (jump L.tmp.3327) (with-label L.tmp.3327 (compare r15 6)) (jump-if != L.__nested.3323) (jump L.__nested.3324) (with-label L.rp.3300 (set! rbp (+ rbp 16))) (set! r15 rax) (set! rbp (- rbp 16)) (set! rdi r15) (set! r15 L.rp.3301) (jump L.fact.3297) (with-label L.rp.3301 (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.*.3299) (with-label L.__nested.3323 (set! rax 8)) (jump (rbp - 0)) (with-label L.__nested.3324 (set! rbp (- rbp 16))) (set! rsi 8) (set! rdi (rbp - -8)) (set! r15 L.rp.3300) (jump L.-.3298)) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.3328) (with-label L.+.3329 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3340) (jump L.tmp.3341) (with-label L.tmp.3340 (set! r9 14)) (jump L.tmp.3342) (with-label L.tmp.3341 (set! r9 6)) (jump L.tmp.3342) (with-label L.tmp.3342 (compare r9 6)) (jump-if != L.__nested.3333) (jump L.__nested.3334) (with-label L.tmp.3337 (set! r9 14)) (jump L.tmp.3339) (with-label L.tmp.3338 (set! r9 6)) (jump L.tmp.3339) (with-label L.tmp.3339 (compare r9 6)) (jump-if != L.__nested.3335) (jump L.__nested.3336) (with-label L.__nested.3335 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3336 (set! rax 318)) (jump r15) (with-label L.__nested.3333 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3337) (jump L.tmp.3338) (with-label L.__nested.3334 (set! rax 318)) (jump r15) (with-label L.fib_loop.3328 (set! (rbp - 0) r15)) (set! r15 rdi) (set! (rbp - 16) rsi) (set! (rbp - 8) rdx) (compare r15 0) (jump-if = L.tmp.3350) (jump L.tmp.3351) (with-label L.tmp.3350 (set! r14 14)) (jump L.tmp.3352) (with-label L.tmp.3351 (set! r14 6)) (jump L.tmp.3352) (with-label L.tmp.3352 (compare r14 6)) (jump-if != L.__nested.3343) (jump L.__nested.3344) (with-label L.tmp.3347 (set! r14 14)) (jump L.tmp.3349) (with-label L.tmp.3348 (set! r14 6)) (jump L.tmp.3349) (with-label L.tmp.3349 (compare r14 6)) (jump-if != L.__nested.3345) (jump L.__nested.3346) (with-label L.rp.3330 (set! rbp (+ rbp 32))) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3331) (jump L.+.3329) (with-label L.rp.3331 (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.3328) (with-label L.__nested.3345 (set! rax (rbp - 8))) (jump (rbp - 0)) (with-label L.__nested.3346 (set! rbp (- rbp 32))) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3330) (jump L.+.3329) (with-label L.__nested.3343 (set! rax (rbp - 16))) (jump (rbp - 0)) (with-label L.__nested.3344 (compare r15 8)) (jump-if = L.tmp.3347) (jump L.tmp.3348)) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.3353) (with-label L.+.3354 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3365) (jump L.tmp.3366) (with-label L.tmp.3365 (set! r9 14)) (jump L.tmp.3367) (with-label L.tmp.3366 (set! r9 6)) (jump L.tmp.3367) (with-label L.tmp.3367 (compare r9 6)) (jump-if != L.__nested.3358) (jump L.__nested.3359) (with-label L.tmp.3362 (set! r9 14)) (jump L.tmp.3364) (with-label L.tmp.3363 (set! r9 6)) (jump L.tmp.3364) (with-label L.tmp.3364 (compare r9 6)) (jump-if != L.__nested.3360) (jump L.__nested.3361) (with-label L.__nested.3360 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3361 (set! rax 318)) (jump r15) (with-label L.__nested.3358 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3362) (jump L.tmp.3363) (with-label L.__nested.3359 (set! rax 318)) (jump r15) (with-label L.fib_loop.3353 (set! (rbp - 0) r15)) (set! r15 rdi) (set! (rbp - 16) rsi) (set! (rbp - 8) rdx) (compare r15 0) (jump-if = L.tmp.3375) (jump L.tmp.3376) (with-label L.tmp.3375 (set! r14 14)) (jump L.tmp.3377) (with-label L.tmp.3376 (set! r14 6)) (jump L.tmp.3377) (with-label L.tmp.3377 (compare r14 6)) (jump-if != L.__nested.3368) (jump L.__nested.3369) (with-label L.tmp.3372 (set! r14 14)) (jump L.tmp.3374) (with-label L.tmp.3373 (set! r14 6)) (jump L.tmp.3374) (with-label L.tmp.3374 (compare r14 6)) (jump-if != L.__nested.3370) (jump L.__nested.3371) (with-label L.rp.3355 (set! rbp (+ rbp 32))) (set! (rbp - 24) rax) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3356) (jump L.+.3354) (with-label L.rp.3356 (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.3353) (with-label L.__nested.3370 (set! rax (rbp - 8))) (jump (rbp - 0)) (with-label L.__nested.3371 (set! rbp (- rbp 32))) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3355) (jump L.+.3354) (with-label L.__nested.3368 (set! rax (rbp - 16))) (jump (rbp - 0)) (with-label L.__nested.3369 (compare r15 8)) (jump-if = L.tmp.3372) (jump L.tmp.3373))) ((begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.id.3378) (with-label L.id.3378 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15)) (begin (set! r10 r15) (set! (rbp - 0) r10) (set! rbp (- rbp 8)) (set! rdi 40) (set! r15 L.rp.3382) (jump L.id.3380) (with-label L.+.3381 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3391) (jump L.tmp.3392) (with-label L.tmp.3391 (set! r9 14)) (jump L.tmp.3393) (with-label L.tmp.3392 (set! r9 6)) (jump L.tmp.3393) (with-label L.tmp.3393 (compare r9 6)) (jump-if != L.__nested.3384) (jump L.__nested.3385) (with-label L.tmp.3388 (set! r9 14)) (jump L.tmp.3390) (with-label L.tmp.3389 (set! r9 6)) (jump L.tmp.3390) (with-label L.tmp.3390 (compare r9 6)) (jump-if != L.__nested.3386) (jump L.__nested.3387) (with-label L.__nested.3386 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3387 (set! rax 318)) (jump r15) (with-label L.__nested.3384 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3388) (jump L.tmp.3389) (with-label L.__nested.3385 (set! rax 318)) (jump r15) (with-label L.id.3380 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15) (with-label L.rp.3382 (set! rbp (+ rbp 8))) (set! r15 rax) (set! rsi r15) (set! rdi 40) (set! r15 (rbp - 0)) (jump L.+.3381)) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.even?.3395) (with-label L.+.3396 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3407) (jump L.tmp.3408) (with-label L.tmp.3407 (set! r9 14)) (jump L.tmp.3409) (with-label L.tmp.3408 (set! r9 6)) (jump L.tmp.3409) (with-label L.tmp.3409 (compare r9 6)) (jump-if != L.__nested.3400) (jump L.__nested.3401) (with-label L.tmp.3404 (set! r9 14)) (jump L.tmp.3406) (with-label L.tmp.3405 (set! r9 6)) (jump L.tmp.3406) (with-label L.tmp.3406 (compare r9 6)) (jump-if != L.__nested.3402) (jump L.__nested.3403) (with-label L.__nested.3402 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3403 (set! rax 318)) (jump r15) (with-label L.__nested.3400 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3404) (jump L.tmp.3405) (with-label L.__nested.3401 (set! rax 318)) (jump r15) (with-label L.odd?.3394 (set! r10 r15)) (set! (rbp - 0) r10) (set! r15 rdi) (compare r15 0) (jump-if = L.tmp.3412) (jump L.tmp.3413) (with-label L.tmp.3412 (set! r14 14)) (jump L.tmp.3414) (with-label L.tmp.3413 (set! r14 6)) (jump L.tmp.3414) (with-label L.tmp.3414 (compare r14 6)) (jump-if != L.__nested.3410) (jump L.__nested.3411) (with-label L.rp.3397 (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.even?.3395) (with-label L.__nested.3410 (set! rax 0)) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3411 (set! rbp (- rbp 8))) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3397) (jump L.+.3396) (with-label L.even?.3395 (set! r10 r15)) (set! (rbp - 0) r10) (set! r15 rdi) (compare r15 0) (jump-if = L.tmp.3417) (jump L.tmp.3418) (with-label L.tmp.3417 (set! r14 14)) (jump L.tmp.3419) (with-label L.tmp.3418 (set! r14 6)) (jump L.tmp.3419) (with-label L.tmp.3419 (compare r14 6)) (jump-if != L.__nested.3415) (jump L.__nested.3416) (with-label L.rp.3398 (set! rbp (+ rbp 8))) (set! r15 rax) (set! rdi r15) (set! r15 (rbp - 0)) (jump L.odd?.3394) (with-label L.__nested.3415 (set! rax 8)) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3416 (set! rbp (- rbp 8))) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3398) (jump L.+.3396)) (begin (set! r15 r15) (set! rax 0) (jump r15) (with-label L.zero.3420 (set! r15 r15)) (set! r14 rdi) (set! r14 rsi) (set! r14 rdx) (set! r14 rcx) (set! rax 0) (jump r15)) (begin (set! r15 r15) (set! r14 L.id.3422) (set! rdi 40) (set! r15 r15) (jump r14) (with-label L.id.3422 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15)) (begin (set! r15 r15) (set! r14 14) (jump L.tmp.3426) (with-label L.id1.3424 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15) (with-label L.id2.3425 (set! r15 r15)) (set! r14 rdi) (set! rax r14) (jump r15) (with-label L.tmp.3426 (set! r14 L.id1.3424)) (jump L.tmp.3428) (with-label L.tmp.3427 (set! r14 L.id2.3425)) (jump L.tmp.3428) (with-label L.tmp.3428 (set! rdi 40)) (set! r15 r15) (jump r14)) (begin (set! r10 r15) (set! (rbp - 0) r10) (set! rbp (- rbp 16)) (set! rsi 48) (set! rdi 40) (set! r15 L.rp.3432) (jump L.+.3430) (with-label L.*.3431 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3442) (jump L.tmp.3443) (with-label L.tmp.3442 (set! r9 14)) (jump L.tmp.3444) (with-label L.tmp.3443 (set! r9 6)) (jump L.tmp.3444) (with-label L.tmp.3444 (compare r9 6)) (jump-if != L.__nested.3435) (jump L.__nested.3436) (with-label L.tmp.3439 (set! r9 14)) (jump L.tmp.3441) (with-label L.tmp.3440 (set! r9 6)) (jump L.tmp.3441) (with-label L.tmp.3441 (compare r9 6)) (jump-if != L.__nested.3437) (jump L.__nested.3438) (with-label L.__nested.3437 (set! r13 r13)) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15) (with-label L.__nested.3438 (set! rax 62)) (jump r15) (with-label L.__nested.3435 (set! r9 r14)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3439) (jump L.tmp.3440) (with-label L.__nested.3436 (set! rax 62)) (jump r15) (with-label L.+.3430 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3452) (jump L.tmp.3453) (with-label L.tmp.3452 (set! r9 14)) (jump L.tmp.3454) (with-label L.tmp.3453 (set! r9 6)) (jump L.tmp.3454) (with-label L.tmp.3454 (compare r9 6)) (jump-if != L.__nested.3445) (jump L.__nested.3446) (with-label L.tmp.3449 (set! r9 14)) (jump L.tmp.3451) (with-label L.tmp.3450 (set! r9 6)) (jump L.tmp.3451) (with-label L.tmp.3451 (compare r9 6)) (jump-if != L.__nested.3447) (jump L.__nested.3448) (with-label L.__nested.3447 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3448 (set! rax 318)) (jump r15) (with-label L.__nested.3445 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3449) (jump L.tmp.3450) (with-label L.__nested.3446 (set! rax 318)) (jump r15) (with-label L.rp.3432 (set! rbp (+ rbp 16))) (set! r10 rax) (set! (rbp - 8) r10) (set! rbp (- rbp 16)) (set! rsi 40) (set! rdi 32) (set! r15 L.rp.3433) (jump L.*.3431) (with-label L.rp.3433 (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.+.3430)) (begin (set! r10 r15) (set! (rbp - 0) r10) (set! rbp (- rbp 8)) (set! rsi 48) (set! rdi 40) (set! r15 L.rp.3456) (jump L.+.3455) (with-label L.+.3455 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3470) (jump L.tmp.3471) (with-label L.tmp.3470 (set! r9 14)) (jump L.tmp.3472) (with-label L.tmp.3471 (set! r9 6)) (jump L.tmp.3472) (with-label L.tmp.3472 (compare r9 6)) (jump-if != L.__nested.3463) (jump L.__nested.3464) (with-label L.tmp.3467 (set! r9 14)) (jump L.tmp.3469) (with-label L.tmp.3468 (set! r9 6)) (jump L.tmp.3469) (with-label L.tmp.3469 (compare r9 6)) (jump-if != L.__nested.3465) (jump L.__nested.3466) (with-label L.__nested.3465 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3466 (set! rax 318)) (jump r15) (with-label L.__nested.3463 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3467) (jump L.tmp.3468) (with-label L.__nested.3464 (set! rax 318)) (jump r15) (with-label L.rp.3456 (set! rbp (+ rbp 8))) (set! r15 rax) (compare r15 88) (jump-if = L.tmp.3459) (jump L.tmp.3460) (with-label L.tmp.3459 (set! r15 14)) (jump L.tmp.3461) (with-label L.tmp.3460 (set! r15 6)) (jump L.tmp.3461) (with-label L.tmp.3461 (compare r15 6)) (jump-if != L.__nested.3457) (jump L.__nested.3458) (with-label L.__nested.3457 (set! rax 32)) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3458 (set! rax 48)) (set! r10 (rbp - 0)) (jump r10)) (begin (set! r15 r15) (set! rax 14) (jump r15)) (begin (set! r15 r15) (set! rax 6) (jump r15)) (begin (set! r15 r15) (set! rax 22) (jump r15)) (begin (set! r15 r15) (set! (rbp - 0) 56) (set! r9 48) (set! r8 40) (set! rcx 32) (set! rdx 24) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.F.3476) (with-label L.+.3479 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3496) (jump L.tmp.3497) (with-label L.tmp.3496 (set! r9 14)) (jump L.tmp.3498) (with-label L.tmp.3497 (set! r9 6)) (jump L.tmp.3498) (with-label L.tmp.3498 (compare r9 6)) (jump-if != L.__nested.3489) (jump L.__nested.3490) (with-label L.tmp.3493 (set! r9 14)) (jump L.tmp.3495) (with-label L.tmp.3494 (set! r9 6)) (jump L.tmp.3495) (with-label L.tmp.3495 (compare r9 6)) (jump-if != L.__nested.3491) (jump L.__nested.3492) (with-label L.__nested.3491 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3492 (set! rax 318)) (jump r15) (with-label L.__nested.3489 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3493) (jump L.tmp.3494) (with-label L.__nested.3490 (set! rax 318)) (jump r15) (with-label L.F.3476 (set! r10 r15)) (set! (rbp - 8) r10) (set! r15 rdi) (set! r14 rsi) (set! r13 rdx) (set! rdi rcx) (set! r8 r8) (set! r9 r9) (set! rsi (rbp - 0)) (set! rbp (- rbp 16)) (set! (rbp - 8) 64) (set! r10 rsi) (set! (rbp - 0) r10) (set! r9 r9) (set! r8 r8) (set! rcx rdi) (set! rdx r13) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.3480) (jump L.G.3477) (with-label L.rp.3480 (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi 80) (set! r15 (rbp - 8)) (jump L.+.3479) (with-label L.G.3477 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! rdi rdx) (set! rsi rcx) (set! r8 r8) (set! r9 r9) (set! rdx (rbp - 0)) (set! rcx (rbp - 8)) (set! (rbp - 16) 72) (set! r10 rcx) (set! (rbp - 8) r10) (set! r10 rdx) (set! (rbp - 0) r10) (set! r9 r9) (set! r8 r8) (set! rcx rsi) (set! rdx rdi) (set! rsi r13) (set! rdi r14) (set! r15 r15) (jump L.H.3478) (with-label L.H.3478 (set! r10 r15)) (set! (rbp - 24) r10) (set! r15 rdi) (set! r14 rsi) (set! r10 rdx) (set! (rbp - 64) r10) (set! r10 rcx) (set! (rbp - 56) r10) (set! r10 r8) (set! (rbp - 48) r10) (set! r10 r9) (set! (rbp - 40) r10) (set! r10 (rbp - 0)) (set! (rbp - 32) r10) (set! r10 (rbp - 8)) (set! (rbp - 8) r10) (set! r10 (rbp - 16)) (set! (rbp - 0) r10) (set! rbp (- rbp 72)) (set! rsi r14) (set! rdi r15) (set! r15 L.rp.3481) (jump L.+.3479) (with-label L.rp.3481 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -8)) (set! rdi r15) (set! r15 L.rp.3482) (jump L.+.3479) (with-label L.rp.3482 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -16)) (set! rdi r15) (set! r15 L.rp.3483) (jump L.+.3479) (with-label L.rp.3483 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -24)) (set! rdi r15) (set! r15 L.rp.3484) (jump L.+.3479) (with-label L.rp.3484 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -32)) (set! rdi r15) (set! r15 L.rp.3485) (jump L.+.3479) (with-label L.rp.3485 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -40)) (set! rdi r15) (set! r15 L.rp.3486) (jump L.+.3479) (with-label L.rp.3486 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rbp (- rbp 72)) (set! rsi (rbp - -64)) (set! rdi r15) (set! r15 L.rp.3487) (jump L.+.3479) (with-label L.rp.3487 (set! rbp (+ rbp 72))) (set! r15 rax) (set! rsi (rbp - 0)) (set! rdi r15) (set! r15 (rbp - 24)) (jump L.+.3479)) (begin (set! r15 r15) (set! rsi 16) (set! rdi 8) (set! r15 r15) (jump L.swap.3499) (with-label L.<.3500 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3512) (jump L.tmp.3513) (with-label L.tmp.3512 (set! r9 14)) (jump L.tmp.3514) (with-label L.tmp.3513 (set! r9 6)) (jump L.tmp.3514) (with-label L.tmp.3514 (compare r9 6)) (jump-if != L.__nested.3503) (jump L.__nested.3504) (with-label L.tmp.3509 (set! r9 14)) (jump L.tmp.3511) (with-label L.tmp.3510 (set! r9 6)) (jump L.tmp.3511) (with-label L.tmp.3511 (compare r9 6)) (jump-if != L.__nested.3505) (jump L.__nested.3506) (with-label L.__nested.3507 (set! rax 14)) (jump r15) (with-label L.__nested.3508 (set! rax 6)) (jump r15) (with-label L.__nested.3505 (compare r14 r13)) (jump-if < L.__nested.3507) (jump L.__nested.3508) (with-label L.__nested.3506 (set! rax 830)) (jump r15) (with-label L.__nested.3503 (set! r9 r14)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3509) (jump L.tmp.3510) (with-label L.__nested.3504 (set! rax 830)) (jump r15) (with-label L.swap.3499 (set! r10 r15)) (set! (rbp - 0) r10) (set! r10 rdi) (set! (rbp - 8) r10) (set! r10 rsi) (set! (rbp - 16) r10) (set! rbp (- rbp 24)) (set! rsi (rbp - -16)) (set! rdi (rbp - -8)) (set! r15 L.rp.3501) (jump L.<.3500) (with-label L.rp.3501 (set! rbp (+ rbp 24))) (set! r15 rax) (compare r15 6) (jump-if != L.__nested.3515) (jump L.__nested.3516) (with-label L.__nested.3515 (set! rax (rbp - 8))) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3516 (set! rsi (rbp - 8))) (set! rdi (rbp - 16)) (set! r15 (rbp - 0)) (jump L.swap.3499)) (begin (set! r15 r15) (set! rsi 8) (set! rdi 40) (set! r15 r15) (jump L.fact_loop.3517) (with-label L.*.3519 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3530) (jump L.tmp.3531) (with-label L.tmp.3530 (set! r9 14)) (jump L.tmp.3532) (with-label L.tmp.3531 (set! r9 6)) (jump L.tmp.3532) (with-label L.tmp.3532 (compare r9 6)) (jump-if != L.__nested.3523) (jump L.__nested.3524) (with-label L.tmp.3527 (set! r9 14)) (jump L.tmp.3529) (with-label L.tmp.3528 (set! r9 6)) (jump L.tmp.3529) (with-label L.tmp.3529 (compare r9 6)) (jump-if != L.__nested.3525) (jump L.__nested.3526) (with-label L.__nested.3525 (set! r13 r13)) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15) (with-label L.__nested.3526 (set! rax 62)) (jump r15) (with-label L.__nested.3523 (set! r9 r14)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3527) (jump L.tmp.3528) (with-label L.__nested.3524 (set! rax 62)) (jump r15) (with-label L.-.3518 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3540) (jump L.tmp.3541) (with-label L.tmp.3540 (set! r9 14)) (jump L.tmp.3542) (with-label L.tmp.3541 (set! r9 6)) (jump L.tmp.3542) (with-label L.tmp.3542 (compare r9 6)) (jump-if != L.__nested.3533) (jump L.__nested.3534) (with-label L.tmp.3537 (set! r9 14)) (jump L.tmp.3539) (with-label L.tmp.3538 (set! r9 6)) (jump L.tmp.3539) (with-label L.tmp.3539 (compare r9 6)) (jump-if != L.__nested.3535) (jump L.__nested.3536) (with-label L.__nested.3535 (set! rax r13)) (set! rax (- rax r14)) (jump r15) (with-label L.__nested.3536 (set! rax 574)) (jump r15) (with-label L.__nested.3533 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3537) (jump L.tmp.3538) (with-label L.__nested.3534 (set! rax 574)) (jump r15) (with-label L.fact_loop.3517 (set! r10 r15)) (set! (rbp - 0) r10) (set! r10 rdi) (set! (rbp - 8) r10) (set! r10 rsi) (set! (rbp - 16) r10) (set! r10 (rbp - 8)) (compare r10 0) (jump-if = L.tmp.3545) (jump L.tmp.3546) (with-label L.tmp.3545 (set! r15 14)) (jump L.tmp.3547) (with-label L.tmp.3546 (set! r15 6)) (jump L.tmp.3547) (with-label L.tmp.3547 (compare r15 6)) (jump-if != L.__nested.3543) (jump L.__nested.3544) (with-label L.rp.3520 (set! rbp (+ rbp 32))) (set! r10 rax) (set! (rbp - 24) r10) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3521) (jump L.*.3519) (with-label L.rp.3521 (set! rbp (+ rbp 32))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fact_loop.3517) (with-label L.__nested.3543 (set! rax (rbp - 16))) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3544 (set! rbp (- rbp 32))) (set! rsi 8) (set! rdi (rbp - -24)) (set! r15 L.rp.3520) (jump L.-.3518)) (begin (set! r15 r15) (set! rdi 40) (set! r15 r15) (jump L.fact.3548) (with-label L.*.3550 (set! r15 r15)) (set! r14 rdi) (set! r13 rsi) (set! r9 r13) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3561) (jump L.tmp.3562) (with-label L.tmp.3561 (set! r9 14)) (jump L.tmp.3563) (with-label L.tmp.3562 (set! r9 6)) (jump L.tmp.3563) (with-label L.tmp.3563 (compare r9 6)) (jump-if != L.__nested.3554) (jump L.__nested.3555) (with-label L.tmp.3558 (set! r9 14)) (jump L.tmp.3560) (with-label L.tmp.3559 (set! r9 6)) (jump L.tmp.3560) (with-label L.tmp.3560 (compare r9 6)) (jump-if != L.__nested.3556) (jump L.__nested.3557) (with-label L.__nested.3556 (set! r13 r13)) (set! r13 (arithmetic-shift-right r13 3)) (set! rax r14) (set! rax (* rax r13)) (jump r15) (with-label L.__nested.3557 (set! rax 62)) (jump r15) (with-label L.__nested.3554 (set! r9 r14)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3558) (jump L.tmp.3559) (with-label L.__nested.3555 (set! rax 62)) (jump r15) (with-label L.-.3549 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3571) (jump L.tmp.3572) (with-label L.tmp.3571 (set! r9 14)) (jump L.tmp.3573) (with-label L.tmp.3572 (set! r9 6)) (jump L.tmp.3573) (with-label L.tmp.3573 (compare r9 6)) (jump-if != L.__nested.3564) (jump L.__nested.3565) (with-label L.tmp.3568 (set! r9 14)) (jump L.tmp.3570) (with-label L.tmp.3569 (set! r9 6)) (jump L.tmp.3570) (with-label L.tmp.3570 (compare r9 6)) (jump-if != L.__nested.3566) (jump L.__nested.3567) (with-label L.__nested.3566 (set! rax r13)) (set! rax (- rax r14)) (jump r15) (with-label L.__nested.3567 (set! rax 574)) (jump r15) (with-label L.__nested.3564 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3568) (jump L.tmp.3569) (with-label L.__nested.3565 (set! rax 574)) (jump r15) (with-label L.fact.3548 (set! r10 r15)) (set! (rbp - 0) r10) (set! r10 rdi) (set! (rbp - 8) r10) (set! r10 (rbp - 8)) (compare r10 0) (jump-if = L.tmp.3576) (jump L.tmp.3577) (with-label L.tmp.3576 (set! r15 14)) (jump L.tmp.3578) (with-label L.tmp.3577 (set! r15 6)) (jump L.tmp.3578) (with-label L.tmp.3578 (compare r15 6)) (jump-if != L.__nested.3574) (jump L.__nested.3575) (with-label L.rp.3551 (set! rbp (+ rbp 16))) (set! r15 rax) (set! rbp (- rbp 16)) (set! rdi r15) (set! r15 L.rp.3552) (jump L.fact.3548) (with-label L.rp.3552 (set! rbp (+ rbp 16))) (set! r15 rax) (set! rsi r15) (set! rdi (rbp - 8)) (set! r15 (rbp - 0)) (jump L.*.3550) (with-label L.__nested.3574 (set! rax 8)) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3575 (set! rbp (- rbp 16))) (set! rsi 8) (set! rdi (rbp - -8)) (set! r15 L.rp.3551) (jump L.-.3549)) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.3579) (with-label L.+.3580 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3591) (jump L.tmp.3592) (with-label L.tmp.3591 (set! r9 14)) (jump L.tmp.3593) (with-label L.tmp.3592 (set! r9 6)) (jump L.tmp.3593) (with-label L.tmp.3593 (compare r9 6)) (jump-if != L.__nested.3584) (jump L.__nested.3585) (with-label L.tmp.3588 (set! r9 14)) (jump L.tmp.3590) (with-label L.tmp.3589 (set! r9 6)) (jump L.tmp.3590) (with-label L.tmp.3590 (compare r9 6)) (jump-if != L.__nested.3586) (jump L.__nested.3587) (with-label L.__nested.3586 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3587 (set! rax 318)) (jump r15) (with-label L.__nested.3584 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3588) (jump L.tmp.3589) (with-label L.__nested.3585 (set! rax 318)) (jump r15) (with-label L.fib_loop.3579 (set! r10 r15)) (set! (rbp - 0) r10) (set! r15 rdi) (set! r10 rsi) (set! (rbp - 16) r10) (set! r10 rdx) (set! (rbp - 8) r10) (compare r15 0) (jump-if = L.tmp.3601) (jump L.tmp.3602) (with-label L.tmp.3601 (set! r14 14)) (jump L.tmp.3603) (with-label L.tmp.3602 (set! r14 6)) (jump L.tmp.3603) (with-label L.tmp.3603 (compare r14 6)) (jump-if != L.__nested.3594) (jump L.__nested.3595) (with-label L.tmp.3598 (set! r14 14)) (jump L.tmp.3600) (with-label L.tmp.3599 (set! r14 6)) (jump L.tmp.3600) (with-label L.tmp.3600 (compare r14 6)) (jump-if != L.__nested.3596) (jump L.__nested.3597) (with-label L.rp.3581 (set! rbp (+ rbp 32))) (set! r10 rax) (set! (rbp - 24) r10) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3582) (jump L.+.3580) (with-label L.rp.3582 (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.3579) (with-label L.__nested.3596 (set! rax (rbp - 8))) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3597 (set! rbp (- rbp 32))) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3581) (jump L.+.3580) (with-label L.__nested.3594 (set! rax (rbp - 16))) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3595 (compare r15 8)) (jump-if = L.tmp.3598) (jump L.tmp.3599)) (begin (set! r15 r15) (set! rdx 8) (set! rsi 0) (set! rdi 40) (set! r15 r15) (jump L.fib_loop.3604) (with-label L.+.3605 (set! r15 r15)) (set! r13 rdi) (set! r14 rsi) (set! r9 r14) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3616) (jump L.tmp.3617) (with-label L.tmp.3616 (set! r9 14)) (jump L.tmp.3618) (with-label L.tmp.3617 (set! r9 6)) (jump L.tmp.3618) (with-label L.tmp.3618 (compare r9 6)) (jump-if != L.__nested.3609) (jump L.__nested.3610) (with-label L.tmp.3613 (set! r9 14)) (jump L.tmp.3615) (with-label L.tmp.3614 (set! r9 6)) (jump L.tmp.3615) (with-label L.tmp.3615 (compare r9 6)) (jump-if != L.__nested.3611) (jump L.__nested.3612) (with-label L.__nested.3611 (set! rax r13)) (set! rax (+ rax r14)) (jump r15) (with-label L.__nested.3612 (set! rax 318)) (jump r15) (with-label L.__nested.3609 (set! r9 r13)) (set! r9 (bitwise-and r9 7)) (compare r9 0) (jump-if = L.tmp.3613) (jump L.tmp.3614) (with-label L.__nested.3610 (set! rax 318)) (jump r15) (with-label L.fib_loop.3604 (set! r10 r15)) (set! (rbp - 0) r10) (set! r15 rdi) (set! r10 rsi) (set! (rbp - 16) r10) (set! r10 rdx) (set! (rbp - 8) r10) (compare r15 0) (jump-if = L.tmp.3626) (jump L.tmp.3627) (with-label L.tmp.3626 (set! r14 14)) (jump L.tmp.3628) (with-label L.tmp.3627 (set! r14 6)) (jump L.tmp.3628) (with-label L.tmp.3628 (compare r14 6)) (jump-if != L.__nested.3619) (jump L.__nested.3620) (with-label L.tmp.3623 (set! r14 14)) (jump L.tmp.3625) (with-label L.tmp.3624 (set! r14 6)) (jump L.tmp.3625) (with-label L.tmp.3625 (compare r14 6)) (jump-if != L.__nested.3621) (jump L.__nested.3622) (with-label L.rp.3606 (set! rbp (+ rbp 32))) (set! r10 rax) (set! (rbp - 24) r10) (set! rbp (- rbp 32)) (set! rsi (rbp - -24)) (set! rdi (rbp - -16)) (set! r15 L.rp.3607) (jump L.+.3605) (with-label L.rp.3607 (set! rbp (+ rbp 32))) (set! r15 rax) (set! rdx r15) (set! rsi (rbp - 8)) (set! rdi (rbp - 24)) (set! r15 (rbp - 0)) (jump L.fib_loop.3604) (with-label L.__nested.3621 (set! rax (rbp - 8))) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3622 (set! rbp (- rbp 32))) (set! rsi -8) (set! rdi r15) (set! r15 L.rp.3606) (jump L.+.3605) (with-label L.__nested.3619 (set! rax (rbp - 16))) (set! r10 (rbp - 0)) (jump r10) (with-label L.__nested.3620 (compare r15 8)) (jump-if = L.tmp.3623) (jump L.tmp.3624))))
   ))